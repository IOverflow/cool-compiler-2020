[]
[('out_string', 'function_out_string_at_Main'), ('out_int', 'function_out_int_at_Main'), ('in_string', 'function_in_string_at_Main'), ('in_int', 'function_in_int_at_Main'), ('abort', 'function_abort_at_Main'), ('type_name', 'function_type_name_at_Main'), ('copy', 'function_copy_at_Main'), ('main', 'function_main_at_Main'), ('fib', 'function_fib_at_Main')]

# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sat Nov  7 14:53:21 2020
# School of Math and Computer Science, University of Havana
# 

.data
Main: 
   # 


.data
#  **** VTABLE for type Main ****
Main_vtable:   .word    function_out_string_at_Main, function_out_int_at_Main, function_in_string_at_Main, function_in_int_at_Main, function_abort_at_Main, function_type_name_at_Main, function_copy_at_Main, function_main_at_Main, function_fib_at_Main
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   Main_end: 
# 


.data
data_0:   .asciiz    
# 


.data
__Object_Object_tdt_entry__:   .word    0
__Object_Int_tdt_entry__:   .word    1
__Object_String_tdt_entry__:   .word    1
__Object_Bool_tdt_entry__:   .word    1
__Object_IO_tdt_entry__:   .word    1
__Object_Main_tdt_entry__:   .word    2
__Int_Object_tdt_entry__:   .word    -1
__Int_Int_tdt_entry__:   .word    0
__Int_String_tdt_entry__:   .word    -1
__Int_Bool_tdt_entry__:   .word    -1
__Int_IO_tdt_entry__:   .word    -1
__Int_Main_tdt_entry__:   .word    -1
__String_Object_tdt_entry__:   .word    -1
__String_Int_tdt_entry__:   .word    -1
__String_String_tdt_entry__:   .word    0
__String_Bool_tdt_entry__:   .word    -1
__String_IO_tdt_entry__:   .word    -1
__String_Main_tdt_entry__:   .word    -1
__Bool_Object_tdt_entry__:   .word    -1
__Bool_Int_tdt_entry__:   .word    -1
__Bool_String_tdt_entry__:   .word    -1
__Bool_Bool_tdt_entry__:   .word    0
__Bool_IO_tdt_entry__:   .word    -1
__Bool_Main_tdt_entry__:   .word    -1
__IO_Object_tdt_entry__:   .word    -1
__IO_Int_tdt_entry__:   .word    -1
__IO_String_tdt_entry__:   .word    -1
__IO_Bool_tdt_entry__:   .word    -1
__IO_IO_tdt_entry__:   .word    0
__IO_Main_tdt_entry__:   .word    1
__Main_Object_tdt_entry__:   .word    -1
__Main_Int_tdt_entry__:   .word    -1
__Main_String_tdt_entry__:   .word    -1
__Main_Bool_tdt_entry__:   .word    -1
__Main_IO_tdt_entry__:   .word    -1
__Main_Main_tdt_entry__:   .word    0
# 


.data
data_2:   .asciiz    "Enter n to find nth fibonacci number!\n"
# 


.data
data_3:   .asciiz    "\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # main END

.text
# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t0, Main
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   move $t1, $v0
   sw $t1, -4($fp)
   # ARG local__internal_0
   # LOCAL local__internal_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # local__internal_1 = CALL function_main_at_Main
   # LOCAL local__internal_1 --> -8($fp)
   jal function_main_at_Main
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


.text
# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 76
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 76
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = SELF
   sw $a0, -12($fp)
   # local_main_at_Main_internal_0 = TYPEOF local_main_at_Main_internal_2
   lw $t0, -12($fp)
   # Load pointer to type
   lw $t1, 4($t0)
   sw $t1, -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # 
   lw $t0, data_2
   sw $t0, -16($fp)
   # ARG local_main_at_Main_internal_3
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 out_string
   # Save current self pointer in $a1
   move $a1, $a0
   # Save new self pointer in $a0
   lw $a0, -4($fp)
   # Get pointer to type
   lw $t0, -4($fp)
   # Get pointer to type's VTABLE
   lw $t1, 0($t0)
   # Get pointer to function address
   lw $t2, 0($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $a0, $a1
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # local_main_at_Main_internal_6 = SELF
   sw $a0, -28($fp)
   # local_main_at_Main_internal_4 = TYPEOF local_main_at_Main_internal_6
   lw $t0, -28($fp)
   # Load pointer to type
   lw $t1, 4($t0)
   sw $t1, -20($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = SELF
   sw $a0, -40($fp)
   # local_main_at_Main_internal_7 = TYPEOF local_main_at_Main_internal_9
   lw $t0, -40($fp)
   # Load pointer to type
   lw $t1, 4($t0)
   sw $t1, -32($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # local_main_at_Main_internal_12 = SELF
   sw $a0, -52($fp)
   # local_main_at_Main_internal_10 = TYPEOF local_main_at_Main_internal_12
   lw $t0, -52($fp)
   # Load pointer to type
   lw $t1, 4($t0)
   sw $t1, -44($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = VCALL local_main_at_Main_internal_10 in_int
   # Save current self pointer in $a1
   move $a1, $a0
   # Save new self pointer in $a0
   lw $a0, -44($fp)
   # Get pointer to type
   lw $t0, -44($fp)
   # Get pointer to type's VTABLE
   lw $t1, 0($t0)
   # Get pointer to function address
   lw $t2, 12($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -48($fp)
   # Restore self pointer after function call
   move $a0, $a1
   # ARG local_main_at_Main_internal_11
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   lw $t0, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = VCALL local_main_at_Main_internal_7 fib
   # Save current self pointer in $a1
   move $a1, $a0
   # Save new self pointer in $a0
   lw $a0, -32($fp)
   # Get pointer to type
   lw $t0, -32($fp)
   # Get pointer to type's VTABLE
   lw $t1, 0($t0)
   # Get pointer to function address
   lw $t2, 32($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -36($fp)
   # Restore self pointer after function call
   move $a0, $a1
   # ARG local_main_at_Main_internal_8
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = VCALL local_main_at_Main_internal_4 out_int
   # Save current self pointer in $a1
   move $a1, $a0
   # Save new self pointer in $a0
   lw $a0, -20($fp)
   # Get pointer to type
   lw $t0, -20($fp)
   # Get pointer to type's VTABLE
   lw $t1, 0($t0)
   # Get pointer to function address
   lw $t2, 4($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -24($fp)
   # Restore self pointer after function call
   move $a0, $a1
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_15 = SELF
   sw $a0, -64($fp)
   # local_main_at_Main_internal_13 = TYPEOF local_main_at_Main_internal_15
   lw $t0, -64($fp)
   # Load pointer to type
   lw $t1, 4($t0)
   sw $t1, -56($fp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # 
   lw $t0, data_3
   sw $t0, -68($fp)
   # ARG local_main_at_Main_internal_16
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   lw $t0, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = VCALL local_main_at_Main_internal_13 out_string
   # Save current self pointer in $a1
   move $a1, $a0
   # Save new self pointer in $a0
   lw $a0, -56($fp)
   # Get pointer to type
   lw $t0, -56($fp)
   # Get pointer to type's VTABLE
   lw $t1, 0($t0)
   # Get pointer to function address
   lw $t2, 0($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -60($fp)
   # Restore self pointer after function call
   move $a0, $a1
   # RETURN local_main_at_Main_internal_14
   lw $v0, -60($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 76
   jr $ra
   # Function END


.text
# function_fib_at_Main implementation.
# @Params:
# 	0($fp) = param_fib_at_Main_i_0
function_fib_at_Main: 
   # Allocate stack frame for function function_fib_at_Main.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_fib_at_Main_a_0 --> -4($fp)
   # local_fib_at_Main_a_0 = 1
   li $t0, 1
   sw $t0, -4($fp)
   # LOCAL local_fib_at_Main_b_1 --> -8($fp)
   # local_fib_at_Main_b_1 = 0
   li $t0, 0
   sw $t0, -8($fp)
   # LOCAL local_fib_at_Main_c_2 --> -12($fp)
   # local_fib_at_Main_c_2 = 0
   li $t0, 0
   sw $t0, -12($fp)
   label_WHILE_1: 
      # LOCAL local_fib_at_Main_internal_3 --> -16($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # local_fib_at_Main_internal_3 = PARAM param_fib_at_Main_i_0 - 0
      lw $t0, 0($fp)
      sub $t0, $t0, 0
      sw $t0, -16($fp)
      # IF_ZERO local_fib_at_Main_internal_3 GOTO label_TRUE_3
      # IF_ZERO local_fib_at_Main_internal_3 GOTO label_TRUE_3
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_3
      # LOCAL local_fib_at_Main_internal_3 --> -16($fp)
      # local_fib_at_Main_internal_3 = 0
      li $t0, 0
      sw $t0, -16($fp)
      # GOTO label_END_4
      j label_END_4
   label_TRUE_3: 
      # LOCAL local_fib_at_Main_internal_3 --> -16($fp)
      # local_fib_at_Main_internal_3 = 1
      li $t0, 1
      sw $t0, -16($fp)
      label_END_4: 
      # NOT local_fib_at_Main_internal_3
      # LOCAL local_fib_at_Main_internal_3 --> -16($fp)
      # Load value in register
      lw $t0, -16($fp)
      # a nor 0 = not (a or 0) = not a
      nor $t0, $t0, $zero
      # Store negated value
      sw $t0, -16($fp)
      # IF_ZERO local_fib_at_Main_internal_3 GOTO label_WHILE_END_2
      # IF_ZERO local_fib_at_Main_internal_3 GOTO label_WHILE_END_2
      lw $t0, -16($fp)
      beq $t0, 0, label_WHILE_END_2
   #  = 
   #  = 
   #  = 
   #  = 
   # GOTO label_WHILE_1
   j label_WHILE_1
   label_WHILE_END_2: 
   # RETURN local_fib_at_Main_a_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_fib_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END



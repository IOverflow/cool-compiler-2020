
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Fri Dec  4 17:56:59 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


__Object_Object_tdt_entry__:   .word    0
__Object_Int_tdt_entry__:   .word    1
__Object_String_tdt_entry__:   .word    1
__Object_Bool_tdt_entry__:   .word    1
__Object_IO_tdt_entry__:   .word    1
__Object_Main_tdt_entry__:   .word    2
__Int_Object_tdt_entry__:   .word    -1
__Int_Int_tdt_entry__:   .word    0
__Int_String_tdt_entry__:   .word    -1
__Int_Bool_tdt_entry__:   .word    -1
__Int_IO_tdt_entry__:   .word    -1
__Int_Main_tdt_entry__:   .word    -1
__String_Object_tdt_entry__:   .word    -1
__String_Int_tdt_entry__:   .word    -1
__String_String_tdt_entry__:   .word    0
__String_Bool_tdt_entry__:   .word    -1
__String_IO_tdt_entry__:   .word    -1
__String_Main_tdt_entry__:   .word    -1
__Bool_Object_tdt_entry__:   .word    -1
__Bool_Int_tdt_entry__:   .word    -1
__Bool_String_tdt_entry__:   .word    -1
__Bool_Bool_tdt_entry__:   .word    0
__Bool_IO_tdt_entry__:   .word    -1
__Bool_Main_tdt_entry__:   .word    -1
__IO_Object_tdt_entry__:   .word    -1
__IO_Int_tdt_entry__:   .word    -1
__IO_String_tdt_entry__:   .word    -1
__IO_Bool_tdt_entry__:   .word    -1
__IO_IO_tdt_entry__:   .word    0
__IO_Main_tdt_entry__:   .word    1
__Main_Object_tdt_entry__:   .word    -1
__Main_Int_tdt_entry__:   .word    -1
__Main_String_tdt_entry__:   .word    -1
__Main_Bool_tdt_entry__:   .word    -1
__Main_IO_tdt_entry__:   .word    -1
__Main_Main_tdt_entry__:   .word    0
# 


data_2:   .asciiz    "\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_in_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 8($v0)
   li $v0, 4
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   li $a0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f6c84e470d0>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t1, 12($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t2, 12($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t1, $t2
   move $t4, $a0
   # Get first string from self
   lw $t1, 8($s1)
   # Get second string from param
   lw $t2, 8($v0)
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t3, $v0
   move $t5, $zero
   concat_loop1: 
      # Compare t1 with \0
      lb $t5, 0($t1)
      beqz $t5, concat_loop1_end
      # Copy 1 byte
      sb $t5, 0($t3)
      addu $t3, $t3, 1
      addu $t1, $t1, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t2 with \0
         lb $t5, 0($t2)
         beqz $t5, concat_loop2_end
         # Copy 1 byte
         sb $t5, 0($t3)
         addu $t3, $t3, 1
         addu $t2, $t2, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t3)
         # v0 contains resulting string
         move $t2, $v0
         # Allocating 16 bytes of memory
         li $a0, 16
         li $v0, 9
         syscall
         # Allocating string
         la $t1, String
         sw $t1, 0($v0)
         la $t1, String_start
         sw $t1, 4($v0)
         sw $t2, 8($v0)
         sw $t4, 12($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t1, 8($s1)
   lw $t3, 4($fp)
   addu $t1, $t1, $t3
   lw $a0, 0($fp)
   move $t4, $a0
   move $t2, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t3, $v0
   substr_loop: 
      beqz $t2, substr_end
      lb $a0, 0($t1)
      sb $a0, 0($t3)
      addu $t1, $t1, 1
      addu $t3, $t3, 1
      subu $t2, $t2, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t3)
      move $t2, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      sw $t2, 8($v0)
      sw $t4, 12($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t1, 12($s1)
   sw $t1, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   la $t3, Main
   sw $t3, 8($v0)
   li $t3, 4
   sw $t3, 12($v0)
   move $t3, $v0
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Main_start
   sw $t3, 4($v0)
   move $t2, $v0
   sw $t2, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL function_main_at_Main
   # LOCAL local__internal_1 --> -8($fp)
   jal function_main_at_Main
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 56
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 56
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_0 = local_main_at_Main_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = ALLOCATE Object
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   la $t4, Object
   sw $t4, 8($v0)
   li $t4, 6
   sw $t4, 12($v0)
   move $t4, $v0
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Object_start
   sw $t4, 4($v0)
   move $t3, $v0
   sw $t3, -32($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_5 = local_main_at_Main_internal_7
   lw $t3, -32($fp)
   sw $t3, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # local_main_at_Main_internal_6 = VCALL local_main_at_Main_internal_5 type_name
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 4($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # local_main_at_Main_internal_3 = local_main_at_Main_internal_6
   lw $t3, -28($fp)
   sw $t3, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 4
   li $t3, 4
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # ARG 1
   li $t3, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_4 = VCALL local_main_at_Main_internal_3 substr
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 4($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_main_at_Main_internal_4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   lw $t3, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_10 = SELF
   sw $s1, -44($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_8 = local_main_at_Main_internal_10
   lw $t3, -44($fp)
   sw $t3, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   la $t3, data_2
   sw $t3, 8($v0)
   li $t3, 2
   sw $t3, 12($v0)
   sw $v0, -48($fp)
   # ARG local_main_at_Main_internal_11
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   lw $t3, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = VCALL local_main_at_Main_internal_8 out_string
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_9
   lw $v0, -40($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 56
   jr $ra
   # Function END




# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sun Dec  6 22:31:41 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Main:   .asciiz    "Main"
# Function END
BookList:   .asciiz    "BookList"
# Function END
Nil:   .asciiz    "Nil"
# Function END
Cons:   .asciiz    "Cons"
# Function END
Book:   .asciiz    "Book"
# Function END
Article:   .asciiz    "Article"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


#  **** VTABLE for type BookList ****
BookList_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_isNil_at_BookList, function_cons_at_BookList, function_car_at_BookList, function_cdr_at_BookList, function_print_list_at_BookList
# Function END
# 


#  **** Type RECORD for type BookList ****
BookList_start: 
   BookList_vtable_pointer:   .word    BookList_vtable
   # Function END
BookList_end: 
# 


#  **** VTABLE for type Nil ****
Nil_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_isNil_at_Nil, function_cons_at_BookList, function_car_at_BookList, function_cdr_at_BookList, function_print_list_at_Nil
# Function END
# 


#  **** Type RECORD for type Nil ****
Nil_start: 
   Nil_vtable_pointer:   .word    Nil_vtable
   # Function END
Nil_end: 
# 


#  **** VTABLE for type Cons ****
Cons_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_isNil_at_Cons, function_cons_at_BookList, function_car_at_Cons, function_cdr_at_Cons, function_print_list_at_Cons, function_init_at_Cons
# Function END
# 


#  **** Type RECORD for type Cons ****
Cons_start: 
   Cons_vtable_pointer:   .word    Cons_vtable
   # Function END
Cons_end: 
# 


#  **** VTABLE for type Book ****
Book_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_initBook_at_Book, function_print_at_Book
# Function END
# 


#  **** Type RECORD for type Book ****
Book_start: 
   Book_vtable_pointer:   .word    Book_vtable
   # Function END
Book_end: 
# 


#  **** VTABLE for type Article ****
Article_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_initBook_at_Book, function_print_at_Article, function_initArticle_at_Article
# Function END
# 


#  **** Type RECORD for type Article ****
Article_start: 
   Article_vtable_pointer:   .word    Article_vtable
   # Function END
Article_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, 1, 2, 2, 1, 2
Object__TDT:   .word    1, 0, 1, 1, 1, 2, 3, 3, 2, 3
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1, -1, -1, -1
Main__TDT:   .word    -1, -1, -1, -1, 0, -1, -1, -1, -1, -1
BookList__TDT:   .word    -1, -1, -1, -1, -1, 0, 1, 1, -1, -1
Nil__TDT:   .word    -1, -1, -1, -1, -1, -1, 0, -1, -1, -1
Cons__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, 0, -1, -1
Book__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, 0, 1
Article__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "Compilers, Principles, Techniques, and Tools"
# 


data_5:   .asciiz    "Aho, Sethi, and Ullman"
# 


data_6:   .asciiz    "The Top 100 CD_ROMs"
# 


data_7:   .asciiz    "Ulanoff"
# 


data_8:   .asciiz    "PC Magazine"
# 


data_9:   .asciiz    "- dynamic type was Book -\n"
# 


data_10:   .asciiz    "- dynamic type was Article -\n"
# 


data_11:   .asciiz    "title:      "
# 


data_12:   .asciiz    "\n"
# 


data_13:   .asciiz    "author:     "
# 


data_14:   .asciiz    "\n"
# 


data_15:   .asciiz    "periodical:  "
# 


data_16:   .asciiz    "\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f93dacc6100>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 16
   sw $t2, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__books__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t1, Main_vtable
   # Get pointer to function address
   lw $t2, 12($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__books__init implementation.
# @Params:
__Main__attrib__books__init: 
   # Allocate stack frame for function __Main__attrib__books__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__books__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # LOCAL local_main_at_Main_a_book_0 --> -4($fp)
   # local_main_at_Main_a_book_0 = ALLOCATE Book
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, Book
   sw $t3, 12($v0)
   li $t3, 4
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Book_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 32
   sw $t3, 8($v0)
   move $t2, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __Book__attrib__title__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t2)
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __Book__attrib__author__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t2)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t2, -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = ALLOCATE Book
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Book
   sw $t4, 12($v0)
   li $t4, 4
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Book_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 32
   sw $t4, 8($v0)
   move $t3, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t3 into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   jal __Book__attrib__title__init
   # Pop 4 bytes from stack into register t3
   lw $t3, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t3)
   # Push register t3 into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   jal __Book__attrib__author__init
   # Pop 4 bytes from stack into register t3
   lw $t3, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t3)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t3, -16($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_1 = local_main_at_Main_internal_3
   lw $t3, -16($fp)
   sw $t3, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, data_4
   sw $t3, 12($v0)
   li $t3, 44
   sw $t3, 16($v0)
   sw $v0, -20($fp)
   # ARG local_main_at_Main_internal_4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   lw $t3, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, data_5
   sw $t3, 12($v0)
   li $t3, 22
   sw $t3, 16($v0)
   sw $v0, -24($fp)
   # ARG local_main_at_Main_internal_5
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   lw $t3, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = VCALL local_main_at_Main_internal_1 initBook
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 28($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_a_book_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_a_book_0 = local_main_at_Main_internal_2
   lw $t3, -12($fp)
   sw $t3, -4($fp)
   # LOCAL local_main_at_Main_an_article_6 --> -28($fp)
   # local_main_at_Main_an_article_6 = ALLOCATE Article
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, Article
   sw $t5, 12($v0)
   li $t5, 7
   sw $t5, 16($v0)
   move $t5, $v0
   # Allocating 24 bytes of memory
   li $a0, 24
   li $v0, 9
   syscall
   sw $t5, 0($v0)
   la $t5, Article_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 36
   sw $t5, 8($v0)
   move $t4, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t4 into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   jal __Book__attrib__title__init
   # Pop 4 bytes from stack into register t4
   lw $t4, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t4)
   # Push register t4 into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   jal __Book__attrib__author__init
   # Pop 4 bytes from stack into register t4
   lw $t4, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t4)
   # Push register t4 into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   jal __Article__attrib__per_title__init
   # Pop 4 bytes from stack into register t4
   lw $t4, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t4)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t4, -28($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = ALLOCATE Article
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t6, String
   sw $t6, 0($v0)
   la $t6, String_start
   sw $t6, 4($v0)
   # Load type offset
   li $t6, 8
   sw $t6, 8($v0)
   la $t6, Article
   sw $t6, 12($v0)
   li $t6, 7
   sw $t6, 16($v0)
   move $t6, $v0
   # Allocating 24 bytes of memory
   li $a0, 24
   li $v0, 9
   syscall
   sw $t6, 0($v0)
   la $t6, Article_start
   sw $t6, 4($v0)
   # Load type offset
   li $t6, 36
   sw $t6, 8($v0)
   move $t5, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t5 into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   jal __Book__attrib__title__init
   # Pop 4 bytes from stack into register t5
   lw $t5, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t5)
   # Push register t5 into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   jal __Book__attrib__author__init
   # Pop 4 bytes from stack into register t5
   lw $t5, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t5)
   # Push register t5 into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   jal __Article__attrib__per_title__init
   # Pop 4 bytes from stack into register t5
   lw $t5, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t5)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t5, -40($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_7 = local_main_at_Main_internal_9
   lw $t5, -40($fp)
   sw $t5, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, data_6
   sw $t5, 12($v0)
   li $t5, 19
   sw $t5, 16($v0)
   sw $v0, -44($fp)
   # ARG local_main_at_Main_internal_10
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   lw $t5, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, data_7
   sw $t5, 12($v0)
   li $t5, 7
   sw $t5, 16($v0)
   sw $v0, -48($fp)
   # ARG local_main_at_Main_internal_11
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   lw $t5, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, data_8
   sw $t5, 12($v0)
   li $t5, 11
   sw $t5, 16($v0)
   sw $v0, -52($fp)
   # ARG local_main_at_Main_internal_12
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   lw $t5, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = VCALL local_main_at_Main_internal_7 initArticle
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t5, 4($s1)
   # Get pointer to type's VTABLE
   lw $t6, 0($t5)
   # Get pointer to function address
   lw $t7, 36($t6)
   # Call function. Result is on $v0
   jalr $t7
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_an_article_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_an_article_6 = local_main_at_Main_internal_8
   lw $t5, -36($fp)
   sw $t5, -28($fp)
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   # local_main_at_Main_internal_17 = ALLOCATE Nil
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t7, String
   sw $t7, 0($v0)
   la $t7, String_start
   sw $t7, 4($v0)
   # Load type offset
   li $t7, 8
   sw $t7, 8($v0)
   la $t7, Nil
   sw $t7, 12($v0)
   li $t7, 3
   sw $t7, 16($v0)
   move $t7, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t7, 0($v0)
   la $t7, Nil_start
   sw $t7, 4($v0)
   # Load type offset
   li $t7, 24
   sw $t7, 8($v0)
   move $t6, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t6, -72($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   # local_main_at_Main_internal_15 = local_main_at_Main_internal_17
   lw $t6, -72($fp)
   sw $t6, -64($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_main_at_Main_a_book_0
   # LOCAL local_main_at_Main_a_book_0 --> -4($fp)
   lw $t6, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t6, 0($sp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # local_main_at_Main_internal_16 = VCALL local_main_at_Main_internal_15 cons
   # Save new self pointer in $s1
   lw $s1, -64($fp)
   # Get pointer to type
   lw $t6, 4($s1)
   # Get pointer to type's VTABLE
   lw $t7, 0($t6)
   # Get pointer to function address
   lw $t8, 32($t7)
   # Call function. Result is on $v0
   jalr $t8
   sw $v0, -68($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # local_main_at_Main_internal_13 = local_main_at_Main_internal_16
   lw $t6, -68($fp)
   sw $t6, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_main_at_Main_an_article_6
   # LOCAL local_main_at_Main_an_article_6 --> -28($fp)
   lw $t6, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t6, 0($sp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = VCALL local_main_at_Main_internal_13 cons
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t6, 4($s1)
   # Get pointer to type's VTABLE
   lw $t7, 0($t6)
   # Get pointer to function address
   lw $t8, 32($t7)
   # Call function. Result is on $v0
   jalr $t8
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   lw $t6, -60($fp)
   sw $t6, 12($s1)
   # local_main_at_Main_internal_20 = GETATTRIBUTE books Main
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   lw $t6, 12($s1)
   sw $t6, -84($fp)
   # LOCAL local_main_at_Main_internal_18 --> -76($fp)
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   # local_main_at_Main_internal_18 = local_main_at_Main_internal_20
   lw $t6, -84($fp)
   sw $t6, -76($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_18 --> -76($fp)
   # LOCAL local_main_at_Main_internal_19 --> -80($fp)
   # local_main_at_Main_internal_19 = VCALL local_main_at_Main_internal_18 print_list
   # Save new self pointer in $s1
   lw $s1, -76($fp)
   # Get pointer to type
   lw $t6, 4($s1)
   # Get pointer to type's VTABLE
   lw $t7, 0($t6)
   # Get pointer to function address
   lw $t8, 44($t7)
   # Call function. Result is on $v0
   jalr $t8
   sw $v0, -80($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_19
   lw $v0, -80($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 92
   jr $ra
   # Function END


# function_isNil_at_BookList implementation.
# @Params:
function_isNil_at_BookList: 
   # Allocate stack frame for function function_isNil_at_BookList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_BookList_internal_2 --> -12($fp)
   # local_isNil_at_BookList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_isNil_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_isNil_at_BookList_internal_2 --> -12($fp)
   # local_isNil_at_BookList_internal_0 = local_isNil_at_BookList_internal_2
   lw $t6, -12($fp)
   sw $t6, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_isNil_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_isNil_at_BookList_internal_1 --> -8($fp)
   # local_isNil_at_BookList_internal_1 = VCALL local_isNil_at_BookList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t6, 4($s1)
   # Get pointer to type's VTABLE
   lw $t7, 0($t6)
   # Get pointer to function address
   lw $t8, 0($t7)
   # Call function. Result is on $v0
   jalr $t8
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_isNil_at_BookList_internal_3 --> -16($fp)
   # local_isNil_at_BookList_internal_3 = 1
   li $t6, 1
   sw $t6, -16($fp)
   # RETURN local_isNil_at_BookList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_isNil_at_BookList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cons_at_BookList implementation.
# @Params:
# 	0($fp) = param_cons_at_BookList_hd_0
function_cons_at_BookList: 
   # Allocate stack frame for function function_cons_at_BookList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_cons_at_BookList_new_cell_0 --> -4($fp)
   # local_cons_at_BookList_new_cell_0 = ALLOCATE Cons
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t8, String
   sw $t8, 0($v0)
   la $t8, String_start
   sw $t8, 4($v0)
   # Load type offset
   li $t8, 8
   sw $t8, 8($v0)
   la $t8, Cons
   sw $t8, 12($v0)
   li $t8, 4
   sw $t8, 16($v0)
   move $t8, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t8, 0($v0)
   la $t8, Cons_start
   sw $t8, 4($v0)
   # Load type offset
   li $t8, 28
   sw $t8, 8($v0)
   move $t7, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t7 into stack
   subu $sp, $sp, 4
   sw $t7, 0($sp)
   jal __Cons__attrib__xcar__init
   # Pop 4 bytes from stack into register t7
   lw $t7, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t7)
   # Push register t7 into stack
   subu $sp, $sp, 4
   sw $t7, 0($sp)
   jal __Cons__attrib__xcdr__init
   # Pop 4 bytes from stack into register t7
   lw $t7, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t7)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t7, -4($fp)
   # LOCAL local_cons_at_BookList_internal_1 --> -8($fp)
   # local_cons_at_BookList_internal_1 = ALLOCATE Cons
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t9, String
   sw $t9, 0($v0)
   la $t9, String_start
   sw $t9, 4($v0)
   # Load type offset
   li $t9, 8
   sw $t9, 8($v0)
   la $t9, Cons
   sw $t9, 12($v0)
   li $t9, 4
   sw $t9, 16($v0)
   move $t9, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t9, 0($v0)
   la $t9, Cons_start
   sw $t9, 4($v0)
   # Load type offset
   li $t9, 28
   sw $t9, 8($v0)
   move $t8, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t8 into stack
   subu $sp, $sp, 4
   sw $t8, 0($sp)
   jal __Cons__attrib__xcar__init
   # Pop 4 bytes from stack into register t8
   lw $t8, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t8)
   # Push register t8 into stack
   subu $sp, $sp, 4
   sw $t8, 0($sp)
   jal __Cons__attrib__xcdr__init
   # Pop 4 bytes from stack into register t8
   lw $t8, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t8)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t8, -8($fp)
   # LOCAL local_cons_at_BookList_new_cell_0 --> -4($fp)
   # LOCAL local_cons_at_BookList_internal_1 --> -8($fp)
   # local_cons_at_BookList_new_cell_0 = local_cons_at_BookList_internal_1
   lw $t8, -8($fp)
   sw $t8, -4($fp)
   # LOCAL local_cons_at_BookList_internal_2 --> -12($fp)
   # LOCAL local_cons_at_BookList_new_cell_0 --> -4($fp)
   # local_cons_at_BookList_internal_2 = local_cons_at_BookList_new_cell_0
   lw $t8, -4($fp)
   sw $t8, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cons_at_BookList_hd_0
   # PARAM param_cons_at_BookList_hd_0 --> 0($fp)
   lw $t8, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t8, 0($sp)
   # LOCAL local_cons_at_BookList_internal_4 --> -20($fp)
   # local_cons_at_BookList_internal_4 = SELF
   sw $s1, -20($fp)
   # ARG local_cons_at_BookList_internal_4
   # LOCAL local_cons_at_BookList_internal_4 --> -20($fp)
   lw $t8, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t8, 0($sp)
   # LOCAL local_cons_at_BookList_internal_2 --> -12($fp)
   # LOCAL local_cons_at_BookList_internal_3 --> -16($fp)
   # local_cons_at_BookList_internal_3 = VCALL local_cons_at_BookList_internal_2 init
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t8, 4($s1)
   # Get pointer to type's VTABLE
   lw $t9, 0($t8)
   # Get pointer to function address
   lw $s2, 48($t9)
   # Call function. Result is on $v0
   jalr $s2
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_cons_at_BookList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_cons_at_BookList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_car_at_BookList implementation.
# @Params:
function_car_at_BookList: 
   # Allocate stack frame for function function_car_at_BookList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_car_at_BookList_internal_2 --> -12($fp)
   # local_car_at_BookList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_car_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_car_at_BookList_internal_2 --> -12($fp)
   # local_car_at_BookList_internal_0 = local_car_at_BookList_internal_2
   lw $t8, -12($fp)
   sw $t8, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_car_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_car_at_BookList_internal_1 --> -8($fp)
   # local_car_at_BookList_internal_1 = VCALL local_car_at_BookList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t8, 4($s1)
   # Get pointer to type's VTABLE
   lw $t9, 0($t8)
   # Get pointer to function address
   lw $s2, 0($t9)
   # Call function. Result is on $v0
   jalr $s2
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_car_at_BookList_internal_3 --> -16($fp)
   # local_car_at_BookList_internal_3 = ALLOCATE Book
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, Book
   sw $s2, 12($v0)
   li $s2, 4
   sw $s2, 16($v0)
   move $s2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $s2, 0($v0)
   la $s2, Book_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 32
   sw $s2, 8($v0)
   move $t9, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t9 into stack
   subu $sp, $sp, 4
   sw $t9, 0($sp)
   jal __Book__attrib__title__init
   # Pop 4 bytes from stack into register t9
   lw $t9, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t9)
   # Push register t9 into stack
   subu $sp, $sp, 4
   sw $t9, 0($sp)
   jal __Book__attrib__author__init
   # Pop 4 bytes from stack into register t9
   lw $t9, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t9)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t9, -16($fp)
   # RETURN local_car_at_BookList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_car_at_BookList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cdr_at_BookList implementation.
# @Params:
function_cdr_at_BookList: 
   # Allocate stack frame for function function_cdr_at_BookList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_cdr_at_BookList_internal_2 --> -12($fp)
   # local_cdr_at_BookList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_cdr_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_cdr_at_BookList_internal_2 --> -12($fp)
   # local_cdr_at_BookList_internal_0 = local_cdr_at_BookList_internal_2
   lw $t9, -12($fp)
   sw $t9, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cdr_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_cdr_at_BookList_internal_1 --> -8($fp)
   # local_cdr_at_BookList_internal_1 = VCALL local_cdr_at_BookList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t9, 4($s1)
   # Get pointer to type's VTABLE
   lw $s2, 0($t9)
   # Get pointer to function address
   lw $s3, 0($s2)
   # Call function. Result is on $v0
   jalr $s3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cdr_at_BookList_internal_3 --> -16($fp)
   # local_cdr_at_BookList_internal_3 = ALLOCATE BookList
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $s3, String
   sw $s3, 0($v0)
   la $s3, String_start
   sw $s3, 4($v0)
   # Load type offset
   li $s3, 8
   sw $s3, 8($v0)
   la $s3, BookList
   sw $s3, 12($v0)
   li $s3, 8
   sw $s3, 16($v0)
   move $s3, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $s3, 0($v0)
   la $s3, BookList_start
   sw $s3, 4($v0)
   # Load type offset
   li $s3, 20
   sw $s3, 8($v0)
   move $s2, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $s2, -16($fp)
   # RETURN local_cdr_at_BookList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_cdr_at_BookList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_print_list_at_BookList implementation.
# @Params:
function_print_list_at_BookList: 
   # Allocate stack frame for function function_print_list_at_BookList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_print_list_at_BookList_internal_2 --> -12($fp)
   # local_print_list_at_BookList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_print_list_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_print_list_at_BookList_internal_2 --> -12($fp)
   # local_print_list_at_BookList_internal_0 = local_print_list_at_BookList_internal_2
   lw $s2, -12($fp)
   sw $s2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_BookList_internal_0 --> -4($fp)
   # LOCAL local_print_list_at_BookList_internal_1 --> -8($fp)
   # local_print_list_at_BookList_internal_1 = VCALL local_print_list_at_BookList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 0($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_list_at_BookList_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_print_list_at_BookList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_Nil implementation.
# @Params:
function_isNil_at_Nil: 
   # Allocate stack frame for function function_isNil_at_Nil.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_Nil_internal_0 --> -4($fp)
   # local_isNil_at_Nil_internal_0 = 1
   li $s2, 1
   sw $s2, -4($fp)
   # RETURN local_isNil_at_Nil_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_isNil_at_Nil.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_print_list_at_Nil implementation.
# @Params:
function_print_list_at_Nil: 
   # Allocate stack frame for function function_print_list_at_Nil.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_print_list_at_Nil_internal_0 --> -4($fp)
   # local_print_list_at_Nil_internal_0 = 1
   li $s2, 1
   sw $s2, -4($fp)
   # RETURN local_print_list_at_Nil_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_print_list_at_Nil.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Cons__attrib__xcar__init implementation.
# @Params:
__Cons__attrib__xcar__init: 
   # Allocate stack frame for function __Cons__attrib__xcar__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Cons__attrib__xcar__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Cons__attrib__xcdr__init implementation.
# @Params:
__Cons__attrib__xcdr__init: 
   # Allocate stack frame for function __Cons__attrib__xcdr__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Cons__attrib__xcdr__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_Cons implementation.
# @Params:
function_isNil_at_Cons: 
   # Allocate stack frame for function function_isNil_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_Cons_internal_0 --> -4($fp)
   # local_isNil_at_Cons_internal_0 = 0
   li $s2, 0
   sw $s2, -4($fp)
   # RETURN local_isNil_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_isNil_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_Cons implementation.
# @Params:
# 	0($fp) = param_init_at_Cons_hd_0
# 	4($fp) = param_init_at_Cons_tl_1
function_init_at_Cons: 
   # Allocate stack frame for function function_init_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_Cons_hd_0 --> 4($fp)
   lw $s2, 4($fp)
   sw $s2, 12($s1)
   # 
   # PARAM param_init_at_Cons_tl_1 --> 0($fp)
   lw $s2, 0($fp)
   sw $s2, 16($s1)
   # LOCAL local_init_at_Cons_internal_0 --> -4($fp)
   # local_init_at_Cons_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# function_car_at_Cons implementation.
# @Params:
function_car_at_Cons: 
   # Allocate stack frame for function function_car_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_car_at_Cons_internal_0 = GETATTRIBUTE xcar Cons
   # LOCAL local_car_at_Cons_internal_0 --> -4($fp)
   lw $s2, 12($s1)
   sw $s2, -4($fp)
   # RETURN local_car_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_car_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cdr_at_Cons implementation.
# @Params:
function_cdr_at_Cons: 
   # Allocate stack frame for function function_cdr_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_cdr_at_Cons_internal_0 = GETATTRIBUTE xcdr Cons
   # LOCAL local_cdr_at_Cons_internal_0 --> -4($fp)
   lw $s2, 16($s1)
   sw $s2, -4($fp)
   # RETURN local_cdr_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_cdr_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_print_list_at_Cons implementation.
# @Params:
function_print_list_at_Cons: 
   # Allocate stack frame for function function_print_list_at_Cons.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # local_print_list_at_Cons_internal_2 = GETATTRIBUTE xcar Cons
   # LOCAL local_print_list_at_Cons_internal_2 --> -12($fp)
   lw $s2, 12($s1)
   sw $s2, -12($fp)
   # LOCAL local_print_list_at_Cons_internal_0 --> -4($fp)
   # LOCAL local_print_list_at_Cons_internal_2 --> -12($fp)
   # local_print_list_at_Cons_internal_0 = local_print_list_at_Cons_internal_2
   lw $s2, -12($fp)
   sw $s2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Cons_internal_0 --> -4($fp)
   # LOCAL local_print_list_at_Cons_internal_1 --> -8($fp)
   # local_print_list_at_Cons_internal_1 = VCALL local_print_list_at_Cons_internal_0 print
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 32($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_list_at_Cons_internal_1 --> -8($fp)
   # LOCAL local_print_list_at_Cons_internal_3 --> -16($fp)
   # local_print_list_at_Cons_internal_3 = TYPEOF local_print_list_at_Cons_internal_1
   lw $s2, -8($fp)
   # Load pointer to type offset
   lw $s3, 8($s2)
   sw $s3, -16($fp)
   # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
   # local_print_list_at_Cons_internal_6 = 14
   li $s2, 14
   sw $s2, -28($fp)
   # local_print_list_at_Cons_internal_7 = TYPE_DISTANCE Book <cil.nodes.LocalNode object at 0x7f93dacd9bb0>
   # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
   # LOCAL local_print_list_at_Cons_internal_3 --> -16($fp)
   # Load TDT pointer to type Book
   la $s2, Book__TDT
   lw $s3, -16($fp)
   addu $s2, $s2, $s3
   # Save distance
   lw $s3, 0($s2)
   sw $s3, -32($fp)
   # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
   # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
   # Update min if 18 < 19
   lw $s2, -32($fp)
   lw $s3, -28($fp)
   bgtu $s2, $s3, label_Not_min0_1
   # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
   # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
   # local_print_list_at_Cons_internal_6 = local_print_list_at_Cons_internal_7
   lw $s2, -32($fp)
   sw $s2, -28($fp)
   label_Not_min0_1: 
      # local_print_list_at_Cons_internal_7 = TYPE_DISTANCE Article <cil.nodes.LocalNode object at 0x7f93dacd9bb0>
      # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
      # LOCAL local_print_list_at_Cons_internal_3 --> -16($fp)
      # Load TDT pointer to type Article
      la $s2, Article__TDT
      lw $s3, -16($fp)
      addu $s2, $s2, $s3
      # Save distance
      lw $s3, 0($s2)
      sw $s3, -32($fp)
      # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
      # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
      # Update min if 18 < 19
      lw $s2, -32($fp)
      lw $s3, -28($fp)
      bgtu $s2, $s3, label_Not_min1_2
      # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
      # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
      # local_print_list_at_Cons_internal_6 = local_print_list_at_Cons_internal_7
      lw $s2, -32($fp)
      sw $s2, -28($fp)
      label_Not_min1_2: 
         # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
         # local_print_list_at_Cons_internal_7 = 14
         li $s2, 14
         sw $s2, -32($fp)
         # LOCAL local_print_list_at_Cons_internal_4 --> -20($fp)
         # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
         # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
         # local_print_list_at_Cons_internal_4 = local_print_list_at_Cons_internal_7 - local_print_list_at_Cons_internal_6
         lw $s2, -32($fp)
         lw $s3, -28($fp)
         sub $s2, $s2, $s3
         sw $s2, -20($fp)
         # IF_ZERO local_print_list_at_Cons_internal_4 GOTO label_ERROR_3
         # IF_ZERO local_print_list_at_Cons_internal_4 GOTO label_ERROR_3
         lw $s2, -20($fp)
         beq $s2, 0, label_ERROR_3
         # local_print_list_at_Cons_internal_7 = TYPE_DISTANCE Book <cil.nodes.LocalNode object at 0x7f93dacd9bb0>
         # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
         # LOCAL local_print_list_at_Cons_internal_3 --> -16($fp)
         # Load TDT pointer to type Book
         la $s2, Book__TDT
         lw $s3, -16($fp)
         addu $s2, $s2, $s3
         # Save distance
         lw $s3, 0($s2)
         sw $s3, -32($fp)
         # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
         # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
         # Update min if 18 < 19
         lw $s2, -32($fp)
         lw $s3, -28($fp)
         bgtu $s2, $s3, label_NEXT0_5
         # LOCAL local_print_list_at_Cons_dummy_8 --> -36($fp)
         # LOCAL local_print_list_at_Cons_internal_1 --> -8($fp)
         # local_print_list_at_Cons_dummy_8 = local_print_list_at_Cons_internal_1
         lw $s2, -8($fp)
         sw $s2, -36($fp)
         # LOCAL local_print_list_at_Cons_internal_11 --> -48($fp)
         # local_print_list_at_Cons_internal_11 = SELF
         sw $s1, -48($fp)
         # LOCAL local_print_list_at_Cons_internal_9 --> -40($fp)
         # LOCAL local_print_list_at_Cons_internal_11 --> -48($fp)
         # local_print_list_at_Cons_internal_9 = local_print_list_at_Cons_internal_11
         lw $s2, -48($fp)
         sw $s2, -40($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_print_list_at_Cons_internal_12 --> -52($fp)
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $s2, String
         sw $s2, 0($v0)
         la $s2, String_start
         sw $s2, 4($v0)
         # Load type offset
         li $s2, 8
         sw $s2, 8($v0)
         la $s2, data_9
         sw $s2, 12($v0)
         li $s2, 26
         sw $s2, 16($v0)
         sw $v0, -52($fp)
         # ARG local_print_list_at_Cons_internal_12
         # LOCAL local_print_list_at_Cons_internal_12 --> -52($fp)
         lw $s2, -52($fp)
         # Push arg into stack
         subu $sp, $sp, 4
         sw $s2, 0($sp)
         # LOCAL local_print_list_at_Cons_internal_9 --> -40($fp)
         # LOCAL local_print_list_at_Cons_internal_10 --> -44($fp)
         # local_print_list_at_Cons_internal_10 = VCALL local_print_list_at_Cons_internal_9 out_string
         # Save new self pointer in $s1
         lw $s1, -40($fp)
         # Get pointer to type
         lw $s2, 4($s1)
         # Get pointer to type's VTABLE
         lw $s3, 0($s2)
         # Get pointer to function address
         lw $s4, 12($s3)
         # Call function. Result is on $v0
         jalr $s4
         sw $v0, -44($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # LOCAL local_print_list_at_Cons_internal_5 --> -24($fp)
         # LOCAL local_print_list_at_Cons_internal_10 --> -44($fp)
         # local_print_list_at_Cons_internal_5 = local_print_list_at_Cons_internal_10
         lw $s2, -44($fp)
         sw $s2, -24($fp)
         # GOTO label_END_4
j label_END_4
label_NEXT0_5: 
   # local_print_list_at_Cons_internal_7 = TYPE_DISTANCE Article <cil.nodes.LocalNode object at 0x7f93dacd9bb0>
   # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
   # LOCAL local_print_list_at_Cons_internal_3 --> -16($fp)
   # Load TDT pointer to type Article
   la $s2, Article__TDT
   lw $s3, -16($fp)
   addu $s2, $s2, $s3
   # Save distance
   lw $s3, 0($s2)
   sw $s3, -32($fp)
   # LOCAL local_print_list_at_Cons_internal_7 --> -32($fp)
   # LOCAL local_print_list_at_Cons_internal_6 --> -28($fp)
   # Update min if 18 < 19
   lw $s2, -32($fp)
   lw $s3, -28($fp)
   bgtu $s2, $s3, label_NEXT1_6
   # LOCAL local_print_list_at_Cons_dummy_13 --> -56($fp)
   # LOCAL local_print_list_at_Cons_internal_1 --> -8($fp)
   # local_print_list_at_Cons_dummy_13 = local_print_list_at_Cons_internal_1
   lw $s2, -8($fp)
   sw $s2, -56($fp)
   # LOCAL local_print_list_at_Cons_internal_16 --> -68($fp)
   # local_print_list_at_Cons_internal_16 = SELF
   sw $s1, -68($fp)
   # LOCAL local_print_list_at_Cons_internal_14 --> -60($fp)
   # LOCAL local_print_list_at_Cons_internal_16 --> -68($fp)
   # local_print_list_at_Cons_internal_14 = local_print_list_at_Cons_internal_16
   lw $s2, -68($fp)
   sw $s2, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Cons_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_10
   sw $s2, 12($v0)
   li $s2, 29
   sw $s2, 16($v0)
   sw $v0, -72($fp)
   # ARG local_print_list_at_Cons_internal_17
   # LOCAL local_print_list_at_Cons_internal_17 --> -72($fp)
   lw $s2, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_list_at_Cons_internal_14 --> -60($fp)
   # LOCAL local_print_list_at_Cons_internal_15 --> -64($fp)
   # local_print_list_at_Cons_internal_15 = VCALL local_print_list_at_Cons_internal_14 out_string
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_list_at_Cons_internal_5 --> -24($fp)
   # LOCAL local_print_list_at_Cons_internal_15 --> -64($fp)
   # local_print_list_at_Cons_internal_5 = local_print_list_at_Cons_internal_15
   lw $s2, -64($fp)
   sw $s2, -24($fp)
   # GOTO label_END_4
j label_END_4
label_NEXT1_6: 
   label_ERROR_3: 
      # LOCAL local_print_list_at_Cons_internal_1 --> -8($fp)
      lw $s2, 0($s1)
      sw $s2, -8($fp)
      # LOCAL local_print_list_at_Cons_internal_1 --> -8($fp)
      la $a0, data_1
      li $v0, 4
      syscall
      lw $a0, -8($fp)
      li $v0, 4
      syscall
      la $a0, data_2
      li $v0, 4
      syscall
      li $v0, 10
      syscall
      label_END_4: 
# local_print_list_at_Cons_internal_20 = GETATTRIBUTE xcdr Cons
# LOCAL local_print_list_at_Cons_internal_20 --> -84($fp)
lw $s2, 16($s1)
sw $s2, -84($fp)
# LOCAL local_print_list_at_Cons_internal_18 --> -76($fp)
# LOCAL local_print_list_at_Cons_internal_20 --> -84($fp)
# local_print_list_at_Cons_internal_18 = local_print_list_at_Cons_internal_20
lw $s2, -84($fp)
sw $s2, -76($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_print_list_at_Cons_internal_18 --> -76($fp)
# LOCAL local_print_list_at_Cons_internal_19 --> -80($fp)
# local_print_list_at_Cons_internal_19 = VCALL local_print_list_at_Cons_internal_18 print_list
# Save new self pointer in $s1
lw $s1, -76($fp)
# Get pointer to type
lw $s2, 4($s1)
# Get pointer to type's VTABLE
lw $s3, 0($s2)
# Get pointer to function address
lw $s4, 44($s3)
# Call function. Result is on $v0
jalr $s4
sw $v0, -80($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# RETURN local_print_list_at_Cons_internal_19
lw $v0, -80($fp)
# Deallocate stack frame for function function_print_list_at_Cons.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 92
jr $ra
# Function END


# __Book__attrib__title__init implementation.
# @Params:
__Book__attrib__title__init: 
   # Allocate stack frame for function __Book__attrib__title__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__title__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_0
   sw $s2, 12($v0)
   li $s2, 0
   sw $s2, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_ttrib__title__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Book__attrib__title__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Book__attrib__author__init implementation.
# @Params:
__Book__attrib__author__init: 
   # Allocate stack frame for function __Book__attrib__author__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__author__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_0
   sw $s2, 12($v0)
   li $s2, 0
   sw $s2, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_ttrib__author__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Book__attrib__author__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_initBook_at_Book implementation.
# @Params:
# 	0($fp) = param_initBook_at_Book_title_p_0
# 	4($fp) = param_initBook_at_Book_author_p_1
function_initBook_at_Book: 
   # Allocate stack frame for function function_initBook_at_Book.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_initBook_at_Book_title_p_0 --> 4($fp)
   lw $s2, 4($fp)
   sw $s2, 12($s1)
   # 
   # PARAM param_initBook_at_Book_author_p_1 --> 0($fp)
   lw $s2, 0($fp)
   sw $s2, 16($s1)
   # LOCAL local_initBook_at_Book_internal_0 --> -4($fp)
   # local_initBook_at_Book_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_initBook_at_Book_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_initBook_at_Book.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# function_print_at_Book implementation.
# @Params:
function_print_at_Book: 
   # Allocate stack frame for function function_print_at_Book.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # LOCAL local_print_at_Book_internal_6 --> -28($fp)
   # local_print_at_Book_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_print_at_Book_internal_4 --> -20($fp)
   # LOCAL local_print_at_Book_internal_6 --> -28($fp)
   # local_print_at_Book_internal_4 = local_print_at_Book_internal_6
   lw $s2, -28($fp)
   sw $s2, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Book_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_11
   sw $s2, 12($v0)
   li $s2, 12
   sw $s2, 16($v0)
   sw $v0, -32($fp)
   # ARG local_print_at_Book_internal_7
   # LOCAL local_print_at_Book_internal_7 --> -32($fp)
   lw $s2, -32($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Book_internal_4 --> -20($fp)
   # LOCAL local_print_at_Book_internal_5 --> -24($fp)
   # local_print_at_Book_internal_5 = VCALL local_print_at_Book_internal_4 out_string
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Book_internal_2 --> -12($fp)
   # LOCAL local_print_at_Book_internal_5 --> -24($fp)
   # local_print_at_Book_internal_2 = local_print_at_Book_internal_5
   lw $s2, -24($fp)
   sw $s2, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Book_internal_8 = GETATTRIBUTE title Book
   # LOCAL local_print_at_Book_internal_8 --> -36($fp)
   lw $s2, 12($s1)
   sw $s2, -36($fp)
   # ARG local_print_at_Book_internal_8
   # LOCAL local_print_at_Book_internal_8 --> -36($fp)
   lw $s2, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Book_internal_2 --> -12($fp)
   # LOCAL local_print_at_Book_internal_3 --> -16($fp)
   # local_print_at_Book_internal_3 = VCALL local_print_at_Book_internal_2 out_string
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Book_internal_0 --> -4($fp)
   # LOCAL local_print_at_Book_internal_3 --> -16($fp)
   # local_print_at_Book_internal_0 = local_print_at_Book_internal_3
   lw $s2, -16($fp)
   sw $s2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Book_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_12
   sw $s2, 12($v0)
   li $s2, 1
   sw $s2, 16($v0)
   sw $v0, -40($fp)
   # ARG local_print_at_Book_internal_9
   # LOCAL local_print_at_Book_internal_9 --> -40($fp)
   lw $s2, -40($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Book_internal_0 --> -4($fp)
   # LOCAL local_print_at_Book_internal_1 --> -8($fp)
   # local_print_at_Book_internal_1 = VCALL local_print_at_Book_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Book_internal_16 --> -68($fp)
   # local_print_at_Book_internal_16 = SELF
   sw $s1, -68($fp)
   # LOCAL local_print_at_Book_internal_14 --> -60($fp)
   # LOCAL local_print_at_Book_internal_16 --> -68($fp)
   # local_print_at_Book_internal_14 = local_print_at_Book_internal_16
   lw $s2, -68($fp)
   sw $s2, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Book_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_13
   sw $s2, 12($v0)
   li $s2, 12
   sw $s2, 16($v0)
   sw $v0, -72($fp)
   # ARG local_print_at_Book_internal_17
   # LOCAL local_print_at_Book_internal_17 --> -72($fp)
   lw $s2, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Book_internal_14 --> -60($fp)
   # LOCAL local_print_at_Book_internal_15 --> -64($fp)
   # local_print_at_Book_internal_15 = VCALL local_print_at_Book_internal_14 out_string
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Book_internal_12 --> -52($fp)
   # LOCAL local_print_at_Book_internal_15 --> -64($fp)
   # local_print_at_Book_internal_12 = local_print_at_Book_internal_15
   lw $s2, -64($fp)
   sw $s2, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Book_internal_18 = GETATTRIBUTE author Book
   # LOCAL local_print_at_Book_internal_18 --> -76($fp)
   lw $s2, 16($s1)
   sw $s2, -76($fp)
   # ARG local_print_at_Book_internal_18
   # LOCAL local_print_at_Book_internal_18 --> -76($fp)
   lw $s2, -76($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Book_internal_12 --> -52($fp)
   # LOCAL local_print_at_Book_internal_13 --> -56($fp)
   # local_print_at_Book_internal_13 = VCALL local_print_at_Book_internal_12 out_string
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Book_internal_10 --> -44($fp)
   # LOCAL local_print_at_Book_internal_13 --> -56($fp)
   # local_print_at_Book_internal_10 = local_print_at_Book_internal_13
   lw $s2, -56($fp)
   sw $s2, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Book_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_14
   sw $s2, 12($v0)
   li $s2, 1
   sw $s2, 16($v0)
   sw $v0, -80($fp)
   # ARG local_print_at_Book_internal_19
   # LOCAL local_print_at_Book_internal_19 --> -80($fp)
   lw $s2, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Book_internal_10 --> -44($fp)
   # LOCAL local_print_at_Book_internal_11 --> -48($fp)
   # local_print_at_Book_internal_11 = VCALL local_print_at_Book_internal_10 out_string
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Book_internal_20 --> -84($fp)
   # local_print_at_Book_internal_20 = SELF
   sw $s1, -84($fp)
   # RETURN local_print_at_Book_internal_20
   lw $v0, -84($fp)
   # Deallocate stack frame for function function_print_at_Book.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 92
   jr $ra
   # Function END


# __Article__attrib__per_title__init implementation.
# @Params:
__Article__attrib__per_title__init: 
   # Allocate stack frame for function __Article__attrib__per_title__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local___attrib__per_title__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_0
   sw $s2, 12($v0)
   li $s2, 0
   sw $s2, 16($v0)
   sw $v0, -4($fp)
   # RETURN local___attrib__per_title__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Article__attrib__per_title__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_initArticle_at_Article implementation.
# @Params:
# 	0($fp) = param_initArticle_at_Article_title_p_0
# 	4($fp) = param_initArticle_at_Article_author_p_1
# 	8($fp) = param_initArticle_at_Article_per_title_p_2
function_initArticle_at_Article: 
   # Allocate stack frame for function function_initArticle_at_Article.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_initArticle_at_Article_internal_2 --> -12($fp)
   # local_initArticle_at_Article_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_initArticle_at_Article_internal_0 --> -4($fp)
   # LOCAL local_initArticle_at_Article_internal_2 --> -12($fp)
   # local_initArticle_at_Article_internal_0 = local_initArticle_at_Article_internal_2
   lw $s2, -12($fp)
   sw $s2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_initArticle_at_Article_title_p_0
   # PARAM param_initArticle_at_Article_title_p_0 --> 8($fp)
   lw $s2, 8($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # ARG param_initArticle_at_Article_author_p_1
   # PARAM param_initArticle_at_Article_author_p_1 --> 4($fp)
   lw $s2, 4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_initArticle_at_Article_internal_0 --> -4($fp)
   # LOCAL local_initArticle_at_Article_internal_1 --> -8($fp)
   # local_initArticle_at_Article_internal_1 = VCALL local_initArticle_at_Article_internal_0 initBook
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 28($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # PARAM param_initArticle_at_Article_per_title_p_2 --> 0($fp)
   lw $s2, 0($fp)
   sw $s2, 20($s1)
   # LOCAL local_initArticle_at_Article_internal_3 --> -16($fp)
   # local_initArticle_at_Article_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_initArticle_at_Article_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_initArticle_at_Article.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 12
   jr $ra
   # Function END


# function_print_at_Article implementation.
# @Params:
function_print_at_Article: 
   # Allocate stack frame for function function_print_at_Article.
   subu $sp, $sp, 60
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 60
   # LOCAL local_print_at_Article_internal_1 --> -8($fp)
   # local_print_at_Article_internal_1 = SELF
   sw $s1, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Article_internal_0 = CALL print
   # LOCAL local_print_at_Article_internal_0 --> -4($fp)
   # LOCAL local_print_at_Article_internal_1 --> -8($fp)
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type's VTABLE
   la $s2, Book_vtable
   # Get pointer to function address
   lw $s3, 32($s2)
   # Call function. Result is on $v0
   jalr $s3
   sw $v0, -4($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Article_internal_8 --> -36($fp)
   # local_print_at_Article_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_print_at_Article_internal_6 --> -28($fp)
   # LOCAL local_print_at_Article_internal_8 --> -36($fp)
   # local_print_at_Article_internal_6 = local_print_at_Article_internal_8
   lw $s2, -36($fp)
   sw $s2, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Article_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_15
   sw $s2, 12($v0)
   li $s2, 13
   sw $s2, 16($v0)
   sw $v0, -40($fp)
   # ARG local_print_at_Article_internal_9
   # LOCAL local_print_at_Article_internal_9 --> -40($fp)
   lw $s2, -40($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Article_internal_6 --> -28($fp)
   # LOCAL local_print_at_Article_internal_7 --> -32($fp)
   # local_print_at_Article_internal_7 = VCALL local_print_at_Article_internal_6 out_string
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Article_internal_4 --> -20($fp)
   # LOCAL local_print_at_Article_internal_7 --> -32($fp)
   # local_print_at_Article_internal_4 = local_print_at_Article_internal_7
   lw $s2, -32($fp)
   sw $s2, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Article_internal_10 = GETATTRIBUTE per_title Article
   # LOCAL local_print_at_Article_internal_10 --> -44($fp)
   lw $s2, 20($s1)
   sw $s2, -44($fp)
   # ARG local_print_at_Article_internal_10
   # LOCAL local_print_at_Article_internal_10 --> -44($fp)
   lw $s2, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Article_internal_4 --> -20($fp)
   # LOCAL local_print_at_Article_internal_5 --> -24($fp)
   # local_print_at_Article_internal_5 = VCALL local_print_at_Article_internal_4 out_string
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Article_internal_2 --> -12($fp)
   # LOCAL local_print_at_Article_internal_5 --> -24($fp)
   # local_print_at_Article_internal_2 = local_print_at_Article_internal_5
   lw $s2, -24($fp)
   sw $s2, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Article_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $s2, String
   sw $s2, 0($v0)
   la $s2, String_start
   sw $s2, 4($v0)
   # Load type offset
   li $s2, 8
   sw $s2, 8($v0)
   la $s2, data_16
   sw $s2, 12($v0)
   li $s2, 1
   sw $s2, 16($v0)
   sw $v0, -48($fp)
   # ARG local_print_at_Article_internal_11
   # LOCAL local_print_at_Article_internal_11 --> -48($fp)
   lw $s2, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $s2, 0($sp)
   # LOCAL local_print_at_Article_internal_2 --> -12($fp)
   # LOCAL local_print_at_Article_internal_3 --> -16($fp)
   # local_print_at_Article_internal_3 = VCALL local_print_at_Article_internal_2 out_string
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $s2, 4($s1)
   # Get pointer to type's VTABLE
   lw $s3, 0($s2)
   # Get pointer to function address
   lw $s4, 12($s3)
   # Call function. Result is on $v0
   jalr $s4
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Article_internal_12 --> -52($fp)
   # local_print_at_Article_internal_12 = SELF
   sw $s1, -52($fp)
   # RETURN local_print_at_Article_internal_12
   lw $v0, -52($fp)
   # Deallocate stack frame for function function_print_at_Article.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 60
   jr $ra
   # Function END


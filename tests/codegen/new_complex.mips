
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sun Dec  6 22:30:11 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Complex:   .asciiz    "Complex"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Complex ****
Complex_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_init_at_Complex, function_print_at_Complex, function_reflect_0_at_Complex, function_reflect_X_at_Complex, function_reflect_Y_at_Complex, function_equal_at_Complex, function_x_value_at_Complex, function_y_value_at_Complex
# Function END
# 


#  **** Type RECORD for type Complex ****
Complex_start: 
   Complex_vtable_pointer:   .word    Complex_vtable
   # Function END
Complex_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, 1, 1
Object__TDT:   .word    1, 0, 1, 1, 2, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1
Complex__TDT:   .word    -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "+"
# 


data_5:   .asciiz    "I"
# 


data_6:   .asciiz    "=)\n"
# 


data_7:   .asciiz    "=(\n"
# 


data_8:   .asciiz    "=)\n"
# 


data_9:   .asciiz    "=(\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f6aa4e9b6a0>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 20
   sw $t2, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t1, Main_vtable
   # Get pointer to function address
   lw $t2, 28($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Complex__attrib__x__init implementation.
# @Params:
__Complex__attrib__x__init: 
   # Allocate stack frame for function __Complex__attrib__x__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Complex__attrib__x__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Complex__attrib__y__init implementation.
# @Params:
__Complex__attrib__y__init: 
   # Allocate stack frame for function __Complex__attrib__y__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Complex__attrib__y__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_Complex implementation.
# @Params:
# 	0($fp) = param_init_at_Complex_a_0
# 	4($fp) = param_init_at_Complex_b_1
function_init_at_Complex: 
   # Allocate stack frame for function function_init_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_init_at_Complex_internal_1 = GETATTRIBUTE x Complex
   # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
   lw $t1, 12($s1)
   sw $t1, -8($fp)
   # LOCAL local_init_at_Complex_internal_0 --> -4($fp)
   # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
   # PARAM param_init_at_Complex_a_0 --> 4($fp)
   # local_init_at_Complex_internal_0 = local_init_at_Complex_internal_1 - PARAM param_init_at_Complex_a_0
   lw $t1, -8($fp)
   lw $t2, 4($fp)
   sub $t1, $t1, $t2
   sw $t1, -4($fp)
   # IF_ZERO local_init_at_Complex_internal_0 GOTO label_TRUE_1
   # IF_ZERO local_init_at_Complex_internal_0 GOTO label_TRUE_1
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_1
   # LOCAL local_init_at_Complex_internal_0 --> -4($fp)
   # local_init_at_Complex_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_2
j label_END_2
label_TRUE_1: 
   # LOCAL local_init_at_Complex_internal_0 --> -4($fp)
   # local_init_at_Complex_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_2: 
# local_init_at_Complex_internal_3 = GETATTRIBUTE y Complex
# LOCAL local_init_at_Complex_internal_3 --> -16($fp)
lw $t1, 16($s1)
sw $t1, -16($fp)
# LOCAL local_init_at_Complex_internal_2 --> -12($fp)
# LOCAL local_init_at_Complex_internal_3 --> -16($fp)
# PARAM param_init_at_Complex_b_1 --> 0($fp)
# local_init_at_Complex_internal_2 = local_init_at_Complex_internal_3 - PARAM param_init_at_Complex_b_1
lw $t1, -16($fp)
lw $t2, 0($fp)
sub $t1, $t1, $t2
sw $t1, -12($fp)
# IF_ZERO local_init_at_Complex_internal_2 GOTO label_TRUE_3
# IF_ZERO local_init_at_Complex_internal_2 GOTO label_TRUE_3
lw $t1, -12($fp)
beq $t1, 0, label_TRUE_3
# LOCAL local_init_at_Complex_internal_2 --> -12($fp)
# local_init_at_Complex_internal_2 = 0
li $t1, 0
sw $t1, -12($fp)
# GOTO label_END_4
j label_END_4
label_TRUE_3: 
   # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
   # local_init_at_Complex_internal_2 = 1
   li $t1, 1
   sw $t1, -12($fp)
   label_END_4: 
# LOCAL local_init_at_Complex_internal_4 --> -20($fp)
# local_init_at_Complex_internal_4 = SELF
sw $s1, -20($fp)
# RETURN local_init_at_Complex_internal_4
lw $v0, -20($fp)
# Deallocate stack frame for function function_init_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
# Deallocate function args
addu $sp, $sp, 8
jr $ra
# Function END


# function_print_at_Complex implementation.
# @Params:
function_print_at_Complex: 
   # Allocate stack frame for function function_print_at_Complex.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # local_print_at_Complex_internal_2 = GETATTRIBUTE y Complex
   # LOCAL local_print_at_Complex_internal_2 --> -12($fp)
   lw $t1, 16($s1)
   sw $t1, -12($fp)
   # LOCAL local_print_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_print_at_Complex_internal_2 --> -12($fp)
   # local_print_at_Complex_internal_1 = local_print_at_Complex_internal_2 - 0
   lw $t1, -12($fp)
   sub $t1, $t1, 0
   sw $t1, -8($fp)
   # IF_ZERO local_print_at_Complex_internal_1 GOTO label_TRUE_7
   # IF_ZERO local_print_at_Complex_internal_1 GOTO label_TRUE_7
   lw $t1, -8($fp)
   beq $t1, 0, label_TRUE_7
   # LOCAL local_print_at_Complex_internal_1 --> -8($fp)
   # local_print_at_Complex_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   # GOTO label_END_8
j label_END_8
label_TRUE_7: 
   # LOCAL local_print_at_Complex_internal_1 --> -8($fp)
   # local_print_at_Complex_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   label_END_8: 
# IF_ZERO local_print_at_Complex_internal_1 GOTO label_FALSEIF_5
# IF_ZERO local_print_at_Complex_internal_1 GOTO label_FALSEIF_5
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_5
# LOCAL local_print_at_Complex_internal_5 --> -24($fp)
# local_print_at_Complex_internal_5 = SELF
sw $s1, -24($fp)
# LOCAL local_print_at_Complex_internal_3 --> -16($fp)
# LOCAL local_print_at_Complex_internal_5 --> -24($fp)
# local_print_at_Complex_internal_3 = local_print_at_Complex_internal_5
lw $t1, -24($fp)
sw $t1, -16($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_print_at_Complex_internal_6 = GETATTRIBUTE x Complex
# LOCAL local_print_at_Complex_internal_6 --> -28($fp)
lw $t1, 12($s1)
sw $t1, -28($fp)
# ARG local_print_at_Complex_internal_6
# LOCAL local_print_at_Complex_internal_6 --> -28($fp)
lw $t1, -28($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_print_at_Complex_internal_3 --> -16($fp)
# LOCAL local_print_at_Complex_internal_4 --> -20($fp)
# local_print_at_Complex_internal_4 = VCALL local_print_at_Complex_internal_3 out_int
# Save new self pointer in $s1
lw $s1, -16($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 16($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -20($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_print_at_Complex_internal_0 --> -4($fp)
# LOCAL local_print_at_Complex_internal_4 --> -20($fp)
# local_print_at_Complex_internal_0 = local_print_at_Complex_internal_4
lw $t1, -20($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_6
j label_ENDIF_6
label_FALSEIF_5: 
   # LOCAL local_print_at_Complex_internal_15 --> -64($fp)
   # local_print_at_Complex_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_print_at_Complex_internal_13 --> -56($fp)
   # LOCAL local_print_at_Complex_internal_15 --> -64($fp)
   # local_print_at_Complex_internal_13 = local_print_at_Complex_internal_15
   lw $t1, -64($fp)
   sw $t1, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Complex_internal_16 = GETATTRIBUTE x Complex
   # LOCAL local_print_at_Complex_internal_16 --> -68($fp)
   lw $t1, 12($s1)
   sw $t1, -68($fp)
   # ARG local_print_at_Complex_internal_16
   # LOCAL local_print_at_Complex_internal_16 --> -68($fp)
   lw $t1, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_print_at_Complex_internal_13 --> -56($fp)
   # LOCAL local_print_at_Complex_internal_14 --> -60($fp)
   # local_print_at_Complex_internal_14 = VCALL local_print_at_Complex_internal_13 out_int
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 16($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_11 --> -48($fp)
   # LOCAL local_print_at_Complex_internal_14 --> -60($fp)
   # local_print_at_Complex_internal_11 = local_print_at_Complex_internal_14
   lw $t1, -60($fp)
   sw $t1, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Complex_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_4
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -72($fp)
   # ARG local_print_at_Complex_internal_17
   # LOCAL local_print_at_Complex_internal_17 --> -72($fp)
   lw $t1, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_print_at_Complex_internal_11 --> -48($fp)
   # LOCAL local_print_at_Complex_internal_12 --> -52($fp)
   # local_print_at_Complex_internal_12 = VCALL local_print_at_Complex_internal_11 out_string
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_9 --> -40($fp)
   # LOCAL local_print_at_Complex_internal_12 --> -52($fp)
   # local_print_at_Complex_internal_9 = local_print_at_Complex_internal_12
   lw $t1, -52($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Complex_internal_18 = GETATTRIBUTE y Complex
   # LOCAL local_print_at_Complex_internal_18 --> -76($fp)
   lw $t1, 16($s1)
   sw $t1, -76($fp)
   # ARG local_print_at_Complex_internal_18
   # LOCAL local_print_at_Complex_internal_18 --> -76($fp)
   lw $t1, -76($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_print_at_Complex_internal_9 --> -40($fp)
   # LOCAL local_print_at_Complex_internal_10 --> -44($fp)
   # local_print_at_Complex_internal_10 = VCALL local_print_at_Complex_internal_9 out_int
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 16($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_7 --> -32($fp)
   # LOCAL local_print_at_Complex_internal_10 --> -44($fp)
   # local_print_at_Complex_internal_7 = local_print_at_Complex_internal_10
   lw $t1, -44($fp)
   sw $t1, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Complex_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_5
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -80($fp)
   # ARG local_print_at_Complex_internal_19
   # LOCAL local_print_at_Complex_internal_19 --> -80($fp)
   lw $t1, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_print_at_Complex_internal_7 --> -32($fp)
   # LOCAL local_print_at_Complex_internal_8 --> -36($fp)
   # local_print_at_Complex_internal_8 = VCALL local_print_at_Complex_internal_7 out_string
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_0 --> -4($fp)
   # LOCAL local_print_at_Complex_internal_8 --> -36($fp)
   # local_print_at_Complex_internal_0 = local_print_at_Complex_internal_8
   lw $t1, -36($fp)
   sw $t1, -4($fp)
   label_ENDIF_6: 
# RETURN local_print_at_Complex_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_print_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 88
jr $ra
# Function END


# function_reflect_0_at_Complex implementation.
# @Params:
function_reflect_0_at_Complex: 
   # Allocate stack frame for function function_reflect_0_at_Complex.
   subu $sp, $sp, 44
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 44
   # local_reflect_0_at_Complex_internal_1 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
   lw $t1, 12($s1)
   sw $t1, -8($fp)
   # local_reflect_0_at_Complex_internal_3 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
   lw $t1, 12($s1)
   sw $t1, -16($fp)
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   not $t1, $t1
   sw $t1, -12($fp)
   # LOCAL local_reflect_0_at_Complex_internal_0 --> -4($fp)
   # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   # local_reflect_0_at_Complex_internal_0 = local_reflect_0_at_Complex_internal_1 - local_reflect_0_at_Complex_internal_2
   lw $t1, -8($fp)
   lw $t2, -12($fp)
   sub $t1, $t1, $t2
   sw $t1, -4($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_0 GOTO label_TRUE_9
   # IF_ZERO local_reflect_0_at_Complex_internal_0 GOTO label_TRUE_9
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_9
   # LOCAL local_reflect_0_at_Complex_internal_0 --> -4($fp)
   # local_reflect_0_at_Complex_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_10
j label_END_10
label_TRUE_9: 
   # LOCAL local_reflect_0_at_Complex_internal_0 --> -4($fp)
   # local_reflect_0_at_Complex_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_10: 
# local_reflect_0_at_Complex_internal_5 = GETATTRIBUTE y Complex
# LOCAL local_reflect_0_at_Complex_internal_5 --> -24($fp)
lw $t1, 16($s1)
sw $t1, -24($fp)
# local_reflect_0_at_Complex_internal_7 = GETATTRIBUTE y Complex
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
lw $t1, 16($s1)
sw $t1, -32($fp)
# LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
lw $t1, -32($fp)
not $t1, $t1
sw $t1, -28($fp)
# LOCAL local_reflect_0_at_Complex_internal_4 --> -20($fp)
# LOCAL local_reflect_0_at_Complex_internal_5 --> -24($fp)
# LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
# local_reflect_0_at_Complex_internal_4 = local_reflect_0_at_Complex_internal_5 - local_reflect_0_at_Complex_internal_6
lw $t1, -24($fp)
lw $t2, -28($fp)
sub $t1, $t1, $t2
sw $t1, -20($fp)
# IF_ZERO local_reflect_0_at_Complex_internal_4 GOTO label_TRUE_11
# IF_ZERO local_reflect_0_at_Complex_internal_4 GOTO label_TRUE_11
lw $t1, -20($fp)
beq $t1, 0, label_TRUE_11
# LOCAL local_reflect_0_at_Complex_internal_4 --> -20($fp)
# local_reflect_0_at_Complex_internal_4 = 0
li $t1, 0
sw $t1, -20($fp)
# GOTO label_END_12
j label_END_12
label_TRUE_11: 
   # LOCAL local_reflect_0_at_Complex_internal_4 --> -20($fp)
   # local_reflect_0_at_Complex_internal_4 = 1
   li $t1, 1
   sw $t1, -20($fp)
   label_END_12: 
# LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
# local_reflect_0_at_Complex_internal_8 = SELF
sw $s1, -36($fp)
# RETURN local_reflect_0_at_Complex_internal_8
lw $v0, -36($fp)
# Deallocate stack frame for function function_reflect_0_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 44
jr $ra
# Function END


# function_reflect_X_at_Complex implementation.
# @Params:
function_reflect_X_at_Complex: 
   # Allocate stack frame for function function_reflect_X_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_reflect_X_at_Complex_internal_1 = GETATTRIBUTE y Complex
   # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
   lw $t1, 16($s1)
   sw $t1, -8($fp)
   # local_reflect_X_at_Complex_internal_3 = GETATTRIBUTE y Complex
   # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
   lw $t1, 16($s1)
   sw $t1, -16($fp)
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   not $t1, $t1
   sw $t1, -12($fp)
   # LOCAL local_reflect_X_at_Complex_internal_0 --> -4($fp)
   # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   # local_reflect_X_at_Complex_internal_0 = local_reflect_X_at_Complex_internal_1 - local_reflect_X_at_Complex_internal_2
   lw $t1, -8($fp)
   lw $t2, -12($fp)
   sub $t1, $t1, $t2
   sw $t1, -4($fp)
   # IF_ZERO local_reflect_X_at_Complex_internal_0 GOTO label_TRUE_13
   # IF_ZERO local_reflect_X_at_Complex_internal_0 GOTO label_TRUE_13
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_13
   # LOCAL local_reflect_X_at_Complex_internal_0 --> -4($fp)
   # local_reflect_X_at_Complex_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_14
j label_END_14
label_TRUE_13: 
   # LOCAL local_reflect_X_at_Complex_internal_0 --> -4($fp)
   # local_reflect_X_at_Complex_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_14: 
# LOCAL local_reflect_X_at_Complex_internal_4 --> -20($fp)
# local_reflect_X_at_Complex_internal_4 = SELF
sw $s1, -20($fp)
# RETURN local_reflect_X_at_Complex_internal_4
lw $v0, -20($fp)
# Deallocate stack frame for function function_reflect_X_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
jr $ra
# Function END


# function_reflect_Y_at_Complex implementation.
# @Params:
function_reflect_Y_at_Complex: 
   # Allocate stack frame for function function_reflect_Y_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_reflect_Y_at_Complex_internal_1 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
   lw $t1, 12($s1)
   sw $t1, -8($fp)
   # local_reflect_Y_at_Complex_internal_3 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
   lw $t1, 12($s1)
   sw $t1, -16($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   not $t1, $t1
   sw $t1, -12($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_0 --> -4($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   # local_reflect_Y_at_Complex_internal_0 = local_reflect_Y_at_Complex_internal_1 - local_reflect_Y_at_Complex_internal_2
   lw $t1, -8($fp)
   lw $t2, -12($fp)
   sub $t1, $t1, $t2
   sw $t1, -4($fp)
   # IF_ZERO local_reflect_Y_at_Complex_internal_0 GOTO label_TRUE_15
   # IF_ZERO local_reflect_Y_at_Complex_internal_0 GOTO label_TRUE_15
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_15
   # LOCAL local_reflect_Y_at_Complex_internal_0 --> -4($fp)
   # local_reflect_Y_at_Complex_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_16
j label_END_16
label_TRUE_15: 
   # LOCAL local_reflect_Y_at_Complex_internal_0 --> -4($fp)
   # local_reflect_Y_at_Complex_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_16: 
# LOCAL local_reflect_Y_at_Complex_internal_4 --> -20($fp)
# local_reflect_Y_at_Complex_internal_4 = SELF
sw $s1, -20($fp)
# RETURN local_reflect_Y_at_Complex_internal_4
lw $v0, -20($fp)
# Deallocate stack frame for function function_reflect_Y_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
jr $ra
# Function END


# function_equal_at_Complex implementation.
# @Params:
# 	0($fp) = param_equal_at_Complex_d_0
function_equal_at_Complex: 
   # Allocate stack frame for function function_equal_at_Complex.
   subu $sp, $sp, 60
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 60
   # local_equal_at_Complex_internal_2 = GETATTRIBUTE x Complex
   # LOCAL local_equal_at_Complex_internal_2 --> -12($fp)
   lw $t1, 12($s1)
   sw $t1, -12($fp)
   # LOCAL local_equal_at_Complex_internal_3 --> -16($fp)
   # PARAM param_equal_at_Complex_d_0 --> 0($fp)
   # local_equal_at_Complex_internal_3 = PARAM param_equal_at_Complex_d_0
   lw $t1, 0($fp)
   sw $t1, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_equal_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_equal_at_Complex_internal_4 --> -20($fp)
   # local_equal_at_Complex_internal_4 = VCALL local_equal_at_Complex_internal_3 x_value
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 52($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_equal_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_equal_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_equal_at_Complex_internal_4 --> -20($fp)
   # local_equal_at_Complex_internal_1 = local_equal_at_Complex_internal_2 - local_equal_at_Complex_internal_4
   lw $t1, -12($fp)
   lw $t2, -20($fp)
   sub $t1, $t1, $t2
   sw $t1, -8($fp)
   # IF_ZERO local_equal_at_Complex_internal_1 GOTO label_TRUE_19
   # IF_ZERO local_equal_at_Complex_internal_1 GOTO label_TRUE_19
   lw $t1, -8($fp)
   beq $t1, 0, label_TRUE_19
   # LOCAL local_equal_at_Complex_internal_1 --> -8($fp)
   # local_equal_at_Complex_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   # GOTO label_END_20
j label_END_20
label_TRUE_19: 
   # LOCAL local_equal_at_Complex_internal_1 --> -8($fp)
   # local_equal_at_Complex_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   label_END_20: 
# IF_ZERO local_equal_at_Complex_internal_1 GOTO label_FALSEIF_17
# IF_ZERO local_equal_at_Complex_internal_1 GOTO label_FALSEIF_17
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_17
# local_equal_at_Complex_internal_7 = GETATTRIBUTE y Complex
# LOCAL local_equal_at_Complex_internal_7 --> -32($fp)
lw $t1, 16($s1)
sw $t1, -32($fp)
# LOCAL local_equal_at_Complex_internal_8 --> -36($fp)
# PARAM param_equal_at_Complex_d_0 --> 0($fp)
# local_equal_at_Complex_internal_8 = PARAM param_equal_at_Complex_d_0
lw $t1, 0($fp)
sw $t1, -36($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_equal_at_Complex_internal_8 --> -36($fp)
# LOCAL local_equal_at_Complex_internal_9 --> -40($fp)
# local_equal_at_Complex_internal_9 = VCALL local_equal_at_Complex_internal_8 y_value
# Save new self pointer in $s1
lw $s1, -36($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 56($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -40($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_equal_at_Complex_internal_6 --> -28($fp)
# LOCAL local_equal_at_Complex_internal_7 --> -32($fp)
# LOCAL local_equal_at_Complex_internal_9 --> -40($fp)
# local_equal_at_Complex_internal_6 = local_equal_at_Complex_internal_7 - local_equal_at_Complex_internal_9
lw $t1, -32($fp)
lw $t2, -40($fp)
sub $t1, $t1, $t2
sw $t1, -28($fp)
# IF_ZERO local_equal_at_Complex_internal_6 GOTO label_TRUE_23
# IF_ZERO local_equal_at_Complex_internal_6 GOTO label_TRUE_23
lw $t1, -28($fp)
beq $t1, 0, label_TRUE_23
# LOCAL local_equal_at_Complex_internal_6 --> -28($fp)
# local_equal_at_Complex_internal_6 = 0
li $t1, 0
sw $t1, -28($fp)
# GOTO label_END_24
j label_END_24
label_TRUE_23: 
   # LOCAL local_equal_at_Complex_internal_6 --> -28($fp)
   # local_equal_at_Complex_internal_6 = 1
   li $t1, 1
   sw $t1, -28($fp)
   label_END_24: 
# IF_ZERO local_equal_at_Complex_internal_6 GOTO label_FALSEIF_21
# IF_ZERO local_equal_at_Complex_internal_6 GOTO label_FALSEIF_21
lw $t1, -28($fp)
beq $t1, 0, label_FALSEIF_21
# LOCAL local_equal_at_Complex_internal_10 --> -44($fp)
# local_equal_at_Complex_internal_10 = 1
li $t1, 1
sw $t1, -44($fp)
# LOCAL local_equal_at_Complex_internal_5 --> -24($fp)
# LOCAL local_equal_at_Complex_internal_10 --> -44($fp)
# local_equal_at_Complex_internal_5 = local_equal_at_Complex_internal_10
lw $t1, -44($fp)
sw $t1, -24($fp)
# GOTO label_ENDIF_22
j label_ENDIF_22
label_FALSEIF_21: 
   # LOCAL local_equal_at_Complex_internal_11 --> -48($fp)
   # local_equal_at_Complex_internal_11 = 0
   li $t1, 0
   sw $t1, -48($fp)
   # LOCAL local_equal_at_Complex_internal_5 --> -24($fp)
   # LOCAL local_equal_at_Complex_internal_11 --> -48($fp)
   # local_equal_at_Complex_internal_5 = local_equal_at_Complex_internal_11
   lw $t1, -48($fp)
   sw $t1, -24($fp)
   label_ENDIF_22: 
# LOCAL local_equal_at_Complex_internal_0 --> -4($fp)
# LOCAL local_equal_at_Complex_internal_5 --> -24($fp)
# local_equal_at_Complex_internal_0 = local_equal_at_Complex_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_18
j label_ENDIF_18
label_FALSEIF_17: 
   # LOCAL local_equal_at_Complex_internal_12 --> -52($fp)
   # local_equal_at_Complex_internal_12 = 0
   li $t1, 0
   sw $t1, -52($fp)
   # LOCAL local_equal_at_Complex_internal_0 --> -4($fp)
   # LOCAL local_equal_at_Complex_internal_12 --> -52($fp)
   # local_equal_at_Complex_internal_0 = local_equal_at_Complex_internal_12
   lw $t1, -52($fp)
   sw $t1, -4($fp)
   label_ENDIF_18: 
# RETURN local_equal_at_Complex_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_equal_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 60
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_x_value_at_Complex implementation.
# @Params:
function_x_value_at_Complex: 
   # Allocate stack frame for function function_x_value_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_x_value_at_Complex_internal_0 = GETATTRIBUTE x Complex
   # LOCAL local_x_value_at_Complex_internal_0 --> -4($fp)
   lw $t1, 12($s1)
   sw $t1, -4($fp)
   # RETURN local_x_value_at_Complex_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_x_value_at_Complex.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_y_value_at_Complex implementation.
# @Params:
function_y_value_at_Complex: 
   # Allocate stack frame for function function_y_value_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_y_value_at_Complex_internal_0 = GETATTRIBUTE y Complex
   # LOCAL local_y_value_at_Complex_internal_0 --> -4($fp)
   lw $t1, 16($s1)
   sw $t1, -4($fp)
   # RETURN local_y_value_at_Complex_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_y_value_at_Complex.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 148
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 148
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # local_main_at_Main_c_0 = ALLOCATE Complex
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, Complex
   sw $t3, 12($v0)
   li $t3, 7
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Complex_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 16
   sw $t3, 8($v0)
   move $t2, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __Complex__attrib__x__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t2)
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __Complex__attrib__y__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t2)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t2, -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = ALLOCATE Complex
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Complex
   sw $t4, 12($v0)
   li $t4, 7
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Complex_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   move $t3, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t3 into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   jal __Complex__attrib__x__init
   # Pop 4 bytes from stack into register t3
   lw $t3, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t3)
   # Push register t3 into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   jal __Complex__attrib__y__init
   # Pop 4 bytes from stack into register t3
   lw $t3, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t3)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t3, -16($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_1 = local_main_at_Main_internal_3
   lw $t3, -16($fp)
   sw $t3, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 1
   li $t3, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # ARG 1
   li $t3, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = VCALL local_main_at_Main_internal_1 init
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 28($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_c_0 = local_main_at_Main_internal_2
   lw $t3, -12($fp)
   sw $t3, -4($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_c_0
   lw $t3, -4($fp)
   sw $t3, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 reflect_X
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 40($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # local_main_at_Main_internal_8 = local_main_at_Main_c_0
   lw $t3, -4($fp)
   sw $t3, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = VCALL local_main_at_Main_internal_8 reflect_0
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 36($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_5 = local_main_at_Main_internal_7 - local_main_at_Main_internal_9
   lw $t3, -32($fp)
   lw $t4, -40($fp)
   sub $t3, $t3, $t4
   sw $t3, -24($fp)
   # IF_ZERO local_main_at_Main_internal_5 GOTO label_TRUE_27
   # IF_ZERO local_main_at_Main_internal_5 GOTO label_TRUE_27
   lw $t3, -24($fp)
   beq $t3, 0, label_TRUE_27
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = 0
   li $t3, 0
   sw $t3, -24($fp)
   # GOTO label_END_28
j label_END_28
label_TRUE_27: 
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = 1
   li $t3, 1
   sw $t3, -24($fp)
   label_END_28: 
# IF_ZERO local_main_at_Main_internal_5 GOTO label_FALSEIF_25
# IF_ZERO local_main_at_Main_internal_5 GOTO label_FALSEIF_25
lw $t3, -24($fp)
beq $t3, 0, label_FALSEIF_25
# LOCAL local_main_at_Main_internal_12 --> -52($fp)
# local_main_at_Main_internal_12 = SELF
sw $s1, -52($fp)
# LOCAL local_main_at_Main_internal_10 --> -44($fp)
# LOCAL local_main_at_Main_internal_12 --> -52($fp)
# local_main_at_Main_internal_10 = local_main_at_Main_internal_12
lw $t3, -52($fp)
sw $t3, -44($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_13 --> -56($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t3, String
sw $t3, 0($v0)
la $t3, String_start
sw $t3, 4($v0)
# Load type offset
li $t3, 8
sw $t3, 8($v0)
la $t3, data_6
sw $t3, 12($v0)
li $t3, 3
sw $t3, 16($v0)
sw $v0, -56($fp)
# ARG local_main_at_Main_internal_13
# LOCAL local_main_at_Main_internal_13 --> -56($fp)
lw $t3, -56($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t3, 0($sp)
# LOCAL local_main_at_Main_internal_10 --> -44($fp)
# LOCAL local_main_at_Main_internal_11 --> -48($fp)
# local_main_at_Main_internal_11 = VCALL local_main_at_Main_internal_10 out_string
# Save new self pointer in $s1
lw $s1, -44($fp)
# Get pointer to type
lw $t3, 4($s1)
# Get pointer to type's VTABLE
lw $t4, 0($t3)
# Get pointer to function address
lw $t5, 12($t4)
# Call function. Result is on $v0
jalr $t5
sw $v0, -48($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_4 --> -20($fp)
# LOCAL local_main_at_Main_internal_11 --> -48($fp)
# local_main_at_Main_internal_4 = local_main_at_Main_internal_11
lw $t3, -48($fp)
sw $t3, -20($fp)
# GOTO label_ENDIF_26
j label_ENDIF_26
label_FALSEIF_25: 
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # local_main_at_Main_internal_16 = SELF
   sw $s1, -68($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # local_main_at_Main_internal_14 = local_main_at_Main_internal_16
   lw $t3, -68($fp)
   sw $t3, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, data_7
   sw $t3, 12($v0)
   li $t3, 3
   sw $t3, 16($v0)
   sw $v0, -72($fp)
   # ARG local_main_at_Main_internal_17
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   lw $t3, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_15 = VCALL local_main_at_Main_internal_14 out_string
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_4 = local_main_at_Main_internal_15
   lw $t3, -64($fp)
   sw $t3, -20($fp)
   label_ENDIF_26: 
# LOCAL local_main_at_Main_internal_23 --> -96($fp)
# LOCAL local_main_at_Main_c_0 --> -4($fp)
# local_main_at_Main_internal_23 = local_main_at_Main_c_0
lw $t3, -4($fp)
sw $t3, -96($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_23 --> -96($fp)
# LOCAL local_main_at_Main_internal_24 --> -100($fp)
# local_main_at_Main_internal_24 = VCALL local_main_at_Main_internal_23 reflect_X
# Save new self pointer in $s1
lw $s1, -96($fp)
# Get pointer to type
lw $t3, 4($s1)
# Get pointer to type's VTABLE
lw $t4, 0($t3)
# Get pointer to function address
lw $t5, 40($t4)
# Call function. Result is on $v0
jalr $t5
sw $v0, -100($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_21 --> -88($fp)
# LOCAL local_main_at_Main_internal_24 --> -100($fp)
# local_main_at_Main_internal_21 = local_main_at_Main_internal_24
lw $t3, -100($fp)
sw $t3, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_21 --> -88($fp)
# LOCAL local_main_at_Main_internal_22 --> -92($fp)
# local_main_at_Main_internal_22 = VCALL local_main_at_Main_internal_21 reflect_Y
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t3, 4($s1)
# Get pointer to type's VTABLE
lw $t4, 0($t3)
# Get pointer to function address
lw $t5, 44($t4)
# Call function. Result is on $v0
jalr $t5
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_19 --> -80($fp)
# LOCAL local_main_at_Main_internal_22 --> -92($fp)
# local_main_at_Main_internal_19 = local_main_at_Main_internal_22
lw $t3, -92($fp)
sw $t3, -80($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_25 --> -104($fp)
# LOCAL local_main_at_Main_c_0 --> -4($fp)
# local_main_at_Main_internal_25 = local_main_at_Main_c_0
lw $t3, -4($fp)
sw $t3, -104($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_25 --> -104($fp)
# LOCAL local_main_at_Main_internal_26 --> -108($fp)
# local_main_at_Main_internal_26 = VCALL local_main_at_Main_internal_25 reflect_0
# Save new self pointer in $s1
lw $s1, -104($fp)
# Get pointer to type
lw $t3, 4($s1)
# Get pointer to type's VTABLE
lw $t4, 0($t3)
# Get pointer to function address
lw $t5, 36($t4)
# Call function. Result is on $v0
jalr $t5
sw $v0, -108($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_26
# LOCAL local_main_at_Main_internal_26 --> -108($fp)
lw $t3, -108($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t3, 0($sp)
# LOCAL local_main_at_Main_internal_19 --> -80($fp)
# LOCAL local_main_at_Main_internal_20 --> -84($fp)
# local_main_at_Main_internal_20 = VCALL local_main_at_Main_internal_19 equal
# Save new self pointer in $s1
lw $s1, -80($fp)
# Get pointer to type
lw $t3, 4($s1)
# Get pointer to type's VTABLE
lw $t4, 0($t3)
# Get pointer to function address
lw $t5, 48($t4)
# Call function. Result is on $v0
jalr $t5
sw $v0, -84($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# IF_ZERO local_main_at_Main_internal_20 GOTO label_FALSEIF_29
# IF_ZERO local_main_at_Main_internal_20 GOTO label_FALSEIF_29
lw $t3, -84($fp)
beq $t3, 0, label_FALSEIF_29
# LOCAL local_main_at_Main_internal_29 --> -120($fp)
# local_main_at_Main_internal_29 = SELF
sw $s1, -120($fp)
# LOCAL local_main_at_Main_internal_27 --> -112($fp)
# LOCAL local_main_at_Main_internal_29 --> -120($fp)
# local_main_at_Main_internal_27 = local_main_at_Main_internal_29
lw $t3, -120($fp)
sw $t3, -112($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_30 --> -124($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t3, String
sw $t3, 0($v0)
la $t3, String_start
sw $t3, 4($v0)
# Load type offset
li $t3, 8
sw $t3, 8($v0)
la $t3, data_8
sw $t3, 12($v0)
li $t3, 3
sw $t3, 16($v0)
sw $v0, -124($fp)
# ARG local_main_at_Main_internal_30
# LOCAL local_main_at_Main_internal_30 --> -124($fp)
lw $t3, -124($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t3, 0($sp)
# LOCAL local_main_at_Main_internal_27 --> -112($fp)
# LOCAL local_main_at_Main_internal_28 --> -116($fp)
# local_main_at_Main_internal_28 = VCALL local_main_at_Main_internal_27 out_string
# Save new self pointer in $s1
lw $s1, -112($fp)
# Get pointer to type
lw $t3, 4($s1)
# Get pointer to type's VTABLE
lw $t4, 0($t3)
# Get pointer to function address
lw $t5, 12($t4)
# Call function. Result is on $v0
jalr $t5
sw $v0, -116($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_18 --> -76($fp)
# LOCAL local_main_at_Main_internal_28 --> -116($fp)
# local_main_at_Main_internal_18 = local_main_at_Main_internal_28
lw $t3, -116($fp)
sw $t3, -76($fp)
# GOTO label_ENDIF_30
j label_ENDIF_30
label_FALSEIF_29: 
   # LOCAL local_main_at_Main_internal_33 --> -136($fp)
   # local_main_at_Main_internal_33 = SELF
   sw $s1, -136($fp)
   # LOCAL local_main_at_Main_internal_31 --> -128($fp)
   # LOCAL local_main_at_Main_internal_33 --> -136($fp)
   # local_main_at_Main_internal_31 = local_main_at_Main_internal_33
   lw $t3, -136($fp)
   sw $t3, -128($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, data_9
   sw $t3, 12($v0)
   li $t3, 3
   sw $t3, 16($v0)
   sw $v0, -140($fp)
   # ARG local_main_at_Main_internal_34
   # LOCAL local_main_at_Main_internal_34 --> -140($fp)
   lw $t3, -140($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_31 --> -128($fp)
   # LOCAL local_main_at_Main_internal_32 --> -132($fp)
   # local_main_at_Main_internal_32 = VCALL local_main_at_Main_internal_31 out_string
   # Save new self pointer in $s1
   lw $s1, -128($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -132($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_18 --> -76($fp)
   # LOCAL local_main_at_Main_internal_32 --> -132($fp)
   # local_main_at_Main_internal_18 = local_main_at_Main_internal_32
   lw $t3, -132($fp)
   sw $t3, -76($fp)
   label_ENDIF_30: 
# RETURN local_main_at_Main_internal_18
lw $v0, -76($fp)
# Deallocate stack frame for function function_main_at_Main.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 148
jr $ra
# Function END


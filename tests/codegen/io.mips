
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Thu Dec  3 16:05:42 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
A:   .asciiz    "A"
# Function END
B:   .asciiz    "B"
# Function END
C:   .asciiz    "C"
# Function END
D:   .asciiz    "D"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# 


#  **** Type RECORD for type IO ****
IO_start: 
IO_vtable_pointer:   .word    IO_vtable
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# 


#  **** Type RECORD for type Object ****
Object_start: 
Object_vtable_pointer:   .word    Object_vtable
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_concat_at_String, function_substr_at_String, function_length_at_String
# 


#  **** Type RECORD for type String ****
String_start: 
String_vtable_pointer:   .word    String_vtable
String_end: 
# 


#  **** VTABLE for type A ****
A_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_a_at_A
# 


#  **** Type RECORD for type A ****
A_start: 
A_vtable_pointer:   .word    A_vtable
A_end: 
# 


#  **** VTABLE for type B ****
B_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_a_at_A, function_out_b_at_B
# 


#  **** Type RECORD for type B ****
B_start: 
B_vtable_pointer:   .word    B_vtable
B_end: 
# 


#  **** VTABLE for type C ****
C_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_c_at_C
# 


#  **** Type RECORD for type C ****
C_start: 
C_vtable_pointer:   .word    C_vtable
C_end: 
# 


#  **** VTABLE for type D ****
D_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_c_at_C, function_out_d_at_D
# 


#  **** Type RECORD for type D ****
D_start: 
D_vtable_pointer:   .word    D_vtable
D_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_main_at_Main
# 


#  **** Type RECORD for type Main ****
Main_start: 
Main_vtable_pointer:   .word    Main_vtable
Main_end: 
# 


data_0:   .asciiz    ""
# 


__Object_Object_tdt_entry__:   .word    0
__Object_Int_tdt_entry__:   .word    1
__Object_String_tdt_entry__:   .word    1
__Object_Bool_tdt_entry__:   .word    1
__Object_IO_tdt_entry__:   .word    1
__Object_A_tdt_entry__:   .word    1
__Object_B_tdt_entry__:   .word    2
__Object_C_tdt_entry__:   .word    2
__Object_D_tdt_entry__:   .word    3
__Object_Main_tdt_entry__:   .word    2
__Int_Object_tdt_entry__:   .word    -1
__Int_Int_tdt_entry__:   .word    0
__Int_String_tdt_entry__:   .word    -1
__Int_Bool_tdt_entry__:   .word    -1
__Int_IO_tdt_entry__:   .word    -1
__Int_A_tdt_entry__:   .word    -1
__Int_B_tdt_entry__:   .word    -1
__Int_C_tdt_entry__:   .word    -1
__Int_D_tdt_entry__:   .word    -1
__Int_Main_tdt_entry__:   .word    -1
__String_Object_tdt_entry__:   .word    -1
__String_Int_tdt_entry__:   .word    -1
__String_String_tdt_entry__:   .word    0
__String_Bool_tdt_entry__:   .word    -1
__String_IO_tdt_entry__:   .word    -1
__String_A_tdt_entry__:   .word    -1
__String_B_tdt_entry__:   .word    -1
__String_C_tdt_entry__:   .word    -1
__String_D_tdt_entry__:   .word    -1
__String_Main_tdt_entry__:   .word    -1
__Bool_Object_tdt_entry__:   .word    -1
__Bool_Int_tdt_entry__:   .word    -1
__Bool_String_tdt_entry__:   .word    -1
__Bool_Bool_tdt_entry__:   .word    0
__Bool_IO_tdt_entry__:   .word    -1
__Bool_A_tdt_entry__:   .word    -1
__Bool_B_tdt_entry__:   .word    -1
__Bool_C_tdt_entry__:   .word    -1
__Bool_D_tdt_entry__:   .word    -1
__Bool_Main_tdt_entry__:   .word    -1
__IO_Object_tdt_entry__:   .word    -1
__IO_Int_tdt_entry__:   .word    -1
__IO_String_tdt_entry__:   .word    -1
__IO_Bool_tdt_entry__:   .word    -1
__IO_IO_tdt_entry__:   .word    0
__IO_A_tdt_entry__:   .word    -1
__IO_B_tdt_entry__:   .word    -1
__IO_C_tdt_entry__:   .word    1
__IO_D_tdt_entry__:   .word    2
__IO_Main_tdt_entry__:   .word    1
__A_Object_tdt_entry__:   .word    -1
__A_Int_tdt_entry__:   .word    -1
__A_String_tdt_entry__:   .word    -1
__A_Bool_tdt_entry__:   .word    -1
__A_IO_tdt_entry__:   .word    -1
__A_A_tdt_entry__:   .word    0
__A_B_tdt_entry__:   .word    1
__A_C_tdt_entry__:   .word    -1
__A_D_tdt_entry__:   .word    -1
__A_Main_tdt_entry__:   .word    -1
__B_Object_tdt_entry__:   .word    -1
__B_Int_tdt_entry__:   .word    -1
__B_String_tdt_entry__:   .word    -1
__B_Bool_tdt_entry__:   .word    -1
__B_IO_tdt_entry__:   .word    -1
__B_A_tdt_entry__:   .word    -1
__B_B_tdt_entry__:   .word    0
__B_C_tdt_entry__:   .word    -1
__B_D_tdt_entry__:   .word    -1
__B_Main_tdt_entry__:   .word    -1
__C_Object_tdt_entry__:   .word    -1
__C_Int_tdt_entry__:   .word    -1
__C_String_tdt_entry__:   .word    -1
__C_Bool_tdt_entry__:   .word    -1
__C_IO_tdt_entry__:   .word    -1
__C_A_tdt_entry__:   .word    -1
__C_B_tdt_entry__:   .word    -1
__C_C_tdt_entry__:   .word    0
__C_D_tdt_entry__:   .word    1
__C_Main_tdt_entry__:   .word    -1
__D_Object_tdt_entry__:   .word    -1
__D_Int_tdt_entry__:   .word    -1
__D_String_tdt_entry__:   .word    -1
__D_Bool_tdt_entry__:   .word    -1
__D_IO_tdt_entry__:   .word    -1
__D_A_tdt_entry__:   .word    -1
__D_B_tdt_entry__:   .word    -1
__D_C_tdt_entry__:   .word    -1
__D_D_tdt_entry__:   .word    0
__D_Main_tdt_entry__:   .word    -1
__Main_Object_tdt_entry__:   .word    -1
__Main_Int_tdt_entry__:   .word    -1
__Main_String_tdt_entry__:   .word    -1
__Main_Bool_tdt_entry__:   .word    -1
__Main_IO_tdt_entry__:   .word    -1
__Main_A_tdt_entry__:   .word    -1
__Main_B_tdt_entry__:   .word    -1
__Main_C_tdt_entry__:   .word    -1
__Main_D_tdt_entry__:   .word    -1
__Main_Main_tdt_entry__:   .word    0
# 


data_2:   .asciiz    "A: Hello world\n"
# 


data_3:   .asciiz    "B: Hello world\n"
# 


data_4:   .asciiz    "C: Hello world\n"
# 


data_5:   .asciiz    "D: Hello world\n"
# 


data_6:   .asciiz    "Done.\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_in_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 8($v0)
   li $v0, 4
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_concat_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_concat_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_substr_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_substr_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t1, 8($s1)
   sw $t1, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t1, Main
   sw $t1, 0($v0)
   la $t1, Main_start
   sw $t1, 4($v0)
   move $t2, $v0
   sw $t2, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL function_main_at_Main
   # LOCAL local__internal_1 --> -8($fp)
   jal function_main_at_Main
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __A__attrib__io__init implementation.
# @Params:
__A__attrib__io__init: 
   # Allocate stack frame for function __A__attrib__io__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ib__io__init_internal_0 --> -4($fp)
   # local_ib__io__init_internal_0 = ALLOCATE IO
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t1, IO
   sw $t1, 0($v0)
   la $t1, IO_start
   sw $t1, 4($v0)
   move $t2, $v0
   sw $t2, -4($fp)
   # RETURN local_ib__io__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __A__attrib__io__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_a_at_A implementation.
# @Params:
function_out_a_at_A: 
   # Allocate stack frame for function function_out_a_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_out_a_at_A_internal_2 = GETATTRIBUTE io A
   # LOCAL local_out_a_at_A_internal_2 --> -12($fp)
   lw $t1, 8($s1)
   sw $t1, -12($fp)
   # LOCAL local_out_a_at_A_internal_0 --> -4($fp)
   # LOCAL local_out_a_at_A_internal_2 --> -12($fp)
   # local_out_a_at_A_internal_0 = local_out_a_at_A_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_out_a_at_A_internal_3 --> -16($fp)
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   la $t1, data_2
   sw $t1, 8($v0)
   li $t1, 18
   sw $t1, 12($v0)
   sw $v0, -16($fp)
   # ARG local_out_a_at_A_internal_3
   # LOCAL local_out_a_at_A_internal_3 --> -16($fp)
   lw $t2, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_out_a_at_A_internal_0 --> -4($fp)
   # LOCAL local_out_a_at_A_internal_1 --> -8($fp)
   # local_out_a_at_A_internal_1 = VCALL local_out_a_at_A_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 0($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_out_a_at_A_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_a_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_b_at_B implementation.
# @Params:
function_out_b_at_B: 
   # Allocate stack frame for function function_out_b_at_B.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_out_b_at_B_internal_2 = GETATTRIBUTE io B
   # LOCAL local_out_b_at_B_internal_2 --> -12($fp)
   lw $t2, 8($s1)
   sw $t2, -12($fp)
   # LOCAL local_out_b_at_B_internal_0 --> -4($fp)
   # LOCAL local_out_b_at_B_internal_2 --> -12($fp)
   # local_out_b_at_B_internal_0 = local_out_b_at_B_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_out_b_at_B_internal_3 --> -16($fp)
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   la $t2, data_3
   sw $t2, 8($v0)
   li $t2, 18
   sw $t2, 12($v0)
   sw $v0, -16($fp)
   # ARG local_out_b_at_B_internal_3
   # LOCAL local_out_b_at_B_internal_3 --> -16($fp)
   lw $t3, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_out_b_at_B_internal_0 --> -4($fp)
   # LOCAL local_out_b_at_B_internal_1 --> -8($fp)
   # local_out_b_at_B_internal_1 = VCALL local_out_b_at_B_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 0($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_out_b_at_B_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_b_at_B.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_c_at_C implementation.
# @Params:
function_out_c_at_C: 
   # Allocate stack frame for function function_out_c_at_C.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_out_c_at_C_internal_2 --> -12($fp)
   # local_out_c_at_C_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_out_c_at_C_internal_0 --> -4($fp)
   # LOCAL local_out_c_at_C_internal_2 --> -12($fp)
   # local_out_c_at_C_internal_0 = local_out_c_at_C_internal_2
   lw $t3, -12($fp)
   sw $t3, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_out_c_at_C_internal_3 --> -16($fp)
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   la $t3, data_4
   sw $t3, 8($v0)
   li $t3, 18
   sw $t3, 12($v0)
   sw $v0, -16($fp)
   # ARG local_out_c_at_C_internal_3
   # LOCAL local_out_c_at_C_internal_3 --> -16($fp)
   lw $t4, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   # LOCAL local_out_c_at_C_internal_0 --> -4($fp)
   # LOCAL local_out_c_at_C_internal_1 --> -8($fp)
   # local_out_c_at_C_internal_1 = VCALL local_out_c_at_C_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t4, 4($s1)
   # Get pointer to type's VTABLE
   lw $t5, 0($t4)
   # Get pointer to function address
   lw $t6, 0($t5)
   # Call function. Result is on $v0
   jalr $t6
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_out_c_at_C_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_c_at_C.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_d_at_D implementation.
# @Params:
function_out_d_at_D: 
   # Allocate stack frame for function function_out_d_at_D.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_out_d_at_D_internal_2 --> -12($fp)
   # local_out_d_at_D_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_out_d_at_D_internal_0 --> -4($fp)
   # LOCAL local_out_d_at_D_internal_2 --> -12($fp)
   # local_out_d_at_D_internal_0 = local_out_d_at_D_internal_2
   lw $t4, -12($fp)
   sw $t4, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_out_d_at_D_internal_3 --> -16($fp)
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   la $t4, data_5
   sw $t4, 8($v0)
   li $t4, 18
   sw $t4, 12($v0)
   sw $v0, -16($fp)
   # ARG local_out_d_at_D_internal_3
   # LOCAL local_out_d_at_D_internal_3 --> -16($fp)
   lw $t5, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t5, 0($sp)
   # LOCAL local_out_d_at_D_internal_0 --> -4($fp)
   # LOCAL local_out_d_at_D_internal_1 --> -8($fp)
   # local_out_d_at_D_internal_1 = VCALL local_out_d_at_D_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t5, 4($s1)
   # Get pointer to type's VTABLE
   lw $t6, 0($t5)
   # Get pointer to function address
   lw $t7, 0($t6)
   # Call function. Result is on $v0
   jalr $t7
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_out_d_at_D_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_d_at_D.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 72
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 72
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = ALLOCATE A
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   la $t5, A
   sw $t5, 0($v0)
   la $t5, A_start
   sw $t5, 4($v0)
   move $t6, $v0
   # Push register t6 into stack
   subu $sp, $sp, 4
   sw $t6, 0($sp)
   jal __A__attrib__io__init
   # Pop 4 bytes from stack into register t6
   lw $t6, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 8($t6)
   sw $t6, -12($fp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_0 = local_main_at_Main_internal_2
   lw $t5, -12($fp)
   sw $t5, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 out_a
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t5, 4($s1)
   # Get pointer to type's VTABLE
   lw $t6, 0($t5)
   # Get pointer to function address
   lw $t7, 12($t6)
   # Call function. Result is on $v0
   jalr $t7
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = ALLOCATE B
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   la $t5, B
   sw $t5, 0($v0)
   la $t5, B_start
   sw $t5, 4($v0)
   move $t6, $v0
   # Push register t6 into stack
   subu $sp, $sp, 4
   sw $t6, 0($sp)
   jal __A__attrib__io__init
   # Pop 4 bytes from stack into register t6
   lw $t6, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 8($t6)
   sw $t6, -24($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_3 = local_main_at_Main_internal_5
   lw $t5, -24($fp)
   sw $t5, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_4 = VCALL local_main_at_Main_internal_3 out_b
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t5, 4($s1)
   # Get pointer to type's VTABLE
   lw $t6, 0($t5)
   # Get pointer to function address
   lw $t7, 16($t6)
   # Call function. Result is on $v0
   jalr $t7
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = ALLOCATE C
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t5, C
   sw $t5, 0($v0)
   la $t5, C_start
   sw $t5, 4($v0)
   move $t6, $v0
   sw $t6, -36($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_internal_8
   lw $t5, -36($fp)
   sw $t5, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 out_c
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t5, 4($s1)
   # Get pointer to type's VTABLE
   lw $t6, 0($t5)
   # Get pointer to function address
   lw $t7, 28($t6)
   # Call function. Result is on $v0
   jalr $t7
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = ALLOCATE D
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t5, D
   sw $t5, 0($v0)
   la $t5, D_start
   sw $t5, 4($v0)
   move $t6, $v0
   sw $t6, -48($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_9 = local_main_at_Main_internal_11
   lw $t5, -48($fp)
   sw $t5, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_10 = VCALL local_main_at_Main_internal_9 out_d
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t5, 4($s1)
   # Get pointer to type's VTABLE
   lw $t6, 0($t5)
   # Get pointer to function address
   lw $t7, 32($t6)
   # Call function. Result is on $v0
   jalr $t7
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_12 = local_main_at_Main_internal_14
   lw $t5, -60($fp)
   sw $t5, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   # Allocating string
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   la $t5, data_6
   sw $t5, 8($v0)
   li $t5, 9
   sw $t5, 12($v0)
   sw $v0, -64($fp)
   # ARG local_main_at_Main_internal_15
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   lw $t6, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t6, 0($sp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # local_main_at_Main_internal_13 = VCALL local_main_at_Main_internal_12 out_string
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t6, 4($s1)
   # Get pointer to type's VTABLE
   lw $t7, 0($t6)
   # Get pointer to function address
   lw $t8, 0($t7)
   # Call function. Result is on $v0
   jalr $t8
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_13
   lw $v0, -56($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 72
   jr $ra
   # Function END



# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sun Nov 29 21:47:39 2020
# School of Math and Computer Science, University of Havana
# 

.data
A: 
   B: 
      C: 
         D: 
            Main: 
               # 


               #  **** VTABLE for type A ****
               A_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_a_at_A
               # 


               #  **** Type RECORD for type A ****
               A_start: 
                  A_vtable_pointer:   .word    A_vtable
                  A_attrib_io:   .word    0
                  A_end: 
                  # 


                  #  **** VTABLE for type B ****
                  B_vtable:   .word    function_out_a_at_A, function_out_b_at_B
                  # 


                  #  **** Type RECORD for type B ****
                  B_start: 
                     B_vtable_pointer:   .word    B_vtable
                     B_attrib_io:   .word    0
                     B_attrib_io:   .word    0
                     B_end: 
                     # 


                     #  **** VTABLE for type C ****
                     C_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_c_at_C
                     # 


                     #  **** Type RECORD for type C ****
                     C_start: 
                        C_vtable_pointer:   .word    C_vtable
                        C_end: 
                        # 


                        #  **** VTABLE for type D ****
                        D_vtable:   .word    function_out_c_at_C, function_out_d_at_D
                        # 


                        #  **** Type RECORD for type D ****
                        D_start: 
                           D_vtable_pointer:   .word    D_vtable
                           D_end: 
                           # 


                           #  **** VTABLE for type Main ****
                           Main_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_main_at_Main
                           # 


                           #  **** Type RECORD for type Main ****
                           Main_start: 
                              Main_vtable_pointer:   .word    Main_vtable
                              Main_end: 
                              # 


                              data_0:   .asciiz    ""
                              # 


                              __Object_Object_tdt_entry__:   .word    0
                              __Object_Int_tdt_entry__:   .word    1
                              __Object_String_tdt_entry__:   .word    1
                              __Object_Bool_tdt_entry__:   .word    1
                              __Object_IO_tdt_entry__:   .word    1
                              __Object_A_tdt_entry__:   .word    1
                              __Object_B_tdt_entry__:   .word    2
                              __Object_C_tdt_entry__:   .word    2
                              __Object_D_tdt_entry__:   .word    3
                              __Object_Main_tdt_entry__:   .word    2
                              __Int_Object_tdt_entry__:   .word    -1
                              __Int_Int_tdt_entry__:   .word    0
                              __Int_String_tdt_entry__:   .word    -1
                              __Int_Bool_tdt_entry__:   .word    -1
                              __Int_IO_tdt_entry__:   .word    -1
                              __Int_A_tdt_entry__:   .word    -1
                              __Int_B_tdt_entry__:   .word    -1
                              __Int_C_tdt_entry__:   .word    -1
                              __Int_D_tdt_entry__:   .word    -1
                              __Int_Main_tdt_entry__:   .word    -1
                              __String_Object_tdt_entry__:   .word    -1
                              __String_Int_tdt_entry__:   .word    -1
                              __String_String_tdt_entry__:   .word    0
                              __String_Bool_tdt_entry__:   .word    -1
                              __String_IO_tdt_entry__:   .word    -1
                              __String_A_tdt_entry__:   .word    -1
                              __String_B_tdt_entry__:   .word    -1
                              __String_C_tdt_entry__:   .word    -1
                              __String_D_tdt_entry__:   .word    -1
                              __String_Main_tdt_entry__:   .word    -1
                              __Bool_Object_tdt_entry__:   .word    -1
                              __Bool_Int_tdt_entry__:   .word    -1
                              __Bool_String_tdt_entry__:   .word    -1
                              __Bool_Bool_tdt_entry__:   .word    0
                              __Bool_IO_tdt_entry__:   .word    -1
                              __Bool_A_tdt_entry__:   .word    -1
                              __Bool_B_tdt_entry__:   .word    -1
                              __Bool_C_tdt_entry__:   .word    -1
                              __Bool_D_tdt_entry__:   .word    -1
                              __Bool_Main_tdt_entry__:   .word    -1
                              __IO_Object_tdt_entry__:   .word    -1
                              __IO_Int_tdt_entry__:   .word    -1
                              __IO_String_tdt_entry__:   .word    -1
                              __IO_Bool_tdt_entry__:   .word    -1
                              __IO_IO_tdt_entry__:   .word    0
                              __IO_A_tdt_entry__:   .word    -1
                              __IO_B_tdt_entry__:   .word    -1
                              __IO_C_tdt_entry__:   .word    1
                              __IO_D_tdt_entry__:   .word    2
                              __IO_Main_tdt_entry__:   .word    1
                              __A_Object_tdt_entry__:   .word    -1
                              __A_Int_tdt_entry__:   .word    -1
                              __A_String_tdt_entry__:   .word    -1
                              __A_Bool_tdt_entry__:   .word    -1
                              __A_IO_tdt_entry__:   .word    -1
                              __A_A_tdt_entry__:   .word    0
                              __A_B_tdt_entry__:   .word    1
                              __A_C_tdt_entry__:   .word    -1
                              __A_D_tdt_entry__:   .word    -1
                              __A_Main_tdt_entry__:   .word    -1
                              __B_Object_tdt_entry__:   .word    -1
                              __B_Int_tdt_entry__:   .word    -1
                              __B_String_tdt_entry__:   .word    -1
                              __B_Bool_tdt_entry__:   .word    -1
                              __B_IO_tdt_entry__:   .word    -1
                              __B_A_tdt_entry__:   .word    -1
                              __B_B_tdt_entry__:   .word    0
                              __B_C_tdt_entry__:   .word    -1
                              __B_D_tdt_entry__:   .word    -1
                              __B_Main_tdt_entry__:   .word    -1
                              __C_Object_tdt_entry__:   .word    -1
                              __C_Int_tdt_entry__:   .word    -1
                              __C_String_tdt_entry__:   .word    -1
                              __C_Bool_tdt_entry__:   .word    -1
                              __C_IO_tdt_entry__:   .word    -1
                              __C_A_tdt_entry__:   .word    -1
                              __C_B_tdt_entry__:   .word    -1
                              __C_C_tdt_entry__:   .word    0
                              __C_D_tdt_entry__:   .word    1
                              __C_Main_tdt_entry__:   .word    -1
                              __D_Object_tdt_entry__:   .word    -1
                              __D_Int_tdt_entry__:   .word    -1
                              __D_String_tdt_entry__:   .word    -1
                              __D_Bool_tdt_entry__:   .word    -1
                              __D_IO_tdt_entry__:   .word    -1
                              __D_A_tdt_entry__:   .word    -1
                              __D_B_tdt_entry__:   .word    -1
                              __D_C_tdt_entry__:   .word    -1
                              __D_D_tdt_entry__:   .word    0
                              __D_Main_tdt_entry__:   .word    -1
                              __Main_Object_tdt_entry__:   .word    -1
                              __Main_Int_tdt_entry__:   .word    -1
                              __Main_String_tdt_entry__:   .word    -1
                              __Main_Bool_tdt_entry__:   .word    -1
                              __Main_IO_tdt_entry__:   .word    -1
                              __Main_A_tdt_entry__:   .word    -1
                              __Main_B_tdt_entry__:   .word    -1
                              __Main_C_tdt_entry__:   .word    -1
                              __Main_D_tdt_entry__:   .word    -1
                              __Main_Main_tdt_entry__:   .word    0
                              # 


                              data_2:   .asciiz    "A: Hello world\n"
                              # 


                              data_3:   .asciiz    "B: Hello world\n"
                              # 


                              data_4:   .asciiz    "C: Hello world\n"
                              # 


                              data_5:   .asciiz    "D: Hello world\n"
                              # 


                              data_6:   .asciiz    "Done.\n"
                              # 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_in_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $a0, 0($fp)
   li $v0, 4
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t1, Main
   sw $t1, 0($v0)
   la $t1, Main_start
   sw $t1, 4($v0)
   move $t2, $v0
   sw $t2, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL function_main_at_Main
   # LOCAL local__internal_1 --> -8($fp)
   jal function_main_at_Main
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __A__attrib__io__init implementation.
# @Params:
__A__attrib__io__init: 
   # Allocate stack frame for function __A__attrib__io__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ib__io__init_internal_0 --> -4($fp)
   # local_ib__io__init_internal_0 = ALLOCATE IO
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t1, IO
   sw $t1, 0($v0)
   la $t1, IO_start
   sw $t1, 4($v0)
   move $t2, $v0
   sw $t2, -4($fp)
   # RETURN local_ib__io__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __A__attrib__io__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_a_at_A implementation.
# @Params:
function_out_a_at_A: 
   # Allocate stack frame for function function_out_a_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_out_a_at_A_internal_2 = GETATTRIBUTE io A
   # LOCAL local_out_a_at_A_internal_2 --> -12($fp)
   lw $t1, 8($s1)
   sw $t1, -12($fp)
   # local_out_a_at_A_internal_0 = TYPEOF local_out_a_at_A_internal_2
   lw $t1, -12($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -4($fp)
   # LOCAL local_out_a_at_A_internal_3 --> -16($fp)
   # 
   la $t1, data_2
   sw $t1, -16($fp)
   # ARG local_out_a_at_A_internal_3
   # LOCAL local_out_a_at_A_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_out_a_at_A_internal_0 --> -4($fp)
   # LOCAL local_out_a_at_A_internal_1 --> -8($fp)
   # local_out_a_at_A_internal_1 = VCALL local_out_a_at_A_internal_0 out_string
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, -4($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # RETURN local_out_a_at_A_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_a_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_b_at_B implementation.
# @Params:
function_out_b_at_B: 
   # Allocate stack frame for function function_out_b_at_B.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_out_b_at_B_internal_2 = GETATTRIBUTE io B
   # LOCAL local_out_b_at_B_internal_2 --> -12($fp)
   lw $t1, 8($s1)
   sw $t1, -12($fp)
   # local_out_b_at_B_internal_0 = TYPEOF local_out_b_at_B_internal_2
   lw $t1, -12($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -4($fp)
   # LOCAL local_out_b_at_B_internal_3 --> -16($fp)
   # 
   la $t1, data_3
   sw $t1, -16($fp)
   # ARG local_out_b_at_B_internal_3
   # LOCAL local_out_b_at_B_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_out_b_at_B_internal_0 --> -4($fp)
   # LOCAL local_out_b_at_B_internal_1 --> -8($fp)
   # local_out_b_at_B_internal_1 = VCALL local_out_b_at_B_internal_0 out_string
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, -4($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # RETURN local_out_b_at_B_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_b_at_B.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_c_at_C implementation.
# @Params:
function_out_c_at_C: 
   # Allocate stack frame for function function_out_c_at_C.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_out_c_at_C_internal_2 --> -12($fp)
   # local_out_c_at_C_internal_2 = SELF
   sw $s1, -12($fp)
   # local_out_c_at_C_internal_0 = TYPEOF local_out_c_at_C_internal_2
   lw $t1, -12($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -4($fp)
   # LOCAL local_out_c_at_C_internal_3 --> -16($fp)
   # 
   la $t1, data_4
   sw $t1, -16($fp)
   # ARG local_out_c_at_C_internal_3
   # LOCAL local_out_c_at_C_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_out_c_at_C_internal_0 --> -4($fp)
   # LOCAL local_out_c_at_C_internal_1 --> -8($fp)
   # local_out_c_at_C_internal_1 = VCALL local_out_c_at_C_internal_0 out_string
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, -4($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # RETURN local_out_c_at_C_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_c_at_C.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_d_at_D implementation.
# @Params:
function_out_d_at_D: 
   # Allocate stack frame for function function_out_d_at_D.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_out_d_at_D_internal_2 --> -12($fp)
   # local_out_d_at_D_internal_2 = SELF
   sw $s1, -12($fp)
   # local_out_d_at_D_internal_0 = TYPEOF local_out_d_at_D_internal_2
   lw $t1, -12($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -4($fp)
   # LOCAL local_out_d_at_D_internal_3 --> -16($fp)
   # 
   la $t1, data_5
   sw $t1, -16($fp)
   # ARG local_out_d_at_D_internal_3
   # LOCAL local_out_d_at_D_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_out_d_at_D_internal_0 --> -4($fp)
   # LOCAL local_out_d_at_D_internal_1 --> -8($fp)
   # local_out_d_at_D_internal_1 = VCALL local_out_d_at_D_internal_0 out_string
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, -4($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # RETURN local_out_d_at_D_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_out_d_at_D.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 72
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 72
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = ALLOCATE A
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   la $t1, A
   sw $t1, 0($v0)
   la $t1, A_start
   sw $t1, 4($v0)
   move $t2, $v0
   jal __A__attrib__io__init
   sw $v0, 8($t2)
   sw $t2, -12($fp)
   # local_main_at_Main_internal_0 = TYPEOF local_main_at_Main_internal_2
   lw $t1, -12($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -4($fp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 out_a
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, -4($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = ALLOCATE B
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   la $t1, B
   sw $t1, 0($v0)
   la $t1, B_start
   sw $t1, 4($v0)
   move $t2, $v0
   jal __A__attrib__io__init
   sw $v0, 8($t2)
   sw $t2, -24($fp)
   # local_main_at_Main_internal_3 = TYPEOF local_main_at_Main_internal_5
   lw $t1, -24($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -16($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_4 = VCALL local_main_at_Main_internal_3 out_b
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t1, -16($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 4($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -20($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = ALLOCATE C
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t1, C
   sw $t1, 0($v0)
   la $t1, C_start
   sw $t1, 4($v0)
   move $t2, $v0
   sw $t2, -36($fp)
   # local_main_at_Main_internal_6 = TYPEOF local_main_at_Main_internal_8
   lw $t1, -36($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -28($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 out_c
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t1, -28($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 28($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -32($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = ALLOCATE D
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t1, D
   sw $t1, 0($v0)
   la $t1, D_start
   sw $t1, 4($v0)
   move $t2, $v0
   sw $t2, -48($fp)
   # local_main_at_Main_internal_9 = TYPEOF local_main_at_Main_internal_11
   lw $t1, -48($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -40($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_10 = VCALL local_main_at_Main_internal_9 out_d
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, -40($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 4($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = SELF
   sw $s1, -60($fp)
   # local_main_at_Main_internal_12 = TYPEOF local_main_at_Main_internal_14
   lw $t1, -60($fp)
   # Load pointer to type
   lw $t2, 4($t1)
   sw $t2, -52($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # 
   la $t1, data_6
   sw $t1, -64($fp)
   # ARG local_main_at_Main_internal_15
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   lw $t1, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # local_main_at_Main_internal_13 = VCALL local_main_at_Main_internal_12 out_string
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t1, -52($fp)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -56($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # RETURN local_main_at_Main_internal_13
   lw $v0, -56($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 72
   jr $ra
   # Function END


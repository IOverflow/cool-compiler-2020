
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sat Dec  5 17:36:48 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
A2I:   .asciiz    "A2I"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type A2I ****
A2I_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_c2i_at_A2I, function_i2c_at_A2I, function_a2i_at_A2I, function_a2i_aux_at_A2I, function_i2a_at_A2I, function_i2a_aux_at_A2I
# Function END
# 


#  **** Type RECORD for type A2I ****
A2I_start: 
   A2I_vtable_pointer:   .word    A2I_vtable
   # Function END
A2I_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


IO__TDT:   .word    0, -1, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1
A2I__TDT:   .word    -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, 0
# 


data_2:   .asciiz    "0"
# 


data_3:   .asciiz    "1"
# 


data_4:   .asciiz    "2"
# 


data_5:   .asciiz    "3"
# 


data_6:   .asciiz    "4"
# 


data_7:   .asciiz    "5"
# 


data_8:   .asciiz    "6"
# 


data_9:   .asciiz    "7"
# 


data_10:   .asciiz    "8"
# 


data_11:   .asciiz    "9"
# 


data_12:   .asciiz    "0"
# 


data_13:   .asciiz    "1"
# 


data_14:   .asciiz    "2"
# 


data_15:   .asciiz    "3"
# 


data_16:   .asciiz    "4"
# 


data_17:   .asciiz    "5"
# 


data_18:   .asciiz    "6"
# 


data_19:   .asciiz    "7"
# 


data_20:   .asciiz    "8"
# 


data_21:   .asciiz    "9"
# 


data_22:   .asciiz    ""
# 


data_23:   .asciiz    "-"
# 


data_24:   .asciiz    "+"
# 


data_25:   .asciiz    "0"
# 


data_26:   .asciiz    "-"
# 


data_27:   .asciiz    ""
# 


data_28:   .asciiz    "678987"
# 


data_29:   .asciiz    " == "
# 


data_30:   .asciiz    "\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_in_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   li $a0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f3bd977f850>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 20
   sw $t2, 8($v0)
   move $t1, $v0
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t1, Main_vtable
   # Get pointer to function address
   lw $t2, 28($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_c2i_at_A2I implementation.
# @Params:
# 	0($fp) = param_c2i_at_A2I_char_0
function_c2i_at_A2I: 
   # Allocate stack frame for function function_c2i_at_A2I.
   subu $sp, $sp, 100
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 100
   # LOCAL local_c2i_at_A2I_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_2
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -8($fp)
   # LOCAL local_c2i_at_A2I_internal_0 --> -4($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_1 --> -8($fp)
   # local_c2i_at_A2I_internal_0 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_1
   lw $t1, 0($fp)
   lw $t2, -8($fp)
   sub $t1, $t1, $t2
   sw $t1, -4($fp)
   # IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_TRUE_3
   # IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_TRUE_3
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_3
   # LOCAL local_c2i_at_A2I_internal_0 --> -4($fp)
   # local_c2i_at_A2I_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_4
j label_END_4
label_TRUE_3: 
   # LOCAL local_c2i_at_A2I_internal_0 --> -4($fp)
   # local_c2i_at_A2I_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_4: 
# IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_FALSE_1
# IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_FALSE_1
lw $t1, -4($fp)
beq $t1, 0, label_FALSE_1
# GOTO label_END_2
j label_END_2
label_FALSE_1: 
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_3
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -16($fp)
   # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # local_c2i_at_A2I_internal_2 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_3
   lw $t1, 0($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -12($fp)
   # IF_ZERO local_c2i_at_A2I_internal_2 GOTO label_TRUE_7
   # IF_ZERO local_c2i_at_A2I_internal_2 GOTO label_TRUE_7
   lw $t1, -12($fp)
   beq $t1, 0, label_TRUE_7
   # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
   # local_c2i_at_A2I_internal_2 = 0
   li $t1, 0
   sw $t1, -12($fp)
   # GOTO label_END_8
j label_END_8
label_TRUE_7: 
   # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
   # local_c2i_at_A2I_internal_2 = 1
   li $t1, 1
   sw $t1, -12($fp)
   label_END_8: 
# IF_ZERO local_c2i_at_A2I_internal_2 GOTO label_FALSE_5
# IF_ZERO local_c2i_at_A2I_internal_2 GOTO label_FALSE_5
lw $t1, -12($fp)
beq $t1, 0, label_FALSE_5
# GOTO label_END_6
j label_END_6
label_FALSE_5: 
   # LOCAL local_c2i_at_A2I_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_4
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -24($fp)
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_5 --> -24($fp)
   # local_c2i_at_A2I_internal_4 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_5
   lw $t1, 0($fp)
   lw $t2, -24($fp)
   sub $t1, $t1, $t2
   sw $t1, -20($fp)
   # IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_TRUE_11
   # IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_TRUE_11
   lw $t1, -20($fp)
   beq $t1, 0, label_TRUE_11
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # local_c2i_at_A2I_internal_4 = 0
   li $t1, 0
   sw $t1, -20($fp)
   # GOTO label_END_12
j label_END_12
label_TRUE_11: 
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # local_c2i_at_A2I_internal_4 = 1
   li $t1, 1
   sw $t1, -20($fp)
   label_END_12: 
# IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_FALSE_9
# IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_FALSE_9
lw $t1, -20($fp)
beq $t1, 0, label_FALSE_9
# GOTO label_END_10
j label_END_10
label_FALSE_9: 
   # LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_5
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -32($fp)
   # LOCAL local_c2i_at_A2I_internal_6 --> -28($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
   # local_c2i_at_A2I_internal_6 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_7
   lw $t1, 0($fp)
   lw $t2, -32($fp)
   sub $t1, $t1, $t2
   sw $t1, -28($fp)
   # IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_TRUE_15
   # IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_TRUE_15
   lw $t1, -28($fp)
   beq $t1, 0, label_TRUE_15
   # LOCAL local_c2i_at_A2I_internal_6 --> -28($fp)
   # local_c2i_at_A2I_internal_6 = 0
   li $t1, 0
   sw $t1, -28($fp)
   # GOTO label_END_16
j label_END_16
label_TRUE_15: 
   # LOCAL local_c2i_at_A2I_internal_6 --> -28($fp)
   # local_c2i_at_A2I_internal_6 = 1
   li $t1, 1
   sw $t1, -28($fp)
   label_END_16: 
# IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_FALSE_13
# IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_FALSE_13
lw $t1, -28($fp)
beq $t1, 0, label_FALSE_13
# GOTO label_END_14
j label_END_14
label_FALSE_13: 
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_6
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -40($fp)
   # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # local_c2i_at_A2I_internal_8 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_9
   lw $t1, 0($fp)
   lw $t2, -40($fp)
   sub $t1, $t1, $t2
   sw $t1, -36($fp)
   # IF_ZERO local_c2i_at_A2I_internal_8 GOTO label_TRUE_19
   # IF_ZERO local_c2i_at_A2I_internal_8 GOTO label_TRUE_19
   lw $t1, -36($fp)
   beq $t1, 0, label_TRUE_19
   # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
   # local_c2i_at_A2I_internal_8 = 0
   li $t1, 0
   sw $t1, -36($fp)
   # GOTO label_END_20
j label_END_20
label_TRUE_19: 
   # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
   # local_c2i_at_A2I_internal_8 = 1
   li $t1, 1
   sw $t1, -36($fp)
   label_END_20: 
# IF_ZERO local_c2i_at_A2I_internal_8 GOTO label_FALSE_17
# IF_ZERO local_c2i_at_A2I_internal_8 GOTO label_FALSE_17
lw $t1, -36($fp)
beq $t1, 0, label_FALSE_17
# GOTO label_END_18
j label_END_18
label_FALSE_17: 
   # LOCAL local_c2i_at_A2I_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_7
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -48($fp)
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_11 --> -48($fp)
   # local_c2i_at_A2I_internal_10 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_11
   lw $t1, 0($fp)
   lw $t2, -48($fp)
   sub $t1, $t1, $t2
   sw $t1, -44($fp)
   # IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_TRUE_23
   # IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_TRUE_23
   lw $t1, -44($fp)
   beq $t1, 0, label_TRUE_23
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # local_c2i_at_A2I_internal_10 = 0
   li $t1, 0
   sw $t1, -44($fp)
   # GOTO label_END_24
j label_END_24
label_TRUE_23: 
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # local_c2i_at_A2I_internal_10 = 1
   li $t1, 1
   sw $t1, -44($fp)
   label_END_24: 
# IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_FALSE_21
# IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_FALSE_21
lw $t1, -44($fp)
beq $t1, 0, label_FALSE_21
# GOTO label_END_22
j label_END_22
label_FALSE_21: 
   # LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_8
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -56($fp)
   # LOCAL local_c2i_at_A2I_internal_12 --> -52($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
   # local_c2i_at_A2I_internal_12 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_13
   lw $t1, 0($fp)
   lw $t2, -56($fp)
   sub $t1, $t1, $t2
   sw $t1, -52($fp)
   # IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_TRUE_27
   # IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_TRUE_27
   lw $t1, -52($fp)
   beq $t1, 0, label_TRUE_27
   # LOCAL local_c2i_at_A2I_internal_12 --> -52($fp)
   # local_c2i_at_A2I_internal_12 = 0
   li $t1, 0
   sw $t1, -52($fp)
   # GOTO label_END_28
j label_END_28
label_TRUE_27: 
   # LOCAL local_c2i_at_A2I_internal_12 --> -52($fp)
   # local_c2i_at_A2I_internal_12 = 1
   li $t1, 1
   sw $t1, -52($fp)
   label_END_28: 
# IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_FALSE_25
# IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_FALSE_25
lw $t1, -52($fp)
beq $t1, 0, label_FALSE_25
# GOTO label_END_26
j label_END_26
label_FALSE_25: 
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_9
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -64($fp)
   # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # local_c2i_at_A2I_internal_14 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_15
   lw $t1, 0($fp)
   lw $t2, -64($fp)
   sub $t1, $t1, $t2
   sw $t1, -60($fp)
   # IF_ZERO local_c2i_at_A2I_internal_14 GOTO label_TRUE_31
   # IF_ZERO local_c2i_at_A2I_internal_14 GOTO label_TRUE_31
   lw $t1, -60($fp)
   beq $t1, 0, label_TRUE_31
   # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
   # local_c2i_at_A2I_internal_14 = 0
   li $t1, 0
   sw $t1, -60($fp)
   # GOTO label_END_32
j label_END_32
label_TRUE_31: 
   # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
   # local_c2i_at_A2I_internal_14 = 1
   li $t1, 1
   sw $t1, -60($fp)
   label_END_32: 
# IF_ZERO local_c2i_at_A2I_internal_14 GOTO label_FALSE_29
# IF_ZERO local_c2i_at_A2I_internal_14 GOTO label_FALSE_29
lw $t1, -60($fp)
beq $t1, 0, label_FALSE_29
# GOTO label_END_30
j label_END_30
label_FALSE_29: 
   # LOCAL local_c2i_at_A2I_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_10
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -72($fp)
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_17 --> -72($fp)
   # local_c2i_at_A2I_internal_16 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_17
   lw $t1, 0($fp)
   lw $t2, -72($fp)
   sub $t1, $t1, $t2
   sw $t1, -68($fp)
   # IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_TRUE_35
   # IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_TRUE_35
   lw $t1, -68($fp)
   beq $t1, 0, label_TRUE_35
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # local_c2i_at_A2I_internal_16 = 0
   li $t1, 0
   sw $t1, -68($fp)
   # GOTO label_END_36
j label_END_36
label_TRUE_35: 
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # local_c2i_at_A2I_internal_16 = 1
   li $t1, 1
   sw $t1, -68($fp)
   label_END_36: 
# IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_FALSE_33
# IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_FALSE_33
lw $t1, -68($fp)
beq $t1, 0, label_FALSE_33
# GOTO label_END_34
j label_END_34
label_FALSE_33: 
   # LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_11
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -80($fp)
   # LOCAL local_c2i_at_A2I_internal_18 --> -76($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
   # local_c2i_at_A2I_internal_18 = PARAM param_c2i_at_A2I_char_0 - local_c2i_at_A2I_internal_19
   lw $t1, 0($fp)
   lw $t2, -80($fp)
   sub $t1, $t1, $t2
   sw $t1, -76($fp)
   # IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_TRUE_39
   # IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_TRUE_39
   lw $t1, -76($fp)
   beq $t1, 0, label_TRUE_39
   # LOCAL local_c2i_at_A2I_internal_18 --> -76($fp)
   # local_c2i_at_A2I_internal_18 = 0
   li $t1, 0
   sw $t1, -76($fp)
   # GOTO label_END_40
j label_END_40
label_TRUE_39: 
   # LOCAL local_c2i_at_A2I_internal_18 --> -76($fp)
   # local_c2i_at_A2I_internal_18 = 1
   li $t1, 1
   sw $t1, -76($fp)
   label_END_40: 
# IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_FALSE_37
# IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_FALSE_37
lw $t1, -76($fp)
beq $t1, 0, label_FALSE_37
# GOTO label_END_38
j label_END_38
label_FALSE_37: 
   # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
   # local_c2i_at_A2I_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
   # local_c2i_at_A2I_internal_20 = local_c2i_at_A2I_internal_22
   lw $t1, -92($fp)
   sw $t1, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # local_c2i_at_A2I_internal_21 = VCALL local_c2i_at_A2I_internal_20 abort
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_END_38: 
label_END_34: 
label_END_30: 
label_END_26: 
label_END_22: 
label_END_18: 
label_END_14: 
label_END_10: 
label_END_6: 
label_END_2: 
# RETURN
# Deallocate stack frame for function function_c2i_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 100
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_i2c_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2c_at_A2I_i_0
function_i2c_at_A2I: 
   # Allocate stack frame for function function_i2c_at_A2I.
   subu $sp, $sp, 104
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 104
   # LOCAL local_i2c_at_A2I_internal_0 --> -4($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_0 = PARAM param_i2c_at_A2I_i_0 - 0
   lw $t1, 0($fp)
   sub $t1, $t1, 0
   sw $t1, -4($fp)
   # IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_TRUE_43
   # IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_TRUE_43
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_43
   # LOCAL local_i2c_at_A2I_internal_0 --> -4($fp)
   # local_i2c_at_A2I_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_44
j label_END_44
label_TRUE_43: 
   # LOCAL local_i2c_at_A2I_internal_0 --> -4($fp)
   # local_i2c_at_A2I_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_44: 
# IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_FALSE_41
# IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_FALSE_41
lw $t1, -4($fp)
beq $t1, 0, label_FALSE_41
# LOCAL local_i2c_at_A2I_internal_1 --> -8($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_12
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -8($fp)
# GOTO label_END_42
j label_END_42
label_FALSE_41: 
   # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_2 = PARAM param_i2c_at_A2I_i_0 - 1
   lw $t1, 0($fp)
   sub $t1, $t1, 1
   sw $t1, -12($fp)
   # IF_ZERO local_i2c_at_A2I_internal_2 GOTO label_TRUE_47
   # IF_ZERO local_i2c_at_A2I_internal_2 GOTO label_TRUE_47
   lw $t1, -12($fp)
   beq $t1, 0, label_TRUE_47
   # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
   # local_i2c_at_A2I_internal_2 = 0
   li $t1, 0
   sw $t1, -12($fp)
   # GOTO label_END_48
j label_END_48
label_TRUE_47: 
   # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
   # local_i2c_at_A2I_internal_2 = 1
   li $t1, 1
   sw $t1, -12($fp)
   label_END_48: 
# IF_ZERO local_i2c_at_A2I_internal_2 GOTO label_FALSE_45
# IF_ZERO local_i2c_at_A2I_internal_2 GOTO label_FALSE_45
lw $t1, -12($fp)
beq $t1, 0, label_FALSE_45
# LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_13
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -16($fp)
# GOTO label_END_46
j label_END_46
label_FALSE_45: 
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_4 = PARAM param_i2c_at_A2I_i_0 - 2
   lw $t1, 0($fp)
   sub $t1, $t1, 2
   sw $t1, -20($fp)
   # IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_TRUE_51
   # IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_TRUE_51
   lw $t1, -20($fp)
   beq $t1, 0, label_TRUE_51
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # local_i2c_at_A2I_internal_4 = 0
   li $t1, 0
   sw $t1, -20($fp)
   # GOTO label_END_52
j label_END_52
label_TRUE_51: 
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # local_i2c_at_A2I_internal_4 = 1
   li $t1, 1
   sw $t1, -20($fp)
   label_END_52: 
# IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_FALSE_49
# IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_FALSE_49
lw $t1, -20($fp)
beq $t1, 0, label_FALSE_49
# LOCAL local_i2c_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_14
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -24($fp)
# GOTO label_END_50
j label_END_50
label_FALSE_49: 
   # LOCAL local_i2c_at_A2I_internal_6 --> -28($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_6 = PARAM param_i2c_at_A2I_i_0 - 3
   lw $t1, 0($fp)
   sub $t1, $t1, 3
   sw $t1, -28($fp)
   # IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_TRUE_55
   # IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_TRUE_55
   lw $t1, -28($fp)
   beq $t1, 0, label_TRUE_55
   # LOCAL local_i2c_at_A2I_internal_6 --> -28($fp)
   # local_i2c_at_A2I_internal_6 = 0
   li $t1, 0
   sw $t1, -28($fp)
   # GOTO label_END_56
j label_END_56
label_TRUE_55: 
   # LOCAL local_i2c_at_A2I_internal_6 --> -28($fp)
   # local_i2c_at_A2I_internal_6 = 1
   li $t1, 1
   sw $t1, -28($fp)
   label_END_56: 
# IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_FALSE_53
# IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_FALSE_53
lw $t1, -28($fp)
beq $t1, 0, label_FALSE_53
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_15
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -32($fp)
# GOTO label_END_54
j label_END_54
label_FALSE_53: 
   # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_8 = PARAM param_i2c_at_A2I_i_0 - 4
   lw $t1, 0($fp)
   sub $t1, $t1, 4
   sw $t1, -36($fp)
   # IF_ZERO local_i2c_at_A2I_internal_8 GOTO label_TRUE_59
   # IF_ZERO local_i2c_at_A2I_internal_8 GOTO label_TRUE_59
   lw $t1, -36($fp)
   beq $t1, 0, label_TRUE_59
   # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
   # local_i2c_at_A2I_internal_8 = 0
   li $t1, 0
   sw $t1, -36($fp)
   # GOTO label_END_60
j label_END_60
label_TRUE_59: 
   # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
   # local_i2c_at_A2I_internal_8 = 1
   li $t1, 1
   sw $t1, -36($fp)
   label_END_60: 
# IF_ZERO local_i2c_at_A2I_internal_8 GOTO label_FALSE_57
# IF_ZERO local_i2c_at_A2I_internal_8 GOTO label_FALSE_57
lw $t1, -36($fp)
beq $t1, 0, label_FALSE_57
# LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_16
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -40($fp)
# GOTO label_END_58
j label_END_58
label_FALSE_57: 
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_10 = PARAM param_i2c_at_A2I_i_0 - 5
   lw $t1, 0($fp)
   sub $t1, $t1, 5
   sw $t1, -44($fp)
   # IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_TRUE_63
   # IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_TRUE_63
   lw $t1, -44($fp)
   beq $t1, 0, label_TRUE_63
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # local_i2c_at_A2I_internal_10 = 0
   li $t1, 0
   sw $t1, -44($fp)
   # GOTO label_END_64
j label_END_64
label_TRUE_63: 
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # local_i2c_at_A2I_internal_10 = 1
   li $t1, 1
   sw $t1, -44($fp)
   label_END_64: 
# IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_FALSE_61
# IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_FALSE_61
lw $t1, -44($fp)
beq $t1, 0, label_FALSE_61
# LOCAL local_i2c_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_17
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -48($fp)
# GOTO label_END_62
j label_END_62
label_FALSE_61: 
   # LOCAL local_i2c_at_A2I_internal_12 --> -52($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_12 = PARAM param_i2c_at_A2I_i_0 - 6
   lw $t1, 0($fp)
   sub $t1, $t1, 6
   sw $t1, -52($fp)
   # IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_TRUE_67
   # IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_TRUE_67
   lw $t1, -52($fp)
   beq $t1, 0, label_TRUE_67
   # LOCAL local_i2c_at_A2I_internal_12 --> -52($fp)
   # local_i2c_at_A2I_internal_12 = 0
   li $t1, 0
   sw $t1, -52($fp)
   # GOTO label_END_68
j label_END_68
label_TRUE_67: 
   # LOCAL local_i2c_at_A2I_internal_12 --> -52($fp)
   # local_i2c_at_A2I_internal_12 = 1
   li $t1, 1
   sw $t1, -52($fp)
   label_END_68: 
# IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_FALSE_65
# IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_FALSE_65
lw $t1, -52($fp)
beq $t1, 0, label_FALSE_65
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_18
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -56($fp)
# GOTO label_END_66
j label_END_66
label_FALSE_65: 
   # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_14 = PARAM param_i2c_at_A2I_i_0 - 7
   lw $t1, 0($fp)
   sub $t1, $t1, 7
   sw $t1, -60($fp)
   # IF_ZERO local_i2c_at_A2I_internal_14 GOTO label_TRUE_71
   # IF_ZERO local_i2c_at_A2I_internal_14 GOTO label_TRUE_71
   lw $t1, -60($fp)
   beq $t1, 0, label_TRUE_71
   # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
   # local_i2c_at_A2I_internal_14 = 0
   li $t1, 0
   sw $t1, -60($fp)
   # GOTO label_END_72
j label_END_72
label_TRUE_71: 
   # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
   # local_i2c_at_A2I_internal_14 = 1
   li $t1, 1
   sw $t1, -60($fp)
   label_END_72: 
# IF_ZERO local_i2c_at_A2I_internal_14 GOTO label_FALSE_69
# IF_ZERO local_i2c_at_A2I_internal_14 GOTO label_FALSE_69
lw $t1, -60($fp)
beq $t1, 0, label_FALSE_69
# LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_19
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -64($fp)
# GOTO label_END_70
j label_END_70
label_FALSE_69: 
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_16 = PARAM param_i2c_at_A2I_i_0 - 8
   lw $t1, 0($fp)
   sub $t1, $t1, 8
   sw $t1, -68($fp)
   # IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_TRUE_75
   # IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_TRUE_75
   lw $t1, -68($fp)
   beq $t1, 0, label_TRUE_75
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # local_i2c_at_A2I_internal_16 = 0
   li $t1, 0
   sw $t1, -68($fp)
   # GOTO label_END_76
j label_END_76
label_TRUE_75: 
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # local_i2c_at_A2I_internal_16 = 1
   li $t1, 1
   sw $t1, -68($fp)
   label_END_76: 
# IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_FALSE_73
# IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_FALSE_73
lw $t1, -68($fp)
beq $t1, 0, label_FALSE_73
# LOCAL local_i2c_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_20
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -72($fp)
# GOTO label_END_74
j label_END_74
label_FALSE_73: 
   # LOCAL local_i2c_at_A2I_internal_18 --> -76($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # local_i2c_at_A2I_internal_18 = PARAM param_i2c_at_A2I_i_0 - 9
   lw $t1, 0($fp)
   sub $t1, $t1, 9
   sw $t1, -76($fp)
   # IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_TRUE_79
   # IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_TRUE_79
   lw $t1, -76($fp)
   beq $t1, 0, label_TRUE_79
   # LOCAL local_i2c_at_A2I_internal_18 --> -76($fp)
   # local_i2c_at_A2I_internal_18 = 0
   li $t1, 0
   sw $t1, -76($fp)
   # GOTO label_END_80
j label_END_80
label_TRUE_79: 
   # LOCAL local_i2c_at_A2I_internal_18 --> -76($fp)
   # local_i2c_at_A2I_internal_18 = 1
   li $t1, 1
   sw $t1, -76($fp)
   label_END_80: 
# IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_FALSE_77
# IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_FALSE_77
lw $t1, -76($fp)
beq $t1, 0, label_FALSE_77
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_21
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -80($fp)
# GOTO label_END_78
j label_END_78
label_FALSE_77: 
   # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
   # local_i2c_at_A2I_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
   # local_i2c_at_A2I_internal_20 = local_i2c_at_A2I_internal_22
   lw $t1, -92($fp)
   sw $t1, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # local_i2c_at_A2I_internal_21 = VCALL local_i2c_at_A2I_internal_20 abort
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2c_at_A2I_internal_23 --> -96($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_22
   sw $t1, 12($v0)
   li $t1, 0
   sw $t1, 16($v0)
   sw $v0, -96($fp)
   label_END_78: 
label_END_74: 
label_END_70: 
label_END_66: 
label_END_62: 
label_END_58: 
label_END_54: 
label_END_50: 
label_END_46: 
label_END_42: 
# RETURN
# Deallocate stack frame for function function_i2c_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 104
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_at_A2I implementation.
# @Params:
# 	0($fp) = param_a2i_at_A2I_s_0
function_a2i_at_A2I: 
   # Allocate stack frame for function function_a2i_at_A2I.
   subu $sp, $sp, 96
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 96
   # LOCAL local_a2i_at_A2I_internal_1 --> -8($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_1 = PARAM param_a2i_at_A2I_s_0
   lw $t1, 0($fp)
   sw $t1, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_1 --> -8($fp)
   # LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
   # local_a2i_at_A2I_internal_2 = VCALL local_a2i_at_A2I_internal_1 length
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 8($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_0 --> -4($fp)
   # LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
   # local_a2i_at_A2I_internal_0 = local_a2i_at_A2I_internal_2 - 0
   lw $t1, -12($fp)
   sub $t1, $t1, 0
   sw $t1, -4($fp)
   # IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_TRUE_83
   # IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_TRUE_83
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_83
   # LOCAL local_a2i_at_A2I_internal_0 --> -4($fp)
   # local_a2i_at_A2I_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_84
j label_END_84
label_TRUE_83: 
   # LOCAL local_a2i_at_A2I_internal_0 --> -4($fp)
   # local_a2i_at_A2I_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_84: 
# IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_FALSE_81
# IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_FALSE_81
lw $t1, -4($fp)
beq $t1, 0, label_FALSE_81
# GOTO label_END_82
j label_END_82
label_FALSE_81: 
   # LOCAL local_a2i_at_A2I_internal_4 --> -20($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_4 = PARAM param_a2i_at_A2I_s_0
   lw $t1, 0($fp)
   sw $t1, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 0
   li $t1, 0
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # ARG 1
   li $t1, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_4 --> -20($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # local_a2i_at_A2I_internal_5 = VCALL local_a2i_at_A2I_internal_4 substr
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 4($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_23
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -28($fp)
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
   # local_a2i_at_A2I_internal_3 = local_a2i_at_A2I_internal_5 - local_a2i_at_A2I_internal_6
   lw $t1, -24($fp)
   lw $t2, -28($fp)
   sub $t1, $t1, $t2
   sw $t1, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_87
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_87
   lw $t1, -16($fp)
   beq $t1, 0, label_TRUE_87
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # local_a2i_at_A2I_internal_3 = 0
   li $t1, 0
   sw $t1, -16($fp)
   # GOTO label_END_88
j label_END_88
label_TRUE_87: 
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # local_a2i_at_A2I_internal_3 = 1
   li $t1, 1
   sw $t1, -16($fp)
   label_END_88: 
# IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_FALSE_85
# IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_FALSE_85
lw $t1, -16($fp)
beq $t1, 0, label_FALSE_85
# GOTO label_END_86
j label_END_86
label_FALSE_85: 
   # LOCAL local_a2i_at_A2I_internal_8 --> -36($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_8 = PARAM param_a2i_at_A2I_s_0
   lw $t1, 0($fp)
   sw $t1, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 0
   li $t1, 0
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # ARG 1
   li $t1, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_8 --> -36($fp)
   # LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
   # local_a2i_at_A2I_internal_9 = VCALL local_a2i_at_A2I_internal_8 substr
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 4($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_24
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -44($fp)
   # LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
   # LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
   # local_a2i_at_A2I_internal_7 = local_a2i_at_A2I_internal_9 - local_a2i_at_A2I_internal_10
   lw $t1, -40($fp)
   lw $t2, -44($fp)
   sub $t1, $t1, $t2
   sw $t1, -32($fp)
   # IF_ZERO local_a2i_at_A2I_internal_7 GOTO label_TRUE_91
   # IF_ZERO local_a2i_at_A2I_internal_7 GOTO label_TRUE_91
   lw $t1, -32($fp)
   beq $t1, 0, label_TRUE_91
   # LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
   # local_a2i_at_A2I_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   # GOTO label_END_92
j label_END_92
label_TRUE_91: 
   # LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
   # local_a2i_at_A2I_internal_7 = 1
   li $t1, 1
   sw $t1, -32($fp)
   label_END_92: 
# IF_ZERO local_a2i_at_A2I_internal_7 GOTO label_FALSE_89
# IF_ZERO local_a2i_at_A2I_internal_7 GOTO label_FALSE_89
lw $t1, -32($fp)
beq $t1, 0, label_FALSE_89
# LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
# local_a2i_at_A2I_internal_13 = SELF
sw $s1, -56($fp)
# LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
# LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
# local_a2i_at_A2I_internal_11 = local_a2i_at_A2I_internal_13
lw $t1, -56($fp)
sw $t1, -48($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_14 --> -60($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_14 = PARAM param_a2i_at_A2I_s_0
lw $t1, 0($fp)
sw $t1, -60($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG 1
li $t1, 1
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_17 = PARAM param_a2i_at_A2I_s_0
lw $t1, 0($fp)
sw $t1, -72($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# LOCAL local_a2i_at_A2I_internal_18 --> -76($fp)
# local_a2i_at_A2I_internal_18 = VCALL local_a2i_at_A2I_internal_17 length
# Save new self pointer in $s1
lw $s1, -72($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 8($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -76($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
# LOCAL local_a2i_at_A2I_internal_18 --> -76($fp)
# local_a2i_at_A2I_internal_16 = local_a2i_at_A2I_internal_18 - 1
lw $t1, -76($fp)
sub $t1, $t1, 1
sw $t1, -68($fp)
# ARG local_a2i_at_A2I_internal_16
# LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
lw $t1, -68($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_14 --> -60($fp)
# LOCAL local_a2i_at_A2I_internal_15 --> -64($fp)
# local_a2i_at_A2I_internal_15 = VCALL local_a2i_at_A2I_internal_14 substr
# Save new self pointer in $s1
lw $s1, -60($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 4($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -64($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_A2I_internal_15
# LOCAL local_a2i_at_A2I_internal_15 --> -64($fp)
lw $t1, -64($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
# LOCAL local_a2i_at_A2I_internal_12 --> -52($fp)
# local_a2i_at_A2I_internal_12 = VCALL local_a2i_at_A2I_internal_11 a2i_aux
# Save new self pointer in $s1
lw $s1, -48($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 24($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -52($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# GOTO label_END_90
j label_END_90
label_FALSE_89: 
   # LOCAL local_a2i_at_A2I_internal_21 --> -88($fp)
   # local_a2i_at_A2I_internal_21 = SELF
   sw $s1, -88($fp)
   # LOCAL local_a2i_at_A2I_internal_19 --> -80($fp)
   # LOCAL local_a2i_at_A2I_internal_21 --> -88($fp)
   # local_a2i_at_A2I_internal_19 = local_a2i_at_A2I_internal_21
   lw $t1, -88($fp)
   sw $t1, -80($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_a2i_at_A2I_s_0
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_19 --> -80($fp)
   # LOCAL local_a2i_at_A2I_internal_20 --> -84($fp)
   # local_a2i_at_A2I_internal_20 = VCALL local_a2i_at_A2I_internal_19 a2i_aux
   # Save new self pointer in $s1
   lw $s1, -80($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 24($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -84($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_END_90: 
label_END_86: 
label_END_82: 
# RETURN
# Deallocate stack frame for function function_a2i_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 96
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_aux_at_A2I implementation.
# @Params:
# 	0($fp) = param_a2i_aux_at_A2I_s_0
function_a2i_aux_at_A2I: 
   # Allocate stack frame for function function_a2i_aux_at_A2I.
   subu $sp, $sp, 64
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 64
   # LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
   # local_a2i_aux_at_A2I_int_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_2 --> -12($fp)
   # PARAM param_a2i_aux_at_A2I_s_0 --> 0($fp)
   # local_a2i_aux_at_A2I_internal_2 = PARAM param_a2i_aux_at_A2I_s_0
   lw $t1, 0($fp)
   sw $t1, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_aux_at_A2I_internal_2 --> -12($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_3 --> -16($fp)
   # local_a2i_aux_at_A2I_internal_3 = VCALL local_a2i_aux_at_A2I_internal_2 length
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 8($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_aux_at_A2I_j_1 --> -8($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_3 --> -16($fp)
   # local_a2i_aux_at_A2I_j_1 = local_a2i_aux_at_A2I_internal_3
   lw $t1, -16($fp)
   sw $t1, -8($fp)
   # LOCAL local_a2i_aux_at_A2I_i_4 --> -20($fp)
   # local_a2i_aux_at_A2I_i_4 = 0
   li $t1, 0
   sw $t1, -20($fp)
   label_WHILE_93: 
      # LOCAL local_a2i_aux_at_A2I_internal_5 --> -24($fp)
      # LOCAL local_a2i_aux_at_A2I_i_4 --> -20($fp)
      # LOCAL local_a2i_aux_at_A2I_j_1 --> -8($fp)
      # local_a2i_aux_at_A2I_internal_5 = local_a2i_aux_at_A2I_i_4 - local_a2i_aux_at_A2I_j_1
      lw $t1, -20($fp)
      lw $t2, -8($fp)
      sub $t1, $t1, $t2
      sw $t1, -24($fp)
      # IF_GREATER_ZERO local_a2i_aux_at_A2I_internal_5 GOTO label_FALSE_95
      # IF_GREATER_ZERO local_a2i_aux_at_A2I_internal_5 GOTO label_FALSE_95
      lw $t1, -24($fp)
      bgt $t1, 0, label_FALSE_95
      # IF_ZERO local_a2i_aux_at_A2I_internal_5 GOTO label_FALSE_95
      # IF_ZERO local_a2i_aux_at_A2I_internal_5 GOTO label_FALSE_95
      lw $t1, -24($fp)
      beq $t1, 0, label_FALSE_95
      # LOCAL local_a2i_aux_at_A2I_internal_5 --> -24($fp)
      # local_a2i_aux_at_A2I_internal_5 = 1
      li $t1, 1
      sw $t1, -24($fp)
      # GOTO label_END_96
j label_END_96
label_FALSE_95: 
   # LOCAL local_a2i_aux_at_A2I_internal_5 --> -24($fp)
   # local_a2i_aux_at_A2I_internal_5 = 0
   li $t1, 0
   sw $t1, -24($fp)
   label_END_96: 
# IF_ZERO local_a2i_aux_at_A2I_internal_5 GOTO label_WHILE_END_94
# IF_ZERO local_a2i_aux_at_A2I_internal_5 GOTO label_WHILE_END_94
lw $t1, -24($fp)
beq $t1, 0, label_WHILE_END_94
# LOCAL local_a2i_aux_at_A2I_internal_7 --> -32($fp)
# LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
# local_a2i_aux_at_A2I_internal_7 = local_a2i_aux_at_A2I_int_0 * 10
lw $t1, -4($fp)
mul $t1, $t1, 10
sw $t1, -32($fp)
# LOCAL local_a2i_aux_at_A2I_internal_10 --> -44($fp)
# local_a2i_aux_at_A2I_internal_10 = SELF
sw $s1, -44($fp)
# LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
# LOCAL local_a2i_aux_at_A2I_internal_10 --> -44($fp)
# local_a2i_aux_at_A2I_internal_8 = local_a2i_aux_at_A2I_internal_10
lw $t1, -44($fp)
sw $t1, -36($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_11 --> -48($fp)
# PARAM param_a2i_aux_at_A2I_s_0 --> 0($fp)
# local_a2i_aux_at_A2I_internal_11 = PARAM param_a2i_aux_at_A2I_s_0
lw $t1, 0($fp)
sw $t1, -48($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_a2i_aux_at_A2I_i_4
# LOCAL local_a2i_aux_at_A2I_i_4 --> -20($fp)
lw $t1, -20($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# ARG 1
li $t1, 1
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_11 --> -48($fp)
# LOCAL local_a2i_aux_at_A2I_internal_12 --> -52($fp)
# local_a2i_aux_at_A2I_internal_12 = VCALL local_a2i_aux_at_A2I_internal_11 substr
# Save new self pointer in $s1
lw $s1, -48($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 4($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -52($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_aux_at_A2I_internal_12
# LOCAL local_a2i_aux_at_A2I_internal_12 --> -52($fp)
lw $t1, -52($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
# LOCAL local_a2i_aux_at_A2I_internal_9 --> -40($fp)
# local_a2i_aux_at_A2I_internal_9 = VCALL local_a2i_aux_at_A2I_internal_8 c2i
# Save new self pointer in $s1
lw $s1, -36($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 12($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -40($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_aux_at_A2I_internal_6 --> -28($fp)
# LOCAL local_a2i_aux_at_A2I_internal_7 --> -32($fp)
# LOCAL local_a2i_aux_at_A2I_internal_9 --> -40($fp)
# local_a2i_aux_at_A2I_internal_6 = local_a2i_aux_at_A2I_internal_7 + local_a2i_aux_at_A2I_internal_9
lw $t1, -32($fp)
lw $t2, -40($fp)
add $t1, $t1, $t2
sw $t1, -28($fp)
# LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_6 --> -28($fp)
# local_a2i_aux_at_A2I_int_0 = local_a2i_aux_at_A2I_internal_6
lw $t1, -28($fp)
sw $t1, -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_13 --> -56($fp)
# LOCAL local_a2i_aux_at_A2I_i_4 --> -20($fp)
# local_a2i_aux_at_A2I_internal_13 = local_a2i_aux_at_A2I_i_4 + 1
lw $t1, -20($fp)
add $t1, $t1, 1
sw $t1, -56($fp)
# LOCAL local_a2i_aux_at_A2I_i_4 --> -20($fp)
# LOCAL local_a2i_aux_at_A2I_internal_13 --> -56($fp)
# local_a2i_aux_at_A2I_i_4 = local_a2i_aux_at_A2I_internal_13
lw $t1, -56($fp)
sw $t1, -20($fp)
# GOTO label_WHILE_93
j label_WHILE_93
label_WHILE_END_94: 
   # RETURN local_a2i_aux_at_A2I_int_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_a2i_aux_at_A2I.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 64
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_i2a_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2a_at_A2I_i_0
function_i2a_at_A2I: 
   # Allocate stack frame for function function_i2a_at_A2I.
   subu $sp, $sp, 60
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 60
   # LOCAL local_i2a_at_A2I_internal_0 --> -4($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # local_i2a_at_A2I_internal_0 = PARAM param_i2a_at_A2I_i_0 - 0
   lw $t1, 0($fp)
   sub $t1, $t1, 0
   sw $t1, -4($fp)
   # IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_TRUE_99
   # IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_TRUE_99
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_99
   # LOCAL local_i2a_at_A2I_internal_0 --> -4($fp)
   # local_i2a_at_A2I_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_100
j label_END_100
label_TRUE_99: 
   # LOCAL local_i2a_at_A2I_internal_0 --> -4($fp)
   # local_i2a_at_A2I_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_100: 
# IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_FALSE_97
# IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_FALSE_97
lw $t1, -4($fp)
beq $t1, 0, label_FALSE_97
# LOCAL local_i2a_at_A2I_internal_1 --> -8($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_25
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -8($fp)
# GOTO label_END_98
j label_END_98
label_FALSE_97: 
   # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # local_i2a_at_A2I_internal_2 = 0 - PARAM param_i2a_at_A2I_i_0
   li $t1, 0
   lw $t2, 0($fp)
   sub $t1, $t1, $t2
   sw $t1, -12($fp)
   # IF_GREATER_ZERO local_i2a_at_A2I_internal_2 GOTO label_FALSE_103
   # IF_GREATER_ZERO local_i2a_at_A2I_internal_2 GOTO label_FALSE_103
   lw $t1, -12($fp)
   bgt $t1, 0, label_FALSE_103
   # IF_ZERO local_i2a_at_A2I_internal_2 GOTO label_FALSE_103
   # IF_ZERO local_i2a_at_A2I_internal_2 GOTO label_FALSE_103
   lw $t1, -12($fp)
   beq $t1, 0, label_FALSE_103
   # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
   # local_i2a_at_A2I_internal_2 = 1
   li $t1, 1
   sw $t1, -12($fp)
   # GOTO label_END_104
j label_END_104
label_FALSE_103: 
   # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
   # local_i2a_at_A2I_internal_2 = 0
   li $t1, 0
   sw $t1, -12($fp)
   label_END_104: 
# IF_ZERO local_i2a_at_A2I_internal_2 GOTO label_FALSE_101
# IF_ZERO local_i2a_at_A2I_internal_2 GOTO label_FALSE_101
lw $t1, -12($fp)
beq $t1, 0, label_FALSE_101
# LOCAL local_i2a_at_A2I_internal_5 --> -24($fp)
# local_i2a_at_A2I_internal_5 = SELF
sw $s1, -24($fp)
# LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
# LOCAL local_i2a_at_A2I_internal_5 --> -24($fp)
# local_i2a_at_A2I_internal_3 = local_i2a_at_A2I_internal_5
lw $t1, -24($fp)
sw $t1, -16($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_i2a_at_A2I_i_0
# PARAM param_i2a_at_A2I_i_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
# LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
# local_i2a_at_A2I_internal_4 = VCALL local_i2a_at_A2I_internal_3 i2a_aux
# Save new self pointer in $s1
lw $s1, -16($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 32($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -20($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# GOTO label_END_102
j label_END_102
label_FALSE_101: 
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_26
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -36($fp)
   # LOCAL local_i2a_at_A2I_internal_6 --> -28($fp)
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # local_i2a_at_A2I_internal_6 = local_i2a_at_A2I_internal_8
   lw $t1, -36($fp)
   sw $t1, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_11 --> -48($fp)
   # local_i2a_at_A2I_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_i2a_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_at_A2I_internal_11 --> -48($fp)
   # local_i2a_at_A2I_internal_9 = local_i2a_at_A2I_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_12 --> -52($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # local_i2a_at_A2I_internal_12 = PARAM param_i2a_at_A2I_i_0 * 1
   lw $t1, 0($fp)
   mul $t1, $t1, 1
   sw $t1, -52($fp)
   # ARG local_i2a_at_A2I_internal_12
   # LOCAL local_i2a_at_A2I_internal_12 --> -52($fp)
   lw $t1, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_at_A2I_internal_10 --> -44($fp)
   # local_i2a_at_A2I_internal_10 = VCALL local_i2a_at_A2I_internal_9 i2a_aux
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 32($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_i2a_at_A2I_internal_10
   # LOCAL local_i2a_at_A2I_internal_10 --> -44($fp)
   lw $t1, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_6 --> -28($fp)
   # LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
   # local_i2a_at_A2I_internal_7 = VCALL local_i2a_at_A2I_internal_6 concat
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_END_102: 
label_END_98: 
# RETURN
# Deallocate stack frame for function function_i2a_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 60
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_i2a_aux_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2a_aux_at_A2I_i_0
function_i2a_aux_at_A2I: 
   # Allocate stack frame for function function_i2a_aux_at_A2I.
   subu $sp, $sp, 64
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 64
   # LOCAL local_i2a_aux_at_A2I_internal_0 --> -4($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # local_i2a_aux_at_A2I_internal_0 = PARAM param_i2a_aux_at_A2I_i_0 - 0
   lw $t1, 0($fp)
   sub $t1, $t1, 0
   sw $t1, -4($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_TRUE_107
   # IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_TRUE_107
   lw $t1, -4($fp)
   beq $t1, 0, label_TRUE_107
   # LOCAL local_i2a_aux_at_A2I_internal_0 --> -4($fp)
   # local_i2a_aux_at_A2I_internal_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # GOTO label_END_108
j label_END_108
label_TRUE_107: 
   # LOCAL local_i2a_aux_at_A2I_internal_0 --> -4($fp)
   # local_i2a_aux_at_A2I_internal_0 = 1
   li $t1, 1
   sw $t1, -4($fp)
   label_END_108: 
# IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_FALSE_105
# IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_FALSE_105
lw $t1, -4($fp)
beq $t1, 0, label_FALSE_105
# LOCAL local_i2a_aux_at_A2I_internal_1 --> -8($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_27
sw $t1, 12($v0)
li $t1, 0
sw $t1, 16($v0)
sw $v0, -8($fp)
# GOTO label_END_106
j label_END_106
label_FALSE_105: 
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # local_i2a_aux_at_A2I_internal_3 = PARAM param_i2a_aux_at_A2I_i_0 / 10
   lw $t1, 0($fp)
   div $t1, $t1, 10
   sw $t1, -16($fp)
   # LOCAL local_i2a_aux_at_A2I_next_2 --> -12($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # local_i2a_aux_at_A2I_next_2 = local_i2a_aux_at_A2I_internal_3
   lw $t1, -16($fp)
   sw $t1, -12($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_8 --> -36($fp)
   # local_i2a_aux_at_A2I_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_6 --> -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_8 --> -36($fp)
   # local_i2a_aux_at_A2I_internal_6 = local_i2a_aux_at_A2I_internal_8
   lw $t1, -36($fp)
   sw $t1, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_i2a_aux_at_A2I_next_2
   # LOCAL local_i2a_aux_at_A2I_next_2 --> -12($fp)
   lw $t1, -12($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_6 --> -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_7 --> -32($fp)
   # local_i2a_aux_at_A2I_internal_7 = VCALL local_i2a_aux_at_A2I_internal_6 i2a_aux
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 32($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_7 --> -32($fp)
   # local_i2a_aux_at_A2I_internal_4 = local_i2a_aux_at_A2I_internal_7
   lw $t1, -32($fp)
   sw $t1, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_11 --> -48($fp)
   # local_i2a_aux_at_A2I_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_11 --> -48($fp)
   # local_i2a_aux_at_A2I_internal_9 = local_i2a_aux_at_A2I_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_i2a_aux_at_A2I_next_2 --> -12($fp)
   # local_i2a_aux_at_A2I_internal_13 = local_i2a_aux_at_A2I_next_2 * 10
   lw $t1, -12($fp)
   mul $t1, $t1, 10
   sw $t1, -56($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_12 --> -52($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_13 --> -56($fp)
   # local_i2a_aux_at_A2I_internal_12 = PARAM param_i2a_aux_at_A2I_i_0 - local_i2a_aux_at_A2I_internal_13
   lw $t1, 0($fp)
   lw $t2, -56($fp)
   sub $t1, $t1, $t2
   sw $t1, -52($fp)
   # ARG local_i2a_aux_at_A2I_internal_12
   # LOCAL local_i2a_aux_at_A2I_internal_12 --> -52($fp)
   lw $t1, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_10 --> -44($fp)
   # local_i2a_aux_at_A2I_internal_10 = VCALL local_i2a_aux_at_A2I_internal_9 i2c
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 16($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_i2a_aux_at_A2I_internal_10
   # LOCAL local_i2a_aux_at_A2I_internal_10 --> -44($fp)
   lw $t1, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_5 --> -24($fp)
   # local_i2a_aux_at_A2I_internal_5 = VCALL local_i2a_aux_at_A2I_internal_4 concat
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_END_106: 
# RETURN
# Deallocate stack frame for function function_i2a_aux_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 64
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 100
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 100
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = ALLOCATE A2I
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, A2I
   sw $t3, 12($v0)
   li $t3, 3
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, A2I_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 16
   sw $t3, 8($v0)
   move $t2, $v0
   sw $t2, -16($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_1 = local_main_at_Main_internal_3
   lw $t2, -16($fp)
   sw $t2, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, data_28
   sw $t2, 12($v0)
   li $t2, 6
   sw $t2, 16($v0)
   sw $v0, -20($fp)
   # ARG local_main_at_Main_internal_4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   lw $t2, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = VCALL local_main_at_Main_internal_1 a2i
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 20($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_a_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_a_0 = local_main_at_Main_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = ALLOCATE A2I
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, A2I
   sw $t4, 12($v0)
   li $t4, 3
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, A2I_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   move $t3, $v0
   sw $t3, -36($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_internal_8
   lw $t3, -36($fp)
   sw $t3, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 678987
   li $t3, 678987
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 i2a
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 28($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_b_5 --> -24($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_b_5 = local_main_at_Main_internal_7
   lw $t3, -32($fp)
   sw $t3, -24($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_9 = local_main_at_Main_internal_11
   lw $t3, -48($fp)
   sw $t3, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_main_at_Main_a_0
   # LOCAL local_main_at_Main_a_0 --> -4($fp)
   lw $t3, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_10 = VCALL local_main_at_Main_internal_9 out_int
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 16($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_12 = local_main_at_Main_internal_14
   lw $t3, -60($fp)
   sw $t3, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, data_29
   sw $t3, 12($v0)
   li $t3, 4
   sw $t3, 16($v0)
   sw $v0, -64($fp)
   # ARG local_main_at_Main_internal_15
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   lw $t3, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # local_main_at_Main_internal_13 = VCALL local_main_at_Main_internal_12 out_string
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_18 --> -76($fp)
   # local_main_at_Main_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # LOCAL local_main_at_Main_internal_18 --> -76($fp)
   # local_main_at_Main_internal_16 = local_main_at_Main_internal_18
   lw $t3, -76($fp)
   sw $t3, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_main_at_Main_b_5
   # LOCAL local_main_at_Main_b_5 --> -24($fp)
   lw $t3, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   # local_main_at_Main_internal_17 = VCALL local_main_at_Main_internal_16 out_string
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_21 --> -88($fp)
   # local_main_at_Main_internal_21 = SELF
   sw $s1, -88($fp)
   # LOCAL local_main_at_Main_internal_19 --> -80($fp)
   # LOCAL local_main_at_Main_internal_21 --> -88($fp)
   # local_main_at_Main_internal_19 = local_main_at_Main_internal_21
   lw $t3, -88($fp)
   sw $t3, -80($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, data_30
   sw $t3, 12($v0)
   li $t3, 2
   sw $t3, 16($v0)
   sw $v0, -92($fp)
   # ARG local_main_at_Main_internal_22
   # LOCAL local_main_at_Main_internal_22 --> -92($fp)
   lw $t3, -92($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_19 --> -80($fp)
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   # local_main_at_Main_internal_20 = VCALL local_main_at_Main_internal_19 out_string
   # Save new self pointer in $s1
   lw $s1, -80($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 12($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -84($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_20
   lw $v0, -84($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 100
   jr $ra
   # Function END


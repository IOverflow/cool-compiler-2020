
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sat Dec  5 11:25:30 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
List:   .asciiz    "List"
# Function END
Cons:   .asciiz    "Cons"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type List ****
List_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_isNil_at_List, function_head_at_List, function_tail_at_List, function_cons_at_List
# Function END
# 


#  **** Type RECORD for type List ****
List_start: 
   List_vtable_pointer:   .word    List_vtable
   # Function END
List_end: 
# 


#  **** VTABLE for type Cons ****
Cons_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_isNil_at_Cons, function_head_at_Cons, function_tail_at_Cons, function_cons_at_List, function_init_at_Cons
# Function END
# 


#  **** Type RECORD for type Cons ****
Cons_start: 
   Cons_vtable_pointer:   .word    Cons_vtable
   # Function END
Cons_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_print_list_at_Main, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


IO__TDT:   .word    0, -1, -1, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 2, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1
List__TDT:   .word    -1, -1, -1, -1, 0, 1, -1
Cons__TDT:   .word    -1, -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, 0
# 


data_2:   .asciiz    "\n"
# 


data_3:   .asciiz    " "
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_in_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   li $a0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f3d54d11130>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 24
   sw $t2, 8($v0)
   move $t1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__mylist__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL function_main_at_Main
   # LOCAL local__internal_1 --> -8($fp)
   jal function_main_at_Main
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_List implementation.
# @Params:
function_isNil_at_List: 
   # Allocate stack frame for function function_isNil_at_List.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 1
   li $v0, 1
   # Deallocate stack frame for function function_isNil_at_List.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_head_at_List implementation.
# @Params:
function_head_at_List: 
   # Allocate stack frame for function function_head_at_List.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_head_at_List_internal_2 --> -12($fp)
   # local_head_at_List_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_head_at_List_internal_0 --> -4($fp)
   # LOCAL local_head_at_List_internal_2 --> -12($fp)
   # local_head_at_List_internal_0 = local_head_at_List_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_head_at_List_internal_0 --> -4($fp)
   # LOCAL local_head_at_List_internal_1 --> -8($fp)
   # local_head_at_List_internal_1 = VCALL local_head_at_List_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function function_head_at_List.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_tail_at_List implementation.
# @Params:
function_tail_at_List: 
   # Allocate stack frame for function function_tail_at_List.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_tail_at_List_internal_2 --> -12($fp)
   # local_tail_at_List_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_tail_at_List_internal_0 --> -4($fp)
   # LOCAL local_tail_at_List_internal_2 --> -12($fp)
   # local_tail_at_List_internal_0 = local_tail_at_List_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_tail_at_List_internal_0 --> -4($fp)
   # LOCAL local_tail_at_List_internal_1 --> -8($fp)
   # local_tail_at_List_internal_1 = VCALL local_tail_at_List_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 0($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_tail_at_List_internal_3 --> -16($fp)
   # local_tail_at_List_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_tail_at_List_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_tail_at_List.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cons_at_List implementation.
# @Params:
# 	0($fp) = param_cons_at_List_i_0
function_cons_at_List: 
   # Allocate stack frame for function function_cons_at_List.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_cons_at_List_internal_2 --> -12($fp)
   # local_cons_at_List_internal_2 = ALLOCATE Cons
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, Cons
   sw $t3, 12($v0)
   li $t3, 4
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Cons_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 20
   sw $t3, 8($v0)
   move $t2, $v0
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __Cons__attrib__car__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t2)
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __Cons__attrib__cdr__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t2)
   sw $t2, -12($fp)
   # LOCAL local_cons_at_List_internal_0 --> -4($fp)
   # LOCAL local_cons_at_List_internal_2 --> -12($fp)
   # local_cons_at_List_internal_0 = local_cons_at_List_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cons_at_List_i_0
   # PARAM param_cons_at_List_i_0 --> 0($fp)
   lw $t2, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_cons_at_List_internal_3 --> -16($fp)
   # local_cons_at_List_internal_3 = SELF
   sw $s1, -16($fp)
   # ARG local_cons_at_List_internal_3
   # LOCAL local_cons_at_List_internal_3 --> -16($fp)
   lw $t2, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_cons_at_List_internal_0 --> -4($fp)
   # LOCAL local_cons_at_List_internal_1 --> -8($fp)
   # local_cons_at_List_internal_1 = VCALL local_cons_at_List_internal_0 init
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 28($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_cons_at_List_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_cons_at_List.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# __Cons__attrib__car__init implementation.
# @Params:
__Cons__attrib__car__init: 
   # Allocate stack frame for function __Cons__attrib__car__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Cons__attrib__car__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Cons__attrib__cdr__init implementation.
# @Params:
__Cons__attrib__cdr__init: 
   # Allocate stack frame for function __Cons__attrib__cdr__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Cons__attrib__cdr__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_Cons implementation.
# @Params:
function_isNil_at_Cons: 
   # Allocate stack frame for function function_isNil_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function function_isNil_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_head_at_Cons implementation.
# @Params:
function_head_at_Cons: 
   # Allocate stack frame for function function_head_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_head_at_Cons_internal_0 = GETATTRIBUTE car Cons
   # LOCAL local_head_at_Cons_internal_0 --> -4($fp)
   lw $t2, 12($s1)
   sw $t2, -4($fp)
   # RETURN local_head_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_head_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_tail_at_Cons implementation.
# @Params:
function_tail_at_Cons: 
   # Allocate stack frame for function function_tail_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_tail_at_Cons_internal_0 = GETATTRIBUTE cdr Cons
   # LOCAL local_tail_at_Cons_internal_0 --> -4($fp)
   lw $t2, 16($s1)
   sw $t2, -4($fp)
   # RETURN local_tail_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_tail_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_Cons implementation.
# @Params:
# 	0($fp) = param_init_at_Cons_i_0
# 	4($fp) = param_init_at_Cons_rest_1
function_init_at_Cons: 
   # Allocate stack frame for function function_init_at_Cons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_Cons_i_0 --> 4($fp)
   lw $t2, 4($fp)
   sw $t2, 12($s1)
   # 
   # PARAM param_init_at_Cons_rest_1 --> 0($fp)
   lw $t2, 0($fp)
   sw $t2, 16($s1)
   # LOCAL local_init_at_Cons_internal_0 --> -4($fp)
   # local_init_at_Cons_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_Cons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_Cons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# __Main__attrib__mylist__init implementation.
# @Params:
__Main__attrib__mylist__init: 
   # Allocate stack frame for function __Main__attrib__mylist__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__mylist__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_print_list_at_Main implementation.
# @Params:
# 	0($fp) = param_print_list_at_Main_l_0
function_print_list_at_Main: 
   # Allocate stack frame for function function_print_list_at_Main.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_print_list_at_Main_internal_0 --> -4($fp)
   # PARAM param_print_list_at_Main_l_0 --> 0($fp)
   # local_print_list_at_Main_internal_0 = PARAM param_print_list_at_Main_l_0
   lw $t2, 0($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_0 --> -4($fp)
   # LOCAL local_print_list_at_Main_internal_1 --> -8($fp)
   # local_print_list_at_Main_internal_1 = VCALL local_print_list_at_Main_internal_0 isNil
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 12($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # IF_ZERO local_print_list_at_Main_internal_1 GOTO label_FALSE_1
   # IF_ZERO local_print_list_at_Main_internal_1 GOTO label_FALSE_1
   lw $t2, -8($fp)
   beq $t2, 0, label_FALSE_1
   # LOCAL local_print_list_at_Main_internal_4 --> -20($fp)
   # local_print_list_at_Main_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_print_list_at_Main_internal_2 --> -12($fp)
   # LOCAL local_print_list_at_Main_internal_4 --> -20($fp)
   # local_print_list_at_Main_internal_2 = local_print_list_at_Main_internal_4
   lw $t2, -20($fp)
   sw $t2, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, data_2
   sw $t2, 12($v0)
   li $t2, 2
   sw $t2, 16($v0)
   sw $v0, -24($fp)
   # ARG local_print_list_at_Main_internal_5
   # LOCAL local_print_list_at_Main_internal_5 --> -24($fp)
   lw $t2, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_print_list_at_Main_internal_2 --> -12($fp)
   # LOCAL local_print_list_at_Main_internal_3 --> -16($fp)
   # local_print_list_at_Main_internal_3 = VCALL local_print_list_at_Main_internal_2 out_string
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 12($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # GOTO label_END_2
j label_END_2
label_FALSE_1: 
   # LOCAL local_print_list_at_Main_internal_8 --> -36($fp)
   # local_print_list_at_Main_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_print_list_at_Main_internal_6 --> -28($fp)
   # LOCAL local_print_list_at_Main_internal_8 --> -36($fp)
   # local_print_list_at_Main_internal_6 = local_print_list_at_Main_internal_8
   lw $t2, -36($fp)
   sw $t2, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_9 --> -40($fp)
   # PARAM param_print_list_at_Main_l_0 --> 0($fp)
   # local_print_list_at_Main_internal_9 = PARAM param_print_list_at_Main_l_0
   lw $t2, 0($fp)
   sw $t2, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_9 --> -40($fp)
   # LOCAL local_print_list_at_Main_internal_10 --> -44($fp)
   # local_print_list_at_Main_internal_10 = VCALL local_print_list_at_Main_internal_9 head
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 16($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_print_list_at_Main_internal_10
   # LOCAL local_print_list_at_Main_internal_10 --> -44($fp)
   lw $t2, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_print_list_at_Main_internal_6 --> -28($fp)
   # LOCAL local_print_list_at_Main_internal_7 --> -32($fp)
   # local_print_list_at_Main_internal_7 = VCALL local_print_list_at_Main_internal_6 out_int
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 16($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_list_at_Main_internal_13 --> -56($fp)
   # local_print_list_at_Main_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_print_list_at_Main_internal_11 --> -48($fp)
   # LOCAL local_print_list_at_Main_internal_13 --> -56($fp)
   # local_print_list_at_Main_internal_11 = local_print_list_at_Main_internal_13
   lw $t2, -56($fp)
   sw $t2, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, data_3
   sw $t2, 12($v0)
   li $t2, 1
   sw $t2, 16($v0)
   sw $v0, -60($fp)
   # ARG local_print_list_at_Main_internal_14
   # LOCAL local_print_list_at_Main_internal_14 --> -60($fp)
   lw $t2, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_print_list_at_Main_internal_11 --> -48($fp)
   # LOCAL local_print_list_at_Main_internal_12 --> -52($fp)
   # local_print_list_at_Main_internal_12 = VCALL local_print_list_at_Main_internal_11 out_string
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 12($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_list_at_Main_internal_17 --> -72($fp)
   # local_print_list_at_Main_internal_17 = SELF
   sw $s1, -72($fp)
   # LOCAL local_print_list_at_Main_internal_15 --> -64($fp)
   # LOCAL local_print_list_at_Main_internal_17 --> -72($fp)
   # local_print_list_at_Main_internal_15 = local_print_list_at_Main_internal_17
   lw $t2, -72($fp)
   sw $t2, -64($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_18 --> -76($fp)
   # PARAM param_print_list_at_Main_l_0 --> 0($fp)
   # local_print_list_at_Main_internal_18 = PARAM param_print_list_at_Main_l_0
   lw $t2, 0($fp)
   sw $t2, -76($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_list_at_Main_internal_18 --> -76($fp)
   # LOCAL local_print_list_at_Main_internal_19 --> -80($fp)
   # local_print_list_at_Main_internal_19 = VCALL local_print_list_at_Main_internal_18 tail
   # Save new self pointer in $s1
   lw $s1, -76($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 20($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -80($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_print_list_at_Main_internal_19
   # LOCAL local_print_list_at_Main_internal_19 --> -80($fp)
   lw $t2, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_print_list_at_Main_internal_15 --> -64($fp)
   # LOCAL local_print_list_at_Main_internal_16 --> -68($fp)
   # local_print_list_at_Main_internal_16 = VCALL local_print_list_at_Main_internal_15 print_list
   # Save new self pointer in $s1
   lw $s1, -64($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 28($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -68($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_END_2: 
# RETURN
# Deallocate stack frame for function function_print_list_at_Main.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 88
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 96
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 96
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_10 = ALLOCATE List
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, List
   sw $t4, 12($v0)
   li $t4, 4
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, List_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   move $t3, $v0
   sw $t3, -44($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # local_main_at_Main_internal_8 = local_main_at_Main_internal_10
   lw $t3, -44($fp)
   sw $t3, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 1
   li $t3, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = VCALL local_main_at_Main_internal_8 cons
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 24($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_internal_9
   lw $t3, -40($fp)
   sw $t3, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 2
   li $t3, 2
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 cons
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 24($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_4 = local_main_at_Main_internal_7
   lw $t3, -32($fp)
   sw $t3, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 3
   li $t3, 3
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = VCALL local_main_at_Main_internal_4 cons
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 24($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_2 = local_main_at_Main_internal_5
   lw $t3, -24($fp)
   sw $t3, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 4
   li $t3, 4
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = VCALL local_main_at_Main_internal_2 cons
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 24($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_0 = local_main_at_Main_internal_3
   lw $t3, -16($fp)
   sw $t3, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG 5
   li $t3, 5
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 cons
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 24($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   lw $t3, -8($fp)
   sw $t3, 12($s1)
   label_WHILE_3: 
      # local_main_at_Main_internal_13 = GETATTRIBUTE mylist Main
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      lw $t3, 12($s1)
      sw $t3, -56($fp)
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # local_main_at_Main_internal_11 = local_main_at_Main_internal_13
      lw $t3, -56($fp)
      sw $t3, -48($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # LOCAL local_main_at_Main_internal_12 --> -52($fp)
      # local_main_at_Main_internal_12 = VCALL local_main_at_Main_internal_11 isNil
      # Save new self pointer in $s1
      lw $s1, -48($fp)
      # Get pointer to type
      lw $t3, 4($s1)
      # Get pointer to type's VTABLE
      lw $t4, 0($t3)
      # Get pointer to function address
      lw $t5, 12($t4)
      # Call function. Result is on $v0
      jalr $t5
      sw $v0, -52($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # IF_ZERO local_main_at_Main_internal_12 GOTO label_FALSE_5
      # IF_ZERO local_main_at_Main_internal_12 GOTO label_FALSE_5
      lw $t3, -52($fp)
      beq $t3, 0, label_FALSE_5
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # local_main_at_Main_internal_14 = 0
      li $t3, 0
      sw $t3, -60($fp)
      # GOTO label_NOT_END_6
      j label_NOT_END_6
      label_FALSE_5: 
         # LOCAL local_main_at_Main_internal_14 --> -60($fp)
         # local_main_at_Main_internal_14 = 1
         li $t3, 1
         sw $t3, -60($fp)
         label_NOT_END_6: 
            # IF_ZERO local_main_at_Main_internal_14 GOTO label_WHILE_END_4
            # IF_ZERO local_main_at_Main_internal_14 GOTO label_WHILE_END_4
            lw $t3, -60($fp)
            beq $t3, 0, label_WHILE_END_4
            # LOCAL local_main_at_Main_internal_17 --> -72($fp)
            # local_main_at_Main_internal_17 = SELF
            sw $s1, -72($fp)
            # LOCAL local_main_at_Main_internal_15 --> -64($fp)
            # LOCAL local_main_at_Main_internal_17 --> -72($fp)
            # local_main_at_Main_internal_15 = local_main_at_Main_internal_17
            lw $t3, -72($fp)
            sw $t3, -64($fp)
            # Push register s1 into stack
            subu $sp, $sp, 4
            sw $s1, 0($sp)
            # local_main_at_Main_internal_18 = GETATTRIBUTE mylist Main
            # LOCAL local_main_at_Main_internal_18 --> -76($fp)
            lw $t3, 12($s1)
            sw $t3, -76($fp)
            # ARG local_main_at_Main_internal_18
            # LOCAL local_main_at_Main_internal_18 --> -76($fp)
            lw $t3, -76($fp)
            # Push arg into stack
            subu $sp, $sp, 4
            sw $t3, 0($sp)
            # LOCAL local_main_at_Main_internal_15 --> -64($fp)
            # LOCAL local_main_at_Main_internal_16 --> -68($fp)
            # local_main_at_Main_internal_16 = VCALL local_main_at_Main_internal_15 print_list
            # Save new self pointer in $s1
            lw $s1, -64($fp)
            # Get pointer to type
            lw $t3, 4($s1)
            # Get pointer to type's VTABLE
            lw $t4, 0($t3)
            # Get pointer to function address
            lw $t5, 28($t4)
            # Call function. Result is on $v0
            jalr $t5
            sw $v0, -68($fp)
            # Pop 4 bytes from stack into register s1
            lw $s1, 0($sp)
            addu $sp, $sp, 4
            # local_main_at_Main_internal_21 = GETATTRIBUTE mylist Main
            # LOCAL local_main_at_Main_internal_21 --> -88($fp)
            lw $t3, 12($s1)
            sw $t3, -88($fp)
            # LOCAL local_main_at_Main_internal_19 --> -80($fp)
            # LOCAL local_main_at_Main_internal_21 --> -88($fp)
            # local_main_at_Main_internal_19 = local_main_at_Main_internal_21
            lw $t3, -88($fp)
            sw $t3, -80($fp)
            # Push register s1 into stack
            subu $sp, $sp, 4
            sw $s1, 0($sp)
            # LOCAL local_main_at_Main_internal_19 --> -80($fp)
            # LOCAL local_main_at_Main_internal_20 --> -84($fp)
            # local_main_at_Main_internal_20 = VCALL local_main_at_Main_internal_19 tail
            # Save new self pointer in $s1
            lw $s1, -80($fp)
            # Get pointer to type
            lw $t3, 4($s1)
            # Get pointer to type's VTABLE
            lw $t4, 0($t3)
            # Get pointer to function address
            lw $t5, 20($t4)
            # Call function. Result is on $v0
            jalr $t5
            sw $v0, -84($fp)
            # Pop 4 bytes from stack into register s1
            lw $s1, 0($sp)
            addu $sp, $sp, 4
            # 
            # LOCAL local_main_at_Main_internal_20 --> -84($fp)
            lw $t3, -84($fp)
            sw $t3, 12($s1)
            # GOTO label_WHILE_3
            j label_WHILE_3
            label_WHILE_END_4: 
               # RETURN
               # Deallocate stack frame for function function_main_at_Main.
               # Restore $ra
               lw $ra, 4($sp)
               # Restore $fp
               lw $fp, 0($sp)
               # Restore Stack pointer $sp
               addu $sp, $sp, 96
               jr $ra
               # Function END



# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sun Dec  6 22:31:39 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 2
String__TDT:   .word    -1, -1, 0, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "2 is trivially prime.\n"
# 


data_5:   .asciiz    " is prime.\n"
# 


data_6:   .asciiz    "halt"
# 


data_7:   .asciiz    "continue"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f431a0000d0>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 32 bytes of memory
   li $a0, 32
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 16
   sw $t2, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__out__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__testee__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__divisor__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__stop__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__m__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t1, Main_vtable
   # Get pointer to function address
   lw $t2, 28($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__out__init implementation.
# @Params:
__Main__attrib__out__init: 
   # Allocate stack frame for function __Main__attrib__out__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__out__init_internal_2 --> -12($fp)
   # local_ttrib__out__init_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_ttrib__out__init_internal_0 --> -4($fp)
   # LOCAL local_ttrib__out__init_internal_2 --> -12($fp)
   # local_ttrib__out__init_internal_0 = local_ttrib__out__init_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__out__init_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_4
   sw $t1, 12($v0)
   li $t1, 22
   sw $t1, 16($v0)
   sw $v0, -16($fp)
   # ARG local_ttrib__out__init_internal_3
   # LOCAL local_ttrib__out__init_internal_3 --> -16($fp)
   lw $t1, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_ttrib__out__init_internal_0 --> -4($fp)
   # LOCAL local_ttrib__out__init_internal_1 --> -8($fp)
   # local_ttrib__out__init_internal_1 = VCALL local_ttrib__out__init_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN 2
   li $v0, 2
   # Deallocate stack frame for function __Main__attrib__out__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__testee__init implementation.
# @Params:
__Main__attrib__testee__init: 
   # Allocate stack frame for function __Main__attrib__testee__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_ttrib__testee__init_internal_0 = GETATTRIBUTE out Main
   # LOCAL local_ttrib__testee__init_internal_0 --> -4($fp)
   lw $t1, 12($s1)
   sw $t1, -4($fp)
   # RETURN local_ttrib__testee__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Main__attrib__testee__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__divisor__init implementation.
# @Params:
__Main__attrib__divisor__init: 
   # Allocate stack frame for function __Main__attrib__divisor__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__divisor__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__stop__init implementation.
# @Params:
__Main__attrib__stop__init: 
   # Allocate stack frame for function __Main__attrib__stop__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 500
   li $v0, 500
   # Deallocate stack frame for function __Main__attrib__stop__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__m__init implementation.
# @Params:
__Main__attrib__m__init: 
   # Allocate stack frame for function __Main__attrib__m__init.
   subu $sp, $sp, 192
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 192
   label_WHILE_1: 
      # LOCAL local_ttrib__m__init_internal_0 --> -4($fp)
      # local_ttrib__m__init_internal_0 = 1
      li $t1, 1
      sw $t1, -4($fp)
      # IF_ZERO local_ttrib__m__init_internal_0 GOTO label_WHILE_END_2
      # IF_ZERO local_ttrib__m__init_internal_0 GOTO label_WHILE_END_2
      lw $t1, -4($fp)
      beq $t1, 0, label_WHILE_END_2
      # local_ttrib__m__init_internal_2 = GETATTRIBUTE testee Main
      # LOCAL local_ttrib__m__init_internal_2 --> -12($fp)
      lw $t1, 16($s1)
      sw $t1, -12($fp)
      # LOCAL local_ttrib__m__init_internal_1 --> -8($fp)
      # LOCAL local_ttrib__m__init_internal_2 --> -12($fp)
      # local_ttrib__m__init_internal_1 = local_ttrib__m__init_internal_2 + 1
      lw $t1, -12($fp)
      add $t1, $t1, 1
      sw $t1, -8($fp)
      # 
      # LOCAL local_ttrib__m__init_internal_1 --> -8($fp)
      lw $t1, -8($fp)
      sw $t1, 16($s1)
      # 
      li $t1, 2
      sw $t1, 20($s1)
      label_WHILE_3: 
         # local_ttrib__m__init_internal_5 = GETATTRIBUTE testee Main
         # LOCAL local_ttrib__m__init_internal_5 --> -24($fp)
         lw $t1, 16($s1)
         sw $t1, -24($fp)
         # local_ttrib__m__init_internal_7 = GETATTRIBUTE divisor Main
         # LOCAL local_ttrib__m__init_internal_7 --> -32($fp)
         lw $t1, 20($s1)
         sw $t1, -32($fp)
         # local_ttrib__m__init_internal_8 = GETATTRIBUTE divisor Main
         # LOCAL local_ttrib__m__init_internal_8 --> -36($fp)
         lw $t1, 20($s1)
         sw $t1, -36($fp)
         # LOCAL local_ttrib__m__init_internal_6 --> -28($fp)
         # LOCAL local_ttrib__m__init_internal_7 --> -32($fp)
         # LOCAL local_ttrib__m__init_internal_8 --> -36($fp)
         # local_ttrib__m__init_internal_6 = local_ttrib__m__init_internal_7 * local_ttrib__m__init_internal_8
         lw $t1, -32($fp)
         lw $t2, -36($fp)
         mul $t1, $t1, $t2
         sw $t1, -28($fp)
         # LOCAL local_ttrib__m__init_internal_4 --> -20($fp)
         # LOCAL local_ttrib__m__init_internal_5 --> -24($fp)
         # LOCAL local_ttrib__m__init_internal_6 --> -28($fp)
         # local_ttrib__m__init_internal_4 = local_ttrib__m__init_internal_5 - local_ttrib__m__init_internal_6
         lw $t1, -24($fp)
         lw $t2, -28($fp)
         sub $t1, $t1, $t2
         sw $t1, -20($fp)
         # IF_GREATER_ZERO local_ttrib__m__init_internal_4 GOTO label_FALSE_7
         # IF_GREATER_ZERO local_ttrib__m__init_internal_4 GOTO label_FALSE_7
         lw $t1, -20($fp)
         bgt $t1, 0, label_FALSE_7
         # IF_ZERO local_ttrib__m__init_internal_4 GOTO label_FALSE_7
         # IF_ZERO local_ttrib__m__init_internal_4 GOTO label_FALSE_7
         lw $t1, -20($fp)
         beq $t1, 0, label_FALSE_7
         # LOCAL local_ttrib__m__init_internal_4 --> -20($fp)
         # local_ttrib__m__init_internal_4 = 1
         li $t1, 1
         sw $t1, -20($fp)
         # GOTO label_END_8
j label_END_8
label_FALSE_7: 
   # LOCAL local_ttrib__m__init_internal_4 --> -20($fp)
   # local_ttrib__m__init_internal_4 = 0
   li $t1, 0
   sw $t1, -20($fp)
   label_END_8: 
# IF_ZERO local_ttrib__m__init_internal_4 GOTO label_FALSEIF_5
# IF_ZERO local_ttrib__m__init_internal_4 GOTO label_FALSEIF_5
lw $t1, -20($fp)
beq $t1, 0, label_FALSEIF_5
# LOCAL local_ttrib__m__init_internal_9 --> -40($fp)
# local_ttrib__m__init_internal_9 = 0
li $t1, 0
sw $t1, -40($fp)
# LOCAL local_ttrib__m__init_internal_3 --> -16($fp)
# LOCAL local_ttrib__m__init_internal_9 --> -40($fp)
# local_ttrib__m__init_internal_3 = local_ttrib__m__init_internal_9
lw $t1, -40($fp)
sw $t1, -16($fp)
# GOTO label_ENDIF_6
j label_ENDIF_6
label_FALSEIF_5: 
   # local_ttrib__m__init_internal_13 = GETATTRIBUTE testee Main
   # LOCAL local_ttrib__m__init_internal_13 --> -56($fp)
   lw $t1, 16($s1)
   sw $t1, -56($fp)
   # local_ttrib__m__init_internal_15 = GETATTRIBUTE divisor Main
   # LOCAL local_ttrib__m__init_internal_15 --> -64($fp)
   lw $t1, 20($s1)
   sw $t1, -64($fp)
   # local_ttrib__m__init_internal_17 = GETATTRIBUTE testee Main
   # LOCAL local_ttrib__m__init_internal_17 --> -72($fp)
   lw $t1, 16($s1)
   sw $t1, -72($fp)
   # local_ttrib__m__init_internal_18 = GETATTRIBUTE divisor Main
   # LOCAL local_ttrib__m__init_internal_18 --> -76($fp)
   lw $t1, 20($s1)
   sw $t1, -76($fp)
   # LOCAL local_ttrib__m__init_internal_16 --> -68($fp)
   # LOCAL local_ttrib__m__init_internal_17 --> -72($fp)
   # LOCAL local_ttrib__m__init_internal_18 --> -76($fp)
   # local_ttrib__m__init_internal_16 = local_ttrib__m__init_internal_17 / local_ttrib__m__init_internal_18
   lw $t1, -72($fp)
   lw $t2, -76($fp)
   div $t1, $t1, $t2
   sw $t1, -68($fp)
   # LOCAL local_ttrib__m__init_internal_14 --> -60($fp)
   # LOCAL local_ttrib__m__init_internal_15 --> -64($fp)
   # LOCAL local_ttrib__m__init_internal_16 --> -68($fp)
   # local_ttrib__m__init_internal_14 = local_ttrib__m__init_internal_15 * local_ttrib__m__init_internal_16
   lw $t1, -64($fp)
   lw $t2, -68($fp)
   mul $t1, $t1, $t2
   sw $t1, -60($fp)
   # LOCAL local_ttrib__m__init_internal_12 --> -52($fp)
   # LOCAL local_ttrib__m__init_internal_13 --> -56($fp)
   # LOCAL local_ttrib__m__init_internal_14 --> -60($fp)
   # local_ttrib__m__init_internal_12 = local_ttrib__m__init_internal_13 - local_ttrib__m__init_internal_14
   lw $t1, -56($fp)
   lw $t2, -60($fp)
   sub $t1, $t1, $t2
   sw $t1, -52($fp)
   # LOCAL local_ttrib__m__init_internal_11 --> -48($fp)
   # LOCAL local_ttrib__m__init_internal_12 --> -52($fp)
   # local_ttrib__m__init_internal_11 = local_ttrib__m__init_internal_12 - 0
   lw $t1, -52($fp)
   sub $t1, $t1, 0
   sw $t1, -48($fp)
   # IF_ZERO local_ttrib__m__init_internal_11 GOTO label_TRUE_11
   # IF_ZERO local_ttrib__m__init_internal_11 GOTO label_TRUE_11
   lw $t1, -48($fp)
   beq $t1, 0, label_TRUE_11
   # LOCAL local_ttrib__m__init_internal_11 --> -48($fp)
   # local_ttrib__m__init_internal_11 = 0
   li $t1, 0
   sw $t1, -48($fp)
   # GOTO label_END_12
j label_END_12
label_TRUE_11: 
   # LOCAL local_ttrib__m__init_internal_11 --> -48($fp)
   # local_ttrib__m__init_internal_11 = 1
   li $t1, 1
   sw $t1, -48($fp)
   label_END_12: 
# IF_ZERO local_ttrib__m__init_internal_11 GOTO label_FALSEIF_9
# IF_ZERO local_ttrib__m__init_internal_11 GOTO label_FALSEIF_9
lw $t1, -48($fp)
beq $t1, 0, label_FALSEIF_9
# LOCAL local_ttrib__m__init_internal_19 --> -80($fp)
# local_ttrib__m__init_internal_19 = 0
li $t1, 0
sw $t1, -80($fp)
# LOCAL local_ttrib__m__init_internal_10 --> -44($fp)
# LOCAL local_ttrib__m__init_internal_19 --> -80($fp)
# local_ttrib__m__init_internal_10 = local_ttrib__m__init_internal_19
lw $t1, -80($fp)
sw $t1, -44($fp)
# GOTO label_ENDIF_10
j label_ENDIF_10
label_FALSEIF_9: 
   # LOCAL local_ttrib__m__init_internal_20 --> -84($fp)
   # local_ttrib__m__init_internal_20 = 1
   li $t1, 1
   sw $t1, -84($fp)
   # LOCAL local_ttrib__m__init_internal_10 --> -44($fp)
   # LOCAL local_ttrib__m__init_internal_20 --> -84($fp)
   # local_ttrib__m__init_internal_10 = local_ttrib__m__init_internal_20
   lw $t1, -84($fp)
   sw $t1, -44($fp)
   label_ENDIF_10: 
# LOCAL local_ttrib__m__init_internal_3 --> -16($fp)
# LOCAL local_ttrib__m__init_internal_10 --> -44($fp)
# local_ttrib__m__init_internal_3 = local_ttrib__m__init_internal_10
lw $t1, -44($fp)
sw $t1, -16($fp)
label_ENDIF_6: 
# IF_ZERO local_ttrib__m__init_internal_3 GOTO label_WHILE_END_4
# IF_ZERO local_ttrib__m__init_internal_3 GOTO label_WHILE_END_4
lw $t1, -16($fp)
beq $t1, 0, label_WHILE_END_4
# local_ttrib__m__init_internal_22 = GETATTRIBUTE divisor Main
# LOCAL local_ttrib__m__init_internal_22 --> -92($fp)
lw $t1, 20($s1)
sw $t1, -92($fp)
# LOCAL local_ttrib__m__init_internal_21 --> -88($fp)
# LOCAL local_ttrib__m__init_internal_22 --> -92($fp)
# local_ttrib__m__init_internal_21 = local_ttrib__m__init_internal_22 + 1
lw $t1, -92($fp)
add $t1, $t1, 1
sw $t1, -88($fp)
# 
# LOCAL local_ttrib__m__init_internal_21 --> -88($fp)
lw $t1, -88($fp)
sw $t1, 20($s1)
# GOTO label_WHILE_3
j label_WHILE_3
label_WHILE_END_4: 
   # local_ttrib__m__init_internal_25 = GETATTRIBUTE testee Main
   # LOCAL local_ttrib__m__init_internal_25 --> -104($fp)
   lw $t1, 16($s1)
   sw $t1, -104($fp)
   # local_ttrib__m__init_internal_27 = GETATTRIBUTE divisor Main
   # LOCAL local_ttrib__m__init_internal_27 --> -112($fp)
   lw $t1, 20($s1)
   sw $t1, -112($fp)
   # local_ttrib__m__init_internal_28 = GETATTRIBUTE divisor Main
   # LOCAL local_ttrib__m__init_internal_28 --> -116($fp)
   lw $t1, 20($s1)
   sw $t1, -116($fp)
   # LOCAL local_ttrib__m__init_internal_26 --> -108($fp)
   # LOCAL local_ttrib__m__init_internal_27 --> -112($fp)
   # LOCAL local_ttrib__m__init_internal_28 --> -116($fp)
   # local_ttrib__m__init_internal_26 = local_ttrib__m__init_internal_27 * local_ttrib__m__init_internal_28
   lw $t1, -112($fp)
   lw $t2, -116($fp)
   mul $t1, $t1, $t2
   sw $t1, -108($fp)
   # LOCAL local_ttrib__m__init_internal_24 --> -100($fp)
   # LOCAL local_ttrib__m__init_internal_25 --> -104($fp)
   # LOCAL local_ttrib__m__init_internal_26 --> -108($fp)
   # local_ttrib__m__init_internal_24 = local_ttrib__m__init_internal_25 - local_ttrib__m__init_internal_26
   lw $t1, -104($fp)
   lw $t2, -108($fp)
   sub $t1, $t1, $t2
   sw $t1, -100($fp)
   # IF_GREATER_ZERO local_ttrib__m__init_internal_24 GOTO label_FALSE_15
   # IF_GREATER_ZERO local_ttrib__m__init_internal_24 GOTO label_FALSE_15
   lw $t1, -100($fp)
   bgt $t1, 0, label_FALSE_15
   # IF_ZERO local_ttrib__m__init_internal_24 GOTO label_FALSE_15
   # IF_ZERO local_ttrib__m__init_internal_24 GOTO label_FALSE_15
   lw $t1, -100($fp)
   beq $t1, 0, label_FALSE_15
   # LOCAL local_ttrib__m__init_internal_24 --> -100($fp)
   # local_ttrib__m__init_internal_24 = 1
   li $t1, 1
   sw $t1, -100($fp)
   # GOTO label_END_16
j label_END_16
label_FALSE_15: 
   # LOCAL local_ttrib__m__init_internal_24 --> -100($fp)
   # local_ttrib__m__init_internal_24 = 0
   li $t1, 0
   sw $t1, -100($fp)
   label_END_16: 
# IF_ZERO local_ttrib__m__init_internal_24 GOTO label_FALSEIF_13
# IF_ZERO local_ttrib__m__init_internal_24 GOTO label_FALSEIF_13
lw $t1, -100($fp)
beq $t1, 0, label_FALSEIF_13
# local_ttrib__m__init_internal_29 = GETATTRIBUTE testee Main
# LOCAL local_ttrib__m__init_internal_29 --> -120($fp)
lw $t1, 16($s1)
sw $t1, -120($fp)
# 
# LOCAL local_ttrib__m__init_internal_29 --> -120($fp)
lw $t1, -120($fp)
sw $t1, 12($s1)
# LOCAL local_ttrib__m__init_internal_32 --> -132($fp)
# local_ttrib__m__init_internal_32 = SELF
sw $s1, -132($fp)
# LOCAL local_ttrib__m__init_internal_30 --> -124($fp)
# LOCAL local_ttrib__m__init_internal_32 --> -132($fp)
# local_ttrib__m__init_internal_30 = local_ttrib__m__init_internal_32
lw $t1, -132($fp)
sw $t1, -124($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_ttrib__m__init_internal_33 = GETATTRIBUTE out Main
# LOCAL local_ttrib__m__init_internal_33 --> -136($fp)
lw $t1, 12($s1)
sw $t1, -136($fp)
# ARG local_ttrib__m__init_internal_33
# LOCAL local_ttrib__m__init_internal_33 --> -136($fp)
lw $t1, -136($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_ttrib__m__init_internal_30 --> -124($fp)
# LOCAL local_ttrib__m__init_internal_31 --> -128($fp)
# local_ttrib__m__init_internal_31 = VCALL local_ttrib__m__init_internal_30 out_int
# Save new self pointer in $s1
lw $s1, -124($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 16($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -128($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_ttrib__m__init_internal_36 --> -148($fp)
# local_ttrib__m__init_internal_36 = SELF
sw $s1, -148($fp)
# LOCAL local_ttrib__m__init_internal_34 --> -140($fp)
# LOCAL local_ttrib__m__init_internal_36 --> -148($fp)
# local_ttrib__m__init_internal_34 = local_ttrib__m__init_internal_36
lw $t1, -148($fp)
sw $t1, -140($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_ttrib__m__init_internal_37 --> -152($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_5
sw $t1, 12($v0)
li $t1, 11
sw $t1, 16($v0)
sw $v0, -152($fp)
# ARG local_ttrib__m__init_internal_37
# LOCAL local_ttrib__m__init_internal_37 --> -152($fp)
lw $t1, -152($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_ttrib__m__init_internal_34 --> -140($fp)
# LOCAL local_ttrib__m__init_internal_35 --> -144($fp)
# local_ttrib__m__init_internal_35 = VCALL local_ttrib__m__init_internal_34 out_string
# Save new self pointer in $s1
lw $s1, -140($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 12($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -144($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_ttrib__m__init_internal_23 --> -96($fp)
# LOCAL local_ttrib__m__init_internal_35 --> -144($fp)
# local_ttrib__m__init_internal_23 = local_ttrib__m__init_internal_35
lw $t1, -144($fp)
sw $t1, -96($fp)
# GOTO label_ENDIF_14
j label_ENDIF_14
label_FALSEIF_13: 
   # LOCAL local_ttrib__m__init_internal_23 --> -96($fp)
   # local_ttrib__m__init_internal_23 = 0
   li $t1, 0
   sw $t1, -96($fp)
   label_ENDIF_14: 
# local_ttrib__m__init_internal_40 = GETATTRIBUTE stop Main
# LOCAL local_ttrib__m__init_internal_40 --> -164($fp)
lw $t1, 24($s1)
sw $t1, -164($fp)
# local_ttrib__m__init_internal_41 = GETATTRIBUTE testee Main
# LOCAL local_ttrib__m__init_internal_41 --> -168($fp)
lw $t1, 16($s1)
sw $t1, -168($fp)
# LOCAL local_ttrib__m__init_internal_39 --> -160($fp)
# LOCAL local_ttrib__m__init_internal_40 --> -164($fp)
# LOCAL local_ttrib__m__init_internal_41 --> -168($fp)
# local_ttrib__m__init_internal_39 = local_ttrib__m__init_internal_40 - local_ttrib__m__init_internal_41
lw $t1, -164($fp)
lw $t2, -168($fp)
sub $t1, $t1, $t2
sw $t1, -160($fp)
# IF_GREATER_ZERO local_ttrib__m__init_internal_39 GOTO label_FALSE_19
# IF_GREATER_ZERO local_ttrib__m__init_internal_39 GOTO label_FALSE_19
lw $t1, -160($fp)
bgt $t1, 0, label_FALSE_19
# LOCAL local_ttrib__m__init_internal_39 --> -160($fp)
# local_ttrib__m__init_internal_39 = 1
li $t1, 1
sw $t1, -160($fp)
# GOTO label_END_20
j label_END_20
label_FALSE_19: 
   # LOCAL local_ttrib__m__init_internal_39 --> -160($fp)
   # local_ttrib__m__init_internal_39 = 0
   li $t1, 0
   sw $t1, -160($fp)
   label_END_20: 
# IF_ZERO local_ttrib__m__init_internal_39 GOTO label_FALSEIF_17
# IF_ZERO local_ttrib__m__init_internal_39 GOTO label_FALSEIF_17
lw $t1, -160($fp)
beq $t1, 0, label_FALSEIF_17
# LOCAL local_ttrib__m__init_internal_44 --> -180($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_6
sw $t1, 12($v0)
li $t1, 4
sw $t1, 16($v0)
sw $v0, -180($fp)
# LOCAL local_ttrib__m__init_internal_42 --> -172($fp)
# LOCAL local_ttrib__m__init_internal_44 --> -180($fp)
# local_ttrib__m__init_internal_42 = local_ttrib__m__init_internal_44
lw $t1, -180($fp)
sw $t1, -172($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_ttrib__m__init_internal_42 --> -172($fp)
# LOCAL local_ttrib__m__init_internal_43 --> -176($fp)
# local_ttrib__m__init_internal_43 = VCALL local_ttrib__m__init_internal_42 abort
# Save new self pointer in $s1
lw $s1, -172($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 0($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -176($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_ttrib__m__init_internal_38 --> -156($fp)
# LOCAL local_ttrib__m__init_internal_43 --> -176($fp)
# local_ttrib__m__init_internal_38 = local_ttrib__m__init_internal_43
lw $t1, -176($fp)
sw $t1, -156($fp)
# GOTO label_ENDIF_18
j label_ENDIF_18
label_FALSEIF_17: 
   # LOCAL local_ttrib__m__init_internal_45 --> -184($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_7
   sw $t1, 12($v0)
   li $t1, 8
   sw $t1, 16($v0)
   sw $v0, -184($fp)
   # LOCAL local_ttrib__m__init_internal_38 --> -156($fp)
   # LOCAL local_ttrib__m__init_internal_45 --> -184($fp)
   # local_ttrib__m__init_internal_38 = local_ttrib__m__init_internal_45
   lw $t1, -184($fp)
   sw $t1, -156($fp)
   label_ENDIF_18: 
# GOTO label_WHILE_1
j label_WHILE_1
label_WHILE_END_2: 
   # RETURN
   # Deallocate stack frame for function __Main__attrib__m__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 192
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


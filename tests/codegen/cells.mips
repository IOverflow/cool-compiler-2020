
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec  7 07:49:34 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
Main:   .asciiz    "Main"
# Function END
CellularAutomaton:   .asciiz    "CellularAutomaton"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


#  **** VTABLE for type CellularAutomaton ****
CellularAutomaton_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_init_at_CellularAutomaton, function_print_at_CellularAutomaton, function_num_cells_at_CellularAutomaton, function_cell_at_CellularAutomaton, function_cell_left_neighbor_at_CellularAutomaton, function_cell_right_neighbor_at_CellularAutomaton, function_cell_at_next_evolution_at_CellularAutomaton, function_evolve_at_CellularAutomaton
# Function END
# 


#  **** Type RECORD for type CellularAutomaton ****
CellularAutomaton_start: 
   CellularAutomaton_vtable_pointer:   .word    CellularAutomaton_vtable
   # Function END
CellularAutomaton_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 1, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, 0, -1
CellularAutomaton__TDT:   .word    -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "         X         "
# 


data_5:   .asciiz    "\n"
# 


data_6:   .asciiz    "X"
# 


data_7:   .asciiz    "X"
# 


data_8:   .asciiz    "X"
# 


data_9:   .asciiz    "X"
# 


data_10:   .asciiz    "."
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a0, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f9a703c52e0>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 20
   sw $t2, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__cells__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t1, Main_vtable
   # Get pointer to function address
   lw $t2, 12($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__cells__init implementation.
# @Params:
__Main__attrib__cells__init: 
   # Allocate stack frame for function __Main__attrib__cells__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__cells__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = ALLOCATE CellularAutomaton
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, CellularAutomaton
   sw $t3, 12($v0)
   li $t3, 17
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, CellularAutomaton_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 24
   sw $t3, 8($v0)
   move $t2, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t2 into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   jal __CellularAutomaton__attrib__population_map__init
   # Pop 4 bytes from stack into register t2
   lw $t2, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t2)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t2, -12($fp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_0 = local_main_at_Main_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, data_4
   sw $t2, 12($v0)
   li $t2, 19
   sw $t2, 16($v0)
   sw $v0, -16($fp)
   # ARG local_main_at_Main_internal_3
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   lw $t2, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 init
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 28($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   lw $t2, -8($fp)
   sw $t2, 12($s1)
   # local_main_at_Main_internal_6 = GETATTRIBUTE cells Main
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   lw $t2, 12($s1)
   sw $t2, -28($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # local_main_at_Main_internal_4 = local_main_at_Main_internal_6
   lw $t2, -28($fp)
   sw $t2, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = VCALL local_main_at_Main_internal_4 print
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 32($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Int
   sw $t2, 12($v0)
   li $t2, 3
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Int_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 16
   sw $t2, 8($v0)
   li $t2, 20
   sw $t2, 12($v0)
   sw $v0, -36($fp)
   # LOCAL local_main_at_Main_countdown_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_countdown_7 = local_main_at_Main_internal_8
   lw $t2, -36($fp)
   sw $t2, -32($fp)
   label_WHILE_1: 
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t2, String
      sw $t2, 0($v0)
      la $t2, String_start
      sw $t2, 4($v0)
      # Load type offset
      li $t2, 8
      sw $t2, 8($v0)
      la $t2, Int
      sw $t2, 12($v0)
      li $t2, 3
      sw $t2, 16($v0)
      move $t2, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t2, 0($v0)
      la $t2, Int_start
      sw $t2, 4($v0)
      # Load type offset
      li $t2, 16
      sw $t2, 8($v0)
      li $t2, 0
      sw $t2, 12($v0)
      sw $v0, -44($fp)
      # LOCAL local_main_at_Main_internal_9 --> -40($fp)
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      # LOCAL local_main_at_Main_countdown_7 --> -32($fp)
      # local_main_at_Main_internal_9 = local_main_at_Main_internal_10 - local_main_at_Main_countdown_7
      lw $t3, -44($fp)
      lw $t2, 12($t3)
      lw $t3, -32($fp)
      lw $t4, 12($t3)
      sub $t2, $t2, $t4
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t3, String
      sw $t3, 0($v0)
      la $t3, String_start
      sw $t3, 4($v0)
      # Load type offset
      li $t3, 8
      sw $t3, 8($v0)
      la $t3, Int
      sw $t3, 12($v0)
      li $t3, 3
      sw $t3, 16($v0)
      move $t3, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t3, 0($v0)
      la $t3, Int_start
      sw $t3, 4($v0)
      # Load type offset
      li $t3, 16
      sw $t3, 8($v0)
      sw $t2, 12($v0)
      sw $v0, -40($fp)
      # IF_GREATER_ZERO local_main_at_Main_internal_9 GOTO label_FALSE_3
      # IF_GREATER_ZERO local_main_at_Main_internal_9 GOTO label_FALSE_3
      lw $t2, -40($fp)
      bgt $t2, 0, label_FALSE_3
      # IF_ZERO local_main_at_Main_internal_9 GOTO label_FALSE_3
      # IF_ZERO local_main_at_Main_internal_9 GOTO label_FALSE_3
      lw $t2, -40($fp)
      beq $t2, 0, label_FALSE_3
      # LOCAL local_main_at_Main_internal_9 --> -40($fp)
      # local_main_at_Main_internal_9 = 1
      li $t2, 1
      sw $t2, -40($fp)
      # GOTO label_END_4
j label_END_4
label_FALSE_3: 
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = 0
   li $t2, 0
   sw $t2, -40($fp)
   label_END_4: 
# IF_ZERO local_main_at_Main_internal_9 GOTO label_WHILE_END_2
# IF_ZERO local_main_at_Main_internal_9 GOTO label_WHILE_END_2
lw $t2, -40($fp)
beq $t2, 0, label_WHILE_END_2
# local_main_at_Main_internal_13 = GETATTRIBUTE cells Main
# LOCAL local_main_at_Main_internal_13 --> -56($fp)
lw $t2, 12($s1)
sw $t2, -56($fp)
# LOCAL local_main_at_Main_internal_11 --> -48($fp)
# LOCAL local_main_at_Main_internal_13 --> -56($fp)
# local_main_at_Main_internal_11 = local_main_at_Main_internal_13
lw $t2, -56($fp)
sw $t2, -48($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_11 --> -48($fp)
# LOCAL local_main_at_Main_internal_12 --> -52($fp)
# local_main_at_Main_internal_12 = VCALL local_main_at_Main_internal_11 evolve
# Save new self pointer in $s1
lw $s1, -48($fp)
# Get pointer to type
lw $t2, 4($s1)
# Get pointer to type's VTABLE
lw $t3, 0($t2)
# Get pointer to function address
lw $t4, 56($t3)
# Call function. Result is on $v0
jalr $t4
sw $v0, -52($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# local_main_at_Main_internal_16 = GETATTRIBUTE cells Main
# LOCAL local_main_at_Main_internal_16 --> -68($fp)
lw $t2, 12($s1)
sw $t2, -68($fp)
# LOCAL local_main_at_Main_internal_14 --> -60($fp)
# LOCAL local_main_at_Main_internal_16 --> -68($fp)
# local_main_at_Main_internal_14 = local_main_at_Main_internal_16
lw $t2, -68($fp)
sw $t2, -60($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_14 --> -60($fp)
# LOCAL local_main_at_Main_internal_15 --> -64($fp)
# local_main_at_Main_internal_15 = VCALL local_main_at_Main_internal_14 print
# Save new self pointer in $s1
lw $s1, -60($fp)
# Get pointer to type
lw $t2, 4($s1)
# Get pointer to type's VTABLE
lw $t3, 0($t2)
# Get pointer to function address
lw $t4, 32($t3)
# Call function. Result is on $v0
jalr $t4
sw $v0, -64($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_18 --> -76($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t2, String
sw $t2, 0($v0)
la $t2, String_start
sw $t2, 4($v0)
# Load type offset
li $t2, 8
sw $t2, 8($v0)
la $t2, Int
sw $t2, 12($v0)
li $t2, 3
sw $t2, 16($v0)
move $t2, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t2, 0($v0)
la $t2, Int_start
sw $t2, 4($v0)
# Load type offset
li $t2, 16
sw $t2, 8($v0)
li $t2, 1
sw $t2, 12($v0)
sw $v0, -76($fp)
# LOCAL local_main_at_Main_internal_17 --> -72($fp)
# LOCAL local_main_at_Main_countdown_7 --> -32($fp)
# LOCAL local_main_at_Main_internal_18 --> -76($fp)
# local_main_at_Main_internal_17 = local_main_at_Main_countdown_7 - local_main_at_Main_internal_18
lw $t3, -32($fp)
lw $t2, 12($t3)
lw $t3, -76($fp)
lw $t4, 12($t3)
sub $t2, $t2, $t4
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t3, String
sw $t3, 0($v0)
la $t3, String_start
sw $t3, 4($v0)
# Load type offset
li $t3, 8
sw $t3, 8($v0)
la $t3, Int
sw $t3, 12($v0)
li $t3, 3
sw $t3, 16($v0)
move $t3, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t3, 0($v0)
la $t3, Int_start
sw $t3, 4($v0)
# Load type offset
li $t3, 16
sw $t3, 8($v0)
sw $t2, 12($v0)
sw $v0, -72($fp)
# LOCAL local_main_at_Main_countdown_7 --> -32($fp)
# LOCAL local_main_at_Main_internal_17 --> -72($fp)
# local_main_at_Main_countdown_7 = local_main_at_Main_internal_17
lw $t2, -72($fp)
sw $t2, -32($fp)
# GOTO label_WHILE_1
j label_WHILE_1
label_WHILE_END_2: 
   # LOCAL local_main_at_Main_internal_19 --> -80($fp)
   # local_main_at_Main_internal_19 = SELF
   sw $s1, -80($fp)
   # RETURN local_main_at_Main_internal_19
   lw $v0, -80($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 88
   jr $ra
   # Function END


# __CellularAutomaton__attrib__population_map__init implementation.
# @Params:
__CellularAutomaton__attrib__population_map__init: 
   # Allocate stack frame for function __CellularAutomaton__attrib__population_map__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_rAutomaton__attrib__population_map__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, data_0
   sw $t2, 12($v0)
   li $t2, 0
   sw $t2, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_rAutomaton__attrib__population_map__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __CellularAutomaton__attrib__population_map__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_init_at_CellularAutomaton_map_0
function_init_at_CellularAutomaton: 
   # Allocate stack frame for function function_init_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_CellularAutomaton_map_0 --> 0($fp)
   lw $t2, 0($fp)
   sw $t2, 12($s1)
   # LOCAL local_init_at_CellularAutomaton_internal_0 --> -4($fp)
   # local_init_at_CellularAutomaton_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_CellularAutomaton_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_print_at_CellularAutomaton implementation.
# @Params:
function_print_at_CellularAutomaton: 
   # Allocate stack frame for function function_print_at_CellularAutomaton.
   subu $sp, $sp, 40
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 40
   # LOCAL local_print_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_print_at_CellularAutomaton_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_print_at_CellularAutomaton_internal_0 = local_print_at_CellularAutomaton_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_CellularAutomaton_internal_5 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_print_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $t2, 12($s1)
   sw $t2, -24($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_print_at_CellularAutomaton_internal_3 = local_print_at_CellularAutomaton_internal_5
   lw $t2, -24($fp)
   sw $t2, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, data_5
   sw $t2, 12($v0)
   li $t2, 1
   sw $t2, 16($v0)
   sw $v0, -28($fp)
   # ARG local_print_at_CellularAutomaton_internal_6
   # LOCAL local_print_at_CellularAutomaton_internal_6 --> -28($fp)
   lw $t2, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_print_at_CellularAutomaton_internal_4 = VCALL local_print_at_CellularAutomaton_internal_3 concat
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 12($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_print_at_CellularAutomaton_internal_4
   # LOCAL local_print_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t2, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_print_at_CellularAutomaton_internal_1 = VCALL local_print_at_CellularAutomaton_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 12($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_print_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # RETURN local_print_at_CellularAutomaton_internal_7
   lw $v0, -32($fp)
   # Deallocate stack frame for function function_print_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 40
   jr $ra
   # Function END


# function_num_cells_at_CellularAutomaton implementation.
# @Params:
function_num_cells_at_CellularAutomaton: 
   # Allocate stack frame for function function_num_cells_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_num_cells_at_CellularAutomaton_internal_2 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_num_cells_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t2, 12($s1)
   sw $t2, -12($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_num_cells_at_CellularAutomaton_internal_0 = local_num_cells_at_CellularAutomaton_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_num_cells_at_CellularAutomaton_internal_1 = VCALL local_num_cells_at_CellularAutomaton_internal_0 length
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 20($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_num_cells_at_CellularAutomaton_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_num_cells_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cell_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_at_CellularAutomaton_position_0
function_cell_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_cell_at_CellularAutomaton_internal_2 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t2, 12($s1)
   sw $t2, -12($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_cell_at_CellularAutomaton_internal_0 = local_cell_at_CellularAutomaton_internal_2
   lw $t2, -12($fp)
   sw $t2, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_CellularAutomaton_position_0
   # PARAM param_cell_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t2, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_cell_at_CellularAutomaton_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Int
   sw $t2, 12($v0)
   li $t2, 3
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Int_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 16
   sw $t2, 8($v0)
   li $t2, 1
   sw $t2, 12($v0)
   sw $v0, -16($fp)
   # ARG local_cell_at_CellularAutomaton_internal_3
   # LOCAL local_cell_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t2, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t2, 0($sp)
   # LOCAL local_cell_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_cell_at_CellularAutomaton_internal_1 = VCALL local_cell_at_CellularAutomaton_internal_0 substr
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t2, 4($s1)
   # Get pointer to type's VTABLE
   lw $t3, 0($t2)
   # Get pointer to function address
   lw $t4, 16($t3)
   # Call function. Result is on $v0
   jalr $t4
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_cell_at_CellularAutomaton_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_cell_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_cell_left_neighbor_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_left_neighbor_at_CellularAutomaton_position_0
function_cell_left_neighbor_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_left_neighbor_at_CellularAutomaton.
   subu $sp, $sp, 72
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 72
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Int
   sw $t2, 12($v0)
   li $t2, 3
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Int_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 16
   sw $t2, 8($v0)
   li $t2, 0
   sw $t2, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_1 --> -8($fp)
   # PARAM param_cell_left_neighbor_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t2, 0($fp)
   # IF_ZERO local_cell_left_neighbor_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_5
   # IF_ZERO local_cell_left_neighbor_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_5
   lw $t3, -8($fp)
   beq $t3, 0, label_FALSEIF_5
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_5 = SELF
   sw $s1, -24($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_3 = local_cell_left_neighbor_at_CellularAutomaton_internal_5
   lw $t3, -24($fp)
   sw $t3, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_9 = SELF
   sw $s1, -40($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_7 = local_cell_left_neighbor_at_CellularAutomaton_internal_9
   lw $t3, -40($fp)
   sw $t3, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_8 = VCALL local_cell_left_neighbor_at_CellularAutomaton_internal_7 num_cells
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 36($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, Int
   sw $t3, 12($v0)
   li $t3, 3
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Int_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 16
   sw $t3, 8($v0)
   li $t3, 1
   sw $t3, 12($v0)
   sw $v0, -44($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_6 = local_cell_left_neighbor_at_CellularAutomaton_internal_8 - local_cell_left_neighbor_at_CellularAutomaton_internal_10
   lw $t4, -36($fp)
   lw $t3, 12($t4)
   lw $t4, -44($fp)
   lw $t5, 12($t4)
   sub $t3, $t3, $t5
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Int
   sw $t4, 12($v0)
   li $t4, 3
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Int_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   sw $t3, 12($v0)
   sw $v0, -28($fp)
   # ARG local_cell_left_neighbor_at_CellularAutomaton_internal_6
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_6 --> -28($fp)
   lw $t3, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_4 = VCALL local_cell_left_neighbor_at_CellularAutomaton_internal_3 cell
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 40($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_0 = local_cell_left_neighbor_at_CellularAutomaton_internal_4
   lw $t3, -20($fp)
   sw $t3, -4($fp)
   # GOTO label_ENDIF_6
j label_ENDIF_6
label_FALSEIF_5: 
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_11 = local_cell_left_neighbor_at_CellularAutomaton_internal_13
   lw $t3, -56($fp)
   sw $t3, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, Int
   sw $t3, 12($v0)
   li $t3, 3
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Int_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 16
   sw $t3, 8($v0)
   li $t3, 1
   sw $t3, 12($v0)
   sw $v0, -64($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_14 --> -60($fp)
   # PARAM param_cell_left_neighbor_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_14 = PARAM param_cell_left_neighbor_at_CellularAutomaton_position_0 - local_cell_left_neighbor_at_CellularAutomaton_internal_15
   lw $t4, 0($fp)
   lw $t3, 12($t4)
   lw $t4, -64($fp)
   lw $t5, 12($t4)
   sub $t3, $t3, $t5
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Int
   sw $t4, 12($v0)
   li $t4, 3
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Int_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   sw $t3, 12($v0)
   sw $v0, -60($fp)
   # ARG local_cell_left_neighbor_at_CellularAutomaton_internal_14
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_14 --> -60($fp)
   lw $t3, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t3, 0($sp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_12 = VCALL local_cell_left_neighbor_at_CellularAutomaton_internal_11 cell
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 40($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_left_neighbor_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_cell_left_neighbor_at_CellularAutomaton_internal_0 = local_cell_left_neighbor_at_CellularAutomaton_internal_12
   lw $t3, -52($fp)
   sw $t3, -4($fp)
   label_ENDIF_6: 
# RETURN local_cell_left_neighbor_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_cell_left_neighbor_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 72
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_cell_right_neighbor_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_right_neighbor_at_CellularAutomaton_position_0
function_cell_right_neighbor_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_right_neighbor_at_CellularAutomaton.
   subu $sp, $sp, 72
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 72
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_5 = SELF
   sw $s1, -24($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_3 = local_cell_right_neighbor_at_CellularAutomaton_internal_5
   lw $t3, -24($fp)
   sw $t3, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_4 = VCALL local_cell_right_neighbor_at_CellularAutomaton_internal_3 num_cells
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t3, 4($s1)
   # Get pointer to type's VTABLE
   lw $t4, 0($t3)
   # Get pointer to function address
   lw $t5, 36($t4)
   # Call function. Result is on $v0
   jalr $t5
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t3, String
   sw $t3, 0($v0)
   la $t3, String_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 8
   sw $t3, 8($v0)
   la $t3, Int
   sw $t3, 12($v0)
   li $t3, 3
   sw $t3, 16($v0)
   move $t3, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t3, 0($v0)
   la $t3, Int_start
   sw $t3, 4($v0)
   # Load type offset
   li $t3, 16
   sw $t3, 8($v0)
   li $t3, 1
   sw $t3, 12($v0)
   sw $v0, -28($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_2 = local_cell_right_neighbor_at_CellularAutomaton_internal_4 - local_cell_right_neighbor_at_CellularAutomaton_internal_6
   lw $t4, -20($fp)
   lw $t3, 12($t4)
   lw $t4, -28($fp)
   lw $t5, 12($t4)
   sub $t3, $t3, $t5
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Int
   sw $t4, 12($v0)
   li $t4, 3
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Int_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   sw $t3, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_1 --> -8($fp)
   # PARAM param_cell_right_neighbor_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t3, 0($fp)
   # IF_ZERO local_cell_right_neighbor_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_7
   # IF_ZERO local_cell_right_neighbor_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_7
   lw $t4, -8($fp)
   beq $t4, 0, label_FALSEIF_7
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_9 = SELF
   sw $s1, -40($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_7 = local_cell_right_neighbor_at_CellularAutomaton_internal_9
   lw $t4, -40($fp)
   sw $t4, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Int
   sw $t4, 12($v0)
   li $t4, 3
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Int_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   li $t4, 0
   sw $t4, 12($v0)
   sw $v0, -44($fp)
   # ARG local_cell_right_neighbor_at_CellularAutomaton_internal_10
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t4, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_8 = VCALL local_cell_right_neighbor_at_CellularAutomaton_internal_7 cell
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t4, 4($s1)
   # Get pointer to type's VTABLE
   lw $t5, 0($t4)
   # Get pointer to function address
   lw $t6, 40($t5)
   # Call function. Result is on $v0
   jalr $t6
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_0 = local_cell_right_neighbor_at_CellularAutomaton_internal_8
   lw $t4, -36($fp)
   sw $t4, -4($fp)
   # GOTO label_ENDIF_8
j label_ENDIF_8
label_FALSEIF_7: 
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_11 = local_cell_right_neighbor_at_CellularAutomaton_internal_13
   lw $t4, -56($fp)
   sw $t4, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, Int
   sw $t4, 12($v0)
   li $t4, 3
   sw $t4, 16($v0)
   move $t4, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t4, 0($v0)
   la $t4, Int_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 16
   sw $t4, 8($v0)
   li $t4, 1
   sw $t4, 12($v0)
   sw $v0, -64($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_14 --> -60($fp)
   # PARAM param_cell_right_neighbor_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_14 = PARAM param_cell_right_neighbor_at_CellularAutomaton_position_0 + local_cell_right_neighbor_at_CellularAutomaton_internal_15
   lw $t5, 0($fp)
   lw $t4, 12($t5)
   lw $t5, -64($fp)
   lw $t6, 12($t5)
   add $t4, $t4, $t6
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, Int
   sw $t5, 12($v0)
   li $t5, 3
   sw $t5, 16($v0)
   move $t5, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t5, 0($v0)
   la $t5, Int_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 16
   sw $t5, 8($v0)
   sw $t4, 12($v0)
   sw $v0, -60($fp)
   # ARG local_cell_right_neighbor_at_CellularAutomaton_internal_14
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_14 --> -60($fp)
   lw $t4, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_12 = VCALL local_cell_right_neighbor_at_CellularAutomaton_internal_11 cell
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t4, 4($s1)
   # Get pointer to type's VTABLE
   lw $t5, 0($t4)
   # Get pointer to function address
   lw $t6, 40($t5)
   # Call function. Result is on $v0
   jalr $t6
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_right_neighbor_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_cell_right_neighbor_at_CellularAutomaton_internal_0 = local_cell_right_neighbor_at_CellularAutomaton_internal_12
   lw $t4, -52($fp)
   sw $t4, -4($fp)
   label_ENDIF_8: 
# RETURN local_cell_right_neighbor_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_cell_right_neighbor_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 72
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_cell_at_next_evolution_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_at_next_evolution_at_CellularAutomaton_position_0
function_cell_at_next_evolution_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_at_next_evolution_at_CellularAutomaton.
   subu $sp, $sp, 132
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 132
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_6 = local_cell_at_next_evolution_at_CellularAutomaton_internal_8
   lw $t4, -36($fp)
   sw $t4, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
   # PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t4, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t4, 0($sp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_7 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 cell
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t4, 4($s1)
   # Get pointer to type's VTABLE
   lw $t5, 0($t4)
   # Get pointer to function address
   lw $t6, 40($t5)
   # Call function. Result is on $v0
   jalr $t6
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t4, String
   sw $t4, 0($v0)
   la $t4, String_start
   sw $t4, 4($v0)
   # Load type offset
   li $t4, 8
   sw $t4, 8($v0)
   la $t4, data_6
   sw $t4, 12($v0)
   li $t4, 1
   sw $t4, 16($v0)
   sw $v0, -40($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_9 --> -40($fp)
   lw $t4, -32($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_5 GOTO label_FALSEIF_11
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_5 GOTO label_FALSEIF_11
   lw $t5, -24($fp)
   beq $t5, 0, label_FALSEIF_11
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, Int
   sw $t5, 12($v0)
   li $t5, 3
   sw $t5, 16($v0)
   move $t5, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t5, 0($v0)
   la $t5, Int_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 16
   sw $t5, 8($v0)
   li $t5, 1
   sw $t5, 12($v0)
   sw $v0, -44($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_4 = local_cell_at_next_evolution_at_CellularAutomaton_internal_10
   lw $t5, -44($fp)
   sw $t5, -20($fp)
   # GOTO label_ENDIF_12
j label_ENDIF_12
label_FALSEIF_11: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t5, String
   sw $t5, 0($v0)
   la $t5, String_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 8
   sw $t5, 8($v0)
   la $t5, Int
   sw $t5, 12($v0)
   li $t5, 3
   sw $t5, 16($v0)
   move $t5, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t5, 0($v0)
   la $t5, Int_start
   sw $t5, 4($v0)
   # Load type offset
   li $t5, 16
   sw $t5, 8($v0)
   li $t5, 0
   sw $t5, 12($v0)
   sw $v0, -48($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_4 = local_cell_at_next_evolution_at_CellularAutomaton_internal_11
   lw $t5, -48($fp)
   sw $t5, -20($fp)
   label_ENDIF_12: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_16 = SELF
sw $s1, -68($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_14 = local_cell_at_next_evolution_at_CellularAutomaton_internal_16
lw $t5, -68($fp)
sw $t5, -60($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
# PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
lw $t5, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t5, 0($sp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_15 --> -64($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_15 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 cell_left_neighbor
# Save new self pointer in $s1
lw $s1, -60($fp)
# Get pointer to type
lw $t5, 4($s1)
# Get pointer to type's VTABLE
lw $t6, 0($t5)
# Get pointer to function address
lw $t7, 44($t6)
# Call function. Result is on $v0
jalr $t7
sw $v0, -64($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t5, String
sw $t5, 0($v0)
la $t5, String_start
sw $t5, 4($v0)
# Load type offset
li $t5, 8
sw $t5, 8($v0)
la $t5, data_7
sw $t5, 12($v0)
li $t5, 1
sw $t5, 16($v0)
sw $v0, -72($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 --> -56($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_15 --> -64($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_17 --> -72($fp)
lw $t5, -64($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_13 GOTO label_FALSEIF_13
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_13 GOTO label_FALSEIF_13
lw $t6, -56($fp)
beq $t6, 0, label_FALSEIF_13
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t6, String
sw $t6, 0($v0)
la $t6, String_start
sw $t6, 4($v0)
# Load type offset
li $t6, 8
sw $t6, 8($v0)
la $t6, Int
sw $t6, 12($v0)
li $t6, 3
sw $t6, 16($v0)
move $t6, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t6, 0($v0)
la $t6, Int_start
sw $t6, 4($v0)
# Load type offset
li $t6, 16
sw $t6, 8($v0)
li $t6, 1
sw $t6, 12($v0)
sw $v0, -76($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_12 = local_cell_at_next_evolution_at_CellularAutomaton_internal_18
lw $t6, -76($fp)
sw $t6, -52($fp)
# GOTO label_ENDIF_14
j label_ENDIF_14
label_FALSEIF_13: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t6, String
   sw $t6, 0($v0)
   la $t6, String_start
   sw $t6, 4($v0)
   # Load type offset
   li $t6, 8
   sw $t6, 8($v0)
   la $t6, Int
   sw $t6, 12($v0)
   li $t6, 3
   sw $t6, 16($v0)
   move $t6, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t6, 0($v0)
   la $t6, Int_start
   sw $t6, 4($v0)
   # Load type offset
   li $t6, 16
   sw $t6, 8($v0)
   li $t6, 0
   sw $t6, 12($v0)
   sw $v0, -80($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_12 = local_cell_at_next_evolution_at_CellularAutomaton_internal_19
   lw $t6, -80($fp)
   sw $t6, -52($fp)
   label_ENDIF_14: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_3 = local_cell_at_next_evolution_at_CellularAutomaton_internal_4 + local_cell_at_next_evolution_at_CellularAutomaton_internal_12
lw $t7, -20($fp)
lw $t6, 12($t7)
lw $t7, -52($fp)
lw $t8, 12($t7)
add $t6, $t6, $t8
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t7, String
sw $t7, 0($v0)
la $t7, String_start
sw $t7, 4($v0)
# Load type offset
li $t7, 8
sw $t7, 8($v0)
la $t7, Int
sw $t7, 12($v0)
li $t7, 3
sw $t7, 16($v0)
move $t7, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t7, 0($v0)
la $t7, Int_start
sw $t7, 4($v0)
# Load type offset
li $t7, 16
sw $t7, 8($v0)
sw $t6, 12($v0)
sw $v0, -16($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_24 = SELF
sw $s1, -100($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_22 = local_cell_at_next_evolution_at_CellularAutomaton_internal_24
lw $t6, -100($fp)
sw $t6, -92($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
# PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
lw $t6, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t6, 0($sp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_23 --> -96($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_23 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 cell_right_neighbor
# Save new self pointer in $s1
lw $s1, -92($fp)
# Get pointer to type
lw $t6, 4($s1)
# Get pointer to type's VTABLE
lw $t7, 0($t6)
# Get pointer to function address
lw $t8, 48($t7)
# Call function. Result is on $v0
jalr $t8
sw $v0, -96($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_25 --> -104($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t6, String
sw $t6, 0($v0)
la $t6, String_start
sw $t6, 4($v0)
# Load type offset
li $t6, 8
sw $t6, 8($v0)
la $t6, data_8
sw $t6, 12($v0)
li $t6, 1
sw $t6, 16($v0)
sw $v0, -104($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_23 --> -96($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_25 --> -104($fp)
lw $t6, -96($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_21 GOTO label_FALSEIF_15
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_21 GOTO label_FALSEIF_15
lw $t7, -88($fp)
beq $t7, 0, label_FALSEIF_15
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_26 --> -108($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t7, String
sw $t7, 0($v0)
la $t7, String_start
sw $t7, 4($v0)
# Load type offset
li $t7, 8
sw $t7, 8($v0)
la $t7, Int
sw $t7, 12($v0)
li $t7, 3
sw $t7, 16($v0)
move $t7, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t7, 0($v0)
la $t7, Int_start
sw $t7, 4($v0)
# Load type offset
li $t7, 16
sw $t7, 8($v0)
li $t7, 1
sw $t7, 12($v0)
sw $v0, -108($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_26 --> -108($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_20 = local_cell_at_next_evolution_at_CellularAutomaton_internal_26
lw $t7, -108($fp)
sw $t7, -84($fp)
# GOTO label_ENDIF_16
j label_ENDIF_16
label_FALSEIF_15: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_27 --> -112($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t7, String
   sw $t7, 0($v0)
   la $t7, String_start
   sw $t7, 4($v0)
   # Load type offset
   li $t7, 8
   sw $t7, 8($v0)
   la $t7, Int
   sw $t7, 12($v0)
   li $t7, 3
   sw $t7, 16($v0)
   move $t7, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t7, 0($v0)
   la $t7, Int_start
   sw $t7, 4($v0)
   # Load type offset
   li $t7, 16
   sw $t7, 8($v0)
   li $t7, 0
   sw $t7, 12($v0)
   sw $v0, -112($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_20 = local_cell_at_next_evolution_at_CellularAutomaton_internal_27
   lw $t7, -112($fp)
   sw $t7, -84($fp)
   label_ENDIF_16: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_2 = local_cell_at_next_evolution_at_CellularAutomaton_internal_3 + local_cell_at_next_evolution_at_CellularAutomaton_internal_20
lw $t8, -16($fp)
lw $t7, 12($t8)
lw $t8, -84($fp)
lw $t9, 12($t8)
add $t7, $t7, $t9
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t8, String
sw $t8, 0($v0)
la $t8, String_start
sw $t8, 4($v0)
# Load type offset
li $t8, 8
sw $t8, 8($v0)
la $t8, Int
sw $t8, 12($v0)
li $t8, 3
sw $t8, 16($v0)
move $t8, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t8, 0($v0)
la $t8, Int_start
sw $t8, 4($v0)
# Load type offset
li $t8, 16
sw $t8, 8($v0)
sw $t7, 12($v0)
sw $v0, -12($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_28 --> -116($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t7, String
sw $t7, 0($v0)
la $t7, String_start
sw $t7, 4($v0)
# Load type offset
li $t7, 8
sw $t7, 8($v0)
la $t7, Int
sw $t7, 12($v0)
li $t7, 3
sw $t7, 16($v0)
move $t7, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t7, 0($v0)
la $t7, Int_start
sw $t7, 4($v0)
# Load type offset
li $t7, 16
sw $t7, 8($v0)
li $t7, 1
sw $t7, 12($v0)
sw $v0, -116($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_28 --> -116($fp)
lw $t7, -12($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_9
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_9
lw $t8, -8($fp)
beq $t8, 0, label_FALSEIF_9
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_29 --> -120($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t8, String
sw $t8, 0($v0)
la $t8, String_start
sw $t8, 4($v0)
# Load type offset
li $t8, 8
sw $t8, 8($v0)
la $t8, data_9
sw $t8, 12($v0)
li $t8, 1
sw $t8, 16($v0)
sw $v0, -120($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_29 --> -120($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_0 = local_cell_at_next_evolution_at_CellularAutomaton_internal_29
lw $t8, -120($fp)
sw $t8, -4($fp)
# GOTO label_ENDIF_10
j label_ENDIF_10
label_FALSEIF_9: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_30 --> -124($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t8, String
   sw $t8, 0($v0)
   la $t8, String_start
   sw $t8, 4($v0)
   # Load type offset
   li $t8, 8
   sw $t8, 8($v0)
   la $t8, data_10
   sw $t8, 12($v0)
   li $t8, 1
   sw $t8, 16($v0)
   sw $v0, -124($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_30 --> -124($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_0 = local_cell_at_next_evolution_at_CellularAutomaton_internal_30
   lw $t8, -124($fp)
   sw $t8, -4($fp)
   label_ENDIF_10: 
# RETURN local_cell_at_next_evolution_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_cell_at_next_evolution_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 132
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_evolve_at_CellularAutomaton implementation.
# @Params:
function_evolve_at_CellularAutomaton: 
   # Allocate stack frame for function function_evolve_at_CellularAutomaton.
   subu $sp, $sp, 68
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 68
   # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
   # local_evolve_at_CellularAutomaton_position_0 = 0
   li $t8, 0
   sw $t8, -4($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_evolve_at_CellularAutomaton_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_evolve_at_CellularAutomaton_internal_2 = local_evolve_at_CellularAutomaton_internal_4
   lw $t8, -20($fp)
   sw $t8, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_evolve_at_CellularAutomaton_internal_3 = VCALL local_evolve_at_CellularAutomaton_internal_2 num_cells
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t8, 4($s1)
   # Get pointer to type's VTABLE
   lw $t9, 0($t8)
   # Get pointer to function address
   lw $s2, 36($t9)
   # Call function. Result is on $v0
   jalr $s2
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_evolve_at_CellularAutomaton_num_1 --> -8($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_evolve_at_CellularAutomaton_num_1 = local_evolve_at_CellularAutomaton_internal_3
   lw $t8, -16($fp)
   sw $t8, -8($fp)
   # LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t8, String
   sw $t8, 0($v0)
   la $t8, String_start
   sw $t8, 4($v0)
   # Load type offset
   li $t8, 8
   sw $t8, 8($v0)
   la $t8, data_0
   sw $t8, 12($v0)
   li $t8, 0
   sw $t8, 16($v0)
   sw $v0, -24($fp)
   label_WHILE_17: 
      # LOCAL local_evolve_at_CellularAutomaton_internal_6 --> -28($fp)
      # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
      # LOCAL local_evolve_at_CellularAutomaton_num_1 --> -8($fp)
      # local_evolve_at_CellularAutomaton_internal_6 = local_evolve_at_CellularAutomaton_position_0 - local_evolve_at_CellularAutomaton_num_1
      lw $t9, -4($fp)
      lw $t8, 12($t9)
      lw $t9, -8($fp)
      lw $s2, 12($t9)
      sub $t8, $t8, $s2
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t9, String
      sw $t9, 0($v0)
      la $t9, String_start
      sw $t9, 4($v0)
      # Load type offset
      li $t9, 8
      sw $t9, 8($v0)
      la $t9, Int
      sw $t9, 12($v0)
      li $t9, 3
      sw $t9, 16($v0)
      move $t9, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t9, 0($v0)
      la $t9, Int_start
      sw $t9, 4($v0)
      # Load type offset
      li $t9, 16
      sw $t9, 8($v0)
      sw $t8, 12($v0)
      sw $v0, -28($fp)
      # IF_GREATER_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_19
      # IF_GREATER_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_19
      lw $t8, -28($fp)
      bgt $t8, 0, label_FALSE_19
      # IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_19
      # IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_19
      lw $t8, -28($fp)
      beq $t8, 0, label_FALSE_19
      # LOCAL local_evolve_at_CellularAutomaton_internal_6 --> -28($fp)
      # local_evolve_at_CellularAutomaton_internal_6 = 1
      li $t8, 1
      sw $t8, -28($fp)
      # GOTO label_END_20
j label_END_20
label_FALSE_19: 
   # LOCAL local_evolve_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_evolve_at_CellularAutomaton_internal_6 = 0
   li $t8, 0
   sw $t8, -28($fp)
   label_END_20: 
# IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_WHILE_END_18
# IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_WHILE_END_18
lw $t8, -28($fp)
beq $t8, 0, label_WHILE_END_18
# LOCAL local_evolve_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
# local_evolve_at_CellularAutomaton_internal_7 = local_evolve_at_CellularAutomaton_temp_5
lw $t8, -24($fp)
sw $t8, -32($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_11 --> -48($fp)
# local_evolve_at_CellularAutomaton_internal_11 = SELF
sw $s1, -48($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_11 --> -48($fp)
# local_evolve_at_CellularAutomaton_internal_9 = local_evolve_at_CellularAutomaton_internal_11
lw $t8, -48($fp)
sw $t8, -40($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_evolve_at_CellularAutomaton_position_0
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
lw $t8, -4($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t8, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_10 --> -44($fp)
# local_evolve_at_CellularAutomaton_internal_10 = VCALL local_evolve_at_CellularAutomaton_internal_9 cell_at_next_evolution
# Save new self pointer in $s1
lw $s1, -40($fp)
# Get pointer to type
lw $t8, 4($s1)
# Get pointer to type's VTABLE
lw $t9, 0($t8)
# Get pointer to function address
lw $s2, 52($t9)
# Call function. Result is on $v0
jalr $s2
sw $v0, -44($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_evolve_at_CellularAutomaton_internal_10
# LOCAL local_evolve_at_CellularAutomaton_internal_10 --> -44($fp)
lw $t8, -44($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t8, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
# local_evolve_at_CellularAutomaton_internal_8 = VCALL local_evolve_at_CellularAutomaton_internal_7 concat
# Save new self pointer in $s1
lw $s1, -32($fp)
# Get pointer to type
lw $t8, 4($s1)
# Get pointer to type's VTABLE
lw $t9, 0($t8)
# Get pointer to function address
lw $s2, 12($t9)
# Call function. Result is on $v0
jalr $s2
sw $v0, -36($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
# local_evolve_at_CellularAutomaton_temp_5 = local_evolve_at_CellularAutomaton_internal_8
lw $t8, -36($fp)
sw $t8, -24($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_13 --> -56($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t8, String
sw $t8, 0($v0)
la $t8, String_start
sw $t8, 4($v0)
# Load type offset
li $t8, 8
sw $t8, 8($v0)
la $t8, Int
sw $t8, 12($v0)
li $t8, 3
sw $t8, 16($v0)
move $t8, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t8, 0($v0)
la $t8, Int_start
sw $t8, 4($v0)
# Load type offset
li $t8, 16
sw $t8, 8($v0)
li $t8, 1
sw $t8, 12($v0)
sw $v0, -56($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_12 --> -52($fp)
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_13 --> -56($fp)
# local_evolve_at_CellularAutomaton_internal_12 = local_evolve_at_CellularAutomaton_position_0 + local_evolve_at_CellularAutomaton_internal_13
lw $t9, -4($fp)
lw $t8, 12($t9)
lw $t9, -56($fp)
lw $s2, 12($t9)
add $t8, $t8, $s2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t9, String
sw $t9, 0($v0)
la $t9, String_start
sw $t9, 4($v0)
# Load type offset
li $t9, 8
sw $t9, 8($v0)
la $t9, Int
sw $t9, 12($v0)
li $t9, 3
sw $t9, 16($v0)
move $t9, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t9, 0($v0)
la $t9, Int_start
sw $t9, 4($v0)
# Load type offset
li $t9, 16
sw $t9, 8($v0)
sw $t8, 12($v0)
sw $v0, -52($fp)
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_12 --> -52($fp)
# local_evolve_at_CellularAutomaton_position_0 = local_evolve_at_CellularAutomaton_internal_12
lw $t8, -52($fp)
sw $t8, -4($fp)
# GOTO label_WHILE_17
j label_WHILE_17
label_WHILE_END_18: 
   # 
   # LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
   lw $t8, -24($fp)
   sw $t8, 12($s1)
   # LOCAL local_evolve_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_evolve_at_CellularAutomaton_internal_14 = SELF
   sw $s1, -60($fp)
   # RETURN local_evolve_at_CellularAutomaton_internal_14
   lw $v0, -60($fp)
   # Deallocate stack frame for function function_evolve_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 68
   jr $ra
   # Function END



# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Sun Dec  6 00:50:21 2020
# School of Math and Computer Science, University of Havana
# 

.data
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Board:   .asciiz    "Board"
# Function END
CellularAutomaton:   .asciiz    "CellularAutomaton"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_concat_at_String, function_substr_at_String, function_length_at_String
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Board ****
Board_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_size_of_board_at_Board, function_board_init_at_Board
# Function END
# 


#  **** Type RECORD for type Board ****
Board_start: 
   Board_vtable_pointer:   .word    Board_vtable
   # Function END
Board_end: 
# 


#  **** VTABLE for type CellularAutomaton ****
CellularAutomaton_vtable:   .word    function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_size_of_board_at_Board, function_board_init_at_Board, function_init_at_CellularAutomaton, function_print_at_CellularAutomaton, function_num_cells_at_CellularAutomaton, function_cell_at_CellularAutomaton, function_north_at_CellularAutomaton, function_south_at_CellularAutomaton, function_east_at_CellularAutomaton, function_west_at_CellularAutomaton, function_northwest_at_CellularAutomaton, function_northeast_at_CellularAutomaton, function_southeast_at_CellularAutomaton, function_southwest_at_CellularAutomaton, function_neighbors_at_CellularAutomaton, function_cell_at_next_evolution_at_CellularAutomaton, function_evolve_at_CellularAutomaton, function_option_at_CellularAutomaton, function_prompt_at_CellularAutomaton, function_prompt2_at_CellularAutomaton
# Function END
# 


#  **** Type RECORD for type CellularAutomaton ****
CellularAutomaton_start: 
   CellularAutomaton_vtable_pointer:   .word    CellularAutomaton_vtable
   # Function END
CellularAutomaton_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_CellularAutomaton, function_type_name_at_CellularAutomaton, function_copy_at_CellularAutomaton, function_out_string_at_CellularAutomaton, function_out_int_at_CellularAutomaton, function_in_string_at_CellularAutomaton, function_in_int_at_CellularAutomaton, function_size_of_board_at_Board, function_board_init_at_Board, function_init_at_CellularAutomaton, function_print_at_CellularAutomaton, function_num_cells_at_CellularAutomaton, function_cell_at_CellularAutomaton, function_north_at_CellularAutomaton, function_south_at_CellularAutomaton, function_east_at_CellularAutomaton, function_west_at_CellularAutomaton, function_northwest_at_CellularAutomaton, function_northeast_at_CellularAutomaton, function_southeast_at_CellularAutomaton, function_southwest_at_CellularAutomaton, function_neighbors_at_CellularAutomaton, function_cell_at_next_evolution_at_CellularAutomaton, function_evolve_at_CellularAutomaton, function_option_at_CellularAutomaton, function_prompt_at_CellularAutomaton, function_prompt2_at_CellularAutomaton, function_main_at_Main
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


IO__TDT:   .word    0, -1, -1, -1, 1, 2, 3
Object__TDT:   .word    1, 0, 1, 1, 2, 3, 4
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1
Board__TDT:   .word    -1, -1, -1, -1, 0, 1, 2
CellularAutomaton__TDT:   .word    -1, -1, -1, -1, -1, 0, 1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, 0
# 


data_2:   .asciiz    "\n"
# 


data_3:   .asciiz    "\n"
# 


data_4:   .asciiz    "\n"
# 


data_5:   .asciiz    " "
# 


data_6:   .asciiz    " "
# 


data_7:   .asciiz    " "
# 


data_8:   .asciiz    " "
# 


data_9:   .asciiz    " "
# 


data_10:   .asciiz    " "
# 


data_11:   .asciiz    " "
# 


data_12:   .asciiz    " "
# 


data_13:   .asciiz    " "
# 


data_14:   .asciiz    " "
# 


data_15:   .asciiz    " "
# 


data_16:   .asciiz    " "
# 


data_17:   .asciiz    " "
# 


data_18:   .asciiz    " "
# 


data_19:   .asciiz    "X"
# 


data_20:   .asciiz    "X"
# 


data_21:   .asciiz    "X"
# 


data_22:   .asciiz    "X"
# 


data_23:   .asciiz    "X"
# 


data_24:   .asciiz    "X"
# 


data_25:   .asciiz    "X"
# 


data_26:   .asciiz    "X"
# 


data_27:   .asciiz    "X"
# 


data_28:   .asciiz    "X"
# 


data_29:   .asciiz    "X"
# 


data_30:   .asciiz    "-"
# 


data_31:   .asciiz    "-"
# 


data_32:   .asciiz    "\nPlease chose a number:\n"
# 


data_33:   .asciiz    "\t1: A cross\n"
# 


data_34:   .asciiz    "\t2: A slash from the upper left to lower right\n"
# 


data_35:   .asciiz    "\t3: A slash from the upper right to lower left\n"
# 


data_36:   .asciiz    "\t4: An X\n"
# 


data_37:   .asciiz    "\t5: A greater than sign \n"
# 


data_38:   .asciiz    "\t6: A less than sign\n"
# 


data_39:   .asciiz    "\t7: Two greater than signs\n"
# 


data_40:   .asciiz    "\t8: Two less than signs\n"
# 


data_41:   .asciiz    "\t9: A 'V'\n"
# 


data_42:   .asciiz    "\t10: An inverse 'V'\n"
# 


data_43:   .asciiz    "\t11: Numbers 9 and 10 combined\n"
# 


data_44:   .asciiz    "\t12: A full grid\n"
# 


data_45:   .asciiz    "\t13: A 'T'\n"
# 


data_46:   .asciiz    "\t14: A plus '+'\n"
# 


data_47:   .asciiz    "\t15: A 'W'\n"
# 


data_48:   .asciiz    "\t16: An 'M'\n"
# 


data_49:   .asciiz    "\t17: An 'E'\n"
# 


data_50:   .asciiz    "\t18: A '3'\n"
# 


data_51:   .asciiz    "\t19: An 'O'\n"
# 


data_52:   .asciiz    "\t20: An '8'\n"
# 


data_53:   .asciiz    "\t21: An 'S'\n"
# 


data_54:   .asciiz    "Your choice => "
# 


data_55:   .asciiz    "\n"
# 


data_56:   .asciiz    " XX  XXXX XXXX  XX  "
# 


data_57:   .asciiz    "    X   X   X   X   X    "
# 


data_58:   .asciiz    "X     X     X     X     X"
# 


data_59:   .asciiz    "X   X X X   X   X X X   X"
# 


data_60:   .asciiz    "X     X     X   X   X    "
# 


data_61:   .asciiz    "    X   X   X     X     X"
# 


data_62:   .asciiz    "X  X  X  XX  X      "
# 


data_63:   .asciiz    " X  XX  X  X  X     "
# 


data_64:   .asciiz    "X   X X X   X  "
# 


data_65:   .asciiz    "  X   X X X   X"
# 


data_66:   .asciiz    "X X X X X X X X"
# 


data_67:   .asciiz    "XXXXXXXXXXXXXXXXXXXXXXXXX"
# 


data_68:   .asciiz    "XXXXX  X    X    X    X  "
# 


data_69:   .asciiz    "  X    X  XXXXX  X    X  "
# 


data_70:   .asciiz    "X     X X X X   X X  "
# 


data_71:   .asciiz    "  X X   X X X X     X"
# 


data_72:   .asciiz    "XXXXX   X   XXXXX   X   XXXX"
# 


data_73:   .asciiz    "XXX    X   X  X    X   XXXX "
# 


data_74:   .asciiz    " XX X  XX  X XX "
# 


data_75:   .asciiz    " XX X  XX  X XX X  XX  X XX "
# 


data_76:   .asciiz    " XXXX   X    XX    X   XXXX "
# 


data_77:   .asciiz    "                         "
# 


data_78:   .asciiz    "Would you like to continue with the next generation? \n"
# 


data_79:   .asciiz    "Please use lowercase y or n for your answer [y]: "
# 


data_80:   .asciiz    "\n"
# 


data_81:   .asciiz    "n"
# 


data_82:   .asciiz    "\n\n"
# 


data_83:   .asciiz    "Would you like to choose a background pattern? \n"
# 


data_84:   .asciiz    "Please use lowercase y or n for your answer [n]: "
# 


data_85:   .asciiz    "y"
# 


data_86:   .asciiz    "Welcome to the Game of Life.\n"
# 


data_87:   .asciiz    "There are many initial states to choose from. \n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   li $a0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f8327d87640>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_length_at_String_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t2, String
   sw $t2, 0($v0)
   la $t2, String_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 8
   sw $t2, 8($v0)
   la $t2, Main
   sw $t2, 12($v0)
   li $t2, 4
   sw $t2, 16($v0)
   move $t2, $v0
   # Allocating 32 bytes of memory
   li $a0, 32
   li $v0, 9
   syscall
   sw $t2, 0($v0)
   la $t2, Main_start
   sw $t2, 4($v0)
   # Load type offset
   li $t2, 24
   sw $t2, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Board__attrib__rows__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Board__attrib__columns__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Board__attrib__board_size__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __CellularAutomaton__attrib__population_map__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__cells__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t1, Main_vtable
   # Get pointer to function address
   lw $t2, 108($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Board__attrib__rows__init implementation.
# @Params:
__Board__attrib__rows__init: 
   # Allocate stack frame for function __Board__attrib__rows__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Board__attrib__rows__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Board__attrib__columns__init implementation.
# @Params:
__Board__attrib__columns__init: 
   # Allocate stack frame for function __Board__attrib__columns__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Board__attrib__columns__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Board__attrib__board_size__init implementation.
# @Params:
__Board__attrib__board_size__init: 
   # Allocate stack frame for function __Board__attrib__board_size__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Board__attrib__board_size__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_size_of_board_at_Board implementation.
# @Params:
# 	0($fp) = param_size_of_board_at_Board_initial_0
function_size_of_board_at_Board: 
   # Allocate stack frame for function function_size_of_board_at_Board.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_size_of_board_at_Board_internal_0 --> -4($fp)
   # PARAM param_size_of_board_at_Board_initial_0 --> 0($fp)
   # local_size_of_board_at_Board_internal_0 = PARAM param_size_of_board_at_Board_initial_0
   lw $t1, 0($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_size_of_board_at_Board_internal_0 --> -4($fp)
   # LOCAL local_size_of_board_at_Board_internal_1 --> -8($fp)
   # local_size_of_board_at_Board_internal_1 = VCALL local_size_of_board_at_Board_internal_0 length
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 20($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_size_of_board_at_Board_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_size_of_board_at_Board.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_board_init_at_Board implementation.
# @Params:
# 	0($fp) = param_board_init_at_Board_start_0
function_board_init_at_Board: 
   # Allocate stack frame for function function_board_init_at_Board.
   subu $sp, $sp, 76
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 76
   # LOCAL local_board_init_at_Board_internal_3 --> -16($fp)
   # local_board_init_at_Board_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_board_init_at_Board_internal_1 --> -8($fp)
   # LOCAL local_board_init_at_Board_internal_3 --> -16($fp)
   # local_board_init_at_Board_internal_1 = local_board_init_at_Board_internal_3
   lw $t1, -16($fp)
   sw $t1, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_board_init_at_Board_start_0
   # PARAM param_board_init_at_Board_start_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_board_init_at_Board_internal_1 --> -8($fp)
   # LOCAL local_board_init_at_Board_internal_2 --> -12($fp)
   # local_board_init_at_Board_internal_2 = VCALL local_board_init_at_Board_internal_1 size_of_board
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 28($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_2 --> -12($fp)
   # local_board_init_at_Board_size_0 = local_board_init_at_Board_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # LOCAL local_board_init_at_Board_internal_5 --> -24($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # local_board_init_at_Board_internal_5 = local_board_init_at_Board_size_0 - 15
   lw $t1, -4($fp)
   sub $t1, $t1, 15
   sw $t1, -24($fp)
   # IF_ZERO local_board_init_at_Board_internal_5 GOTO label_TRUE_3
   # IF_ZERO local_board_init_at_Board_internal_5 GOTO label_TRUE_3
   lw $t1, -24($fp)
   beq $t1, 0, label_TRUE_3
   # LOCAL local_board_init_at_Board_internal_5 --> -24($fp)
   # local_board_init_at_Board_internal_5 = 0
   li $t1, 0
   sw $t1, -24($fp)
   # GOTO label_END_4
j label_END_4
label_TRUE_3: 
   # LOCAL local_board_init_at_Board_internal_5 --> -24($fp)
   # local_board_init_at_Board_internal_5 = 1
   li $t1, 1
   sw $t1, -24($fp)
   label_END_4: 
# IF_ZERO local_board_init_at_Board_internal_5 GOTO label_FALSEIF_1
# IF_ZERO local_board_init_at_Board_internal_5 GOTO label_FALSEIF_1
lw $t1, -24($fp)
beq $t1, 0, label_FALSEIF_1
# 
li $t1, 3
sw $t1, 12($s1)
# 
li $t1, 5
sw $t1, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t1, -4($fp)
sw $t1, 20($s1)
# LOCAL local_board_init_at_Board_internal_4 --> -20($fp)
# local_board_init_at_Board_internal_4 = 
# GOTO label_ENDIF_2
j label_ENDIF_2
label_FALSEIF_1: 
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # local_board_init_at_Board_internal_7 = local_board_init_at_Board_size_0 - 16
   lw $t1, -4($fp)
   sub $t1, $t1, 16
   sw $t1, -32($fp)
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_7
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_7
   lw $t1, -32($fp)
   beq $t1, 0, label_TRUE_7
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # local_board_init_at_Board_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   # GOTO label_END_8
j label_END_8
label_TRUE_7: 
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # local_board_init_at_Board_internal_7 = 1
   li $t1, 1
   sw $t1, -32($fp)
   label_END_8: 
# IF_ZERO local_board_init_at_Board_internal_7 GOTO label_FALSEIF_5
# IF_ZERO local_board_init_at_Board_internal_7 GOTO label_FALSEIF_5
lw $t1, -32($fp)
beq $t1, 0, label_FALSEIF_5
# 
li $t1, 4
sw $t1, 12($s1)
# 
li $t1, 4
sw $t1, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t1, -4($fp)
sw $t1, 20($s1)
# LOCAL local_board_init_at_Board_internal_6 --> -28($fp)
# local_board_init_at_Board_internal_6 = 
# GOTO label_ENDIF_6
j label_ENDIF_6
label_FALSEIF_5: 
   # LOCAL local_board_init_at_Board_internal_9 --> -40($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # local_board_init_at_Board_internal_9 = local_board_init_at_Board_size_0 - 20
   lw $t1, -4($fp)
   sub $t1, $t1, 20
   sw $t1, -40($fp)
   # IF_ZERO local_board_init_at_Board_internal_9 GOTO label_TRUE_11
   # IF_ZERO local_board_init_at_Board_internal_9 GOTO label_TRUE_11
   lw $t1, -40($fp)
   beq $t1, 0, label_TRUE_11
   # LOCAL local_board_init_at_Board_internal_9 --> -40($fp)
   # local_board_init_at_Board_internal_9 = 0
   li $t1, 0
   sw $t1, -40($fp)
   # GOTO label_END_12
j label_END_12
label_TRUE_11: 
   # LOCAL local_board_init_at_Board_internal_9 --> -40($fp)
   # local_board_init_at_Board_internal_9 = 1
   li $t1, 1
   sw $t1, -40($fp)
   label_END_12: 
# IF_ZERO local_board_init_at_Board_internal_9 GOTO label_FALSEIF_9
# IF_ZERO local_board_init_at_Board_internal_9 GOTO label_FALSEIF_9
lw $t1, -40($fp)
beq $t1, 0, label_FALSEIF_9
# 
li $t1, 4
sw $t1, 12($s1)
# 
li $t1, 5
sw $t1, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t1, -4($fp)
sw $t1, 20($s1)
# LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
# local_board_init_at_Board_internal_8 = 
# GOTO label_ENDIF_10
j label_ENDIF_10
label_FALSEIF_9: 
   # LOCAL local_board_init_at_Board_internal_11 --> -48($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # local_board_init_at_Board_internal_11 = local_board_init_at_Board_size_0 - 21
   lw $t1, -4($fp)
   sub $t1, $t1, 21
   sw $t1, -48($fp)
   # IF_ZERO local_board_init_at_Board_internal_11 GOTO label_TRUE_15
   # IF_ZERO local_board_init_at_Board_internal_11 GOTO label_TRUE_15
   lw $t1, -48($fp)
   beq $t1, 0, label_TRUE_15
   # LOCAL local_board_init_at_Board_internal_11 --> -48($fp)
   # local_board_init_at_Board_internal_11 = 0
   li $t1, 0
   sw $t1, -48($fp)
   # GOTO label_END_16
j label_END_16
label_TRUE_15: 
   # LOCAL local_board_init_at_Board_internal_11 --> -48($fp)
   # local_board_init_at_Board_internal_11 = 1
   li $t1, 1
   sw $t1, -48($fp)
   label_END_16: 
# IF_ZERO local_board_init_at_Board_internal_11 GOTO label_FALSEIF_13
# IF_ZERO local_board_init_at_Board_internal_11 GOTO label_FALSEIF_13
lw $t1, -48($fp)
beq $t1, 0, label_FALSEIF_13
# 
li $t1, 3
sw $t1, 12($s1)
# 
li $t1, 7
sw $t1, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t1, -4($fp)
sw $t1, 20($s1)
# LOCAL local_board_init_at_Board_internal_10 --> -44($fp)
# local_board_init_at_Board_internal_10 = 
# GOTO label_ENDIF_14
j label_ENDIF_14
label_FALSEIF_13: 
   # LOCAL local_board_init_at_Board_internal_13 --> -56($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # local_board_init_at_Board_internal_13 = local_board_init_at_Board_size_0 - 25
   lw $t1, -4($fp)
   sub $t1, $t1, 25
   sw $t1, -56($fp)
   # IF_ZERO local_board_init_at_Board_internal_13 GOTO label_TRUE_19
   # IF_ZERO local_board_init_at_Board_internal_13 GOTO label_TRUE_19
   lw $t1, -56($fp)
   beq $t1, 0, label_TRUE_19
   # LOCAL local_board_init_at_Board_internal_13 --> -56($fp)
   # local_board_init_at_Board_internal_13 = 0
   li $t1, 0
   sw $t1, -56($fp)
   # GOTO label_END_20
j label_END_20
label_TRUE_19: 
   # LOCAL local_board_init_at_Board_internal_13 --> -56($fp)
   # local_board_init_at_Board_internal_13 = 1
   li $t1, 1
   sw $t1, -56($fp)
   label_END_20: 
# IF_ZERO local_board_init_at_Board_internal_13 GOTO label_FALSEIF_17
# IF_ZERO local_board_init_at_Board_internal_13 GOTO label_FALSEIF_17
lw $t1, -56($fp)
beq $t1, 0, label_FALSEIF_17
# 
li $t1, 5
sw $t1, 12($s1)
# 
li $t1, 5
sw $t1, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t1, -4($fp)
sw $t1, 20($s1)
# LOCAL local_board_init_at_Board_internal_12 --> -52($fp)
# local_board_init_at_Board_internal_12 = 
# GOTO label_ENDIF_18
j label_ENDIF_18
label_FALSEIF_17: 
   # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # local_board_init_at_Board_internal_15 = local_board_init_at_Board_size_0 - 28
   lw $t1, -4($fp)
   sub $t1, $t1, 28
   sw $t1, -64($fp)
   # IF_ZERO local_board_init_at_Board_internal_15 GOTO label_TRUE_23
   # IF_ZERO local_board_init_at_Board_internal_15 GOTO label_TRUE_23
   lw $t1, -64($fp)
   beq $t1, 0, label_TRUE_23
   # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
   # local_board_init_at_Board_internal_15 = 0
   li $t1, 0
   sw $t1, -64($fp)
   # GOTO label_END_24
j label_END_24
label_TRUE_23: 
   # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
   # local_board_init_at_Board_internal_15 = 1
   li $t1, 1
   sw $t1, -64($fp)
   label_END_24: 
# IF_ZERO local_board_init_at_Board_internal_15 GOTO label_FALSEIF_21
# IF_ZERO local_board_init_at_Board_internal_15 GOTO label_FALSEIF_21
lw $t1, -64($fp)
beq $t1, 0, label_FALSEIF_21
# 
li $t1, 7
sw $t1, 12($s1)
# 
li $t1, 4
sw $t1, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t1, -4($fp)
sw $t1, 20($s1)
# LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
# local_board_init_at_Board_internal_14 = 
# GOTO label_ENDIF_22
j label_ENDIF_22
label_FALSEIF_21: 
   # 
   li $t1, 5
   sw $t1, 12($s1)
   # 
   li $t1, 5
   sw $t1, 16($s1)
   # 
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   lw $t1, -4($fp)
   sw $t1, 20($s1)
   # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
   # local_board_init_at_Board_internal_14 = 
   label_ENDIF_22: 
# LOCAL local_board_init_at_Board_internal_12 --> -52($fp)
# LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
# local_board_init_at_Board_internal_12 = local_board_init_at_Board_internal_14
lw $t1, -60($fp)
sw $t1, -52($fp)
label_ENDIF_18: 
# LOCAL local_board_init_at_Board_internal_10 --> -44($fp)
# LOCAL local_board_init_at_Board_internal_12 --> -52($fp)
# local_board_init_at_Board_internal_10 = local_board_init_at_Board_internal_12
lw $t1, -52($fp)
sw $t1, -44($fp)
label_ENDIF_14: 
# LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
# LOCAL local_board_init_at_Board_internal_10 --> -44($fp)
# local_board_init_at_Board_internal_8 = local_board_init_at_Board_internal_10
lw $t1, -44($fp)
sw $t1, -36($fp)
label_ENDIF_10: 
# LOCAL local_board_init_at_Board_internal_6 --> -28($fp)
# LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
# local_board_init_at_Board_internal_6 = local_board_init_at_Board_internal_8
lw $t1, -36($fp)
sw $t1, -28($fp)
label_ENDIF_6: 
# LOCAL local_board_init_at_Board_internal_4 --> -20($fp)
# LOCAL local_board_init_at_Board_internal_6 --> -28($fp)
# local_board_init_at_Board_internal_4 = local_board_init_at_Board_internal_6
lw $t1, -28($fp)
sw $t1, -20($fp)
label_ENDIF_2: 
# LOCAL local_board_init_at_Board_internal_16 --> -68($fp)
# local_board_init_at_Board_internal_16 = SELF
sw $s1, -68($fp)
# RETURN local_board_init_at_Board_internal_16
lw $v0, -68($fp)
# Deallocate stack frame for function function_board_init_at_Board.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 76
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# __CellularAutomaton__attrib__population_map__init implementation.
# @Params:
__CellularAutomaton__attrib__population_map__init: 
   # Allocate stack frame for function __CellularAutomaton__attrib__population_map__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_rAutomaton__attrib__population_map__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_0
   sw $t1, 12($v0)
   li $t1, 0
   sw $t1, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_rAutomaton__attrib__population_map__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __CellularAutomaton__attrib__population_map__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_init_at_CellularAutomaton_map_0
function_init_at_CellularAutomaton: 
   # Allocate stack frame for function function_init_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_CellularAutomaton_map_0 --> 0($fp)
   lw $t1, 0($fp)
   sw $t1, 24($s1)
   # LOCAL local_init_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_init_at_CellularAutomaton_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_init_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_init_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_init_at_CellularAutomaton_internal_0 = local_init_at_CellularAutomaton_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_init_at_CellularAutomaton_map_0
   # PARAM param_init_at_CellularAutomaton_map_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_init_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_init_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_init_at_CellularAutomaton_internal_1 = VCALL local_init_at_CellularAutomaton_internal_0 board_init
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 32($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_init_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_init_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_init_at_CellularAutomaton_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_init_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_print_at_CellularAutomaton implementation.
# @Params:
function_print_at_CellularAutomaton: 
   # Allocate stack frame for function function_print_at_CellularAutomaton.
   subu $sp, $sp, 112
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 112
   # LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
   # local_print_at_CellularAutomaton_i_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # local_print_at_CellularAutomaton_internal_2 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_print_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t1, 20($s1)
   sw $t1, -12($fp)
   # LOCAL local_print_at_CellularAutomaton_num_1 --> -8($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_print_at_CellularAutomaton_num_1 = local_print_at_CellularAutomaton_internal_2
   lw $t1, -12($fp)
   sw $t1, -8($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_print_at_CellularAutomaton_internal_5 = SELF
   sw $s1, -24($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_print_at_CellularAutomaton_internal_3 = local_print_at_CellularAutomaton_internal_5
   lw $t1, -24($fp)
   sw $t1, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_2
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -28($fp)
   # ARG local_print_at_CellularAutomaton_internal_6
   # LOCAL local_print_at_CellularAutomaton_internal_6 --> -28($fp)
   lw $t1, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_print_at_CellularAutomaton_internal_4 = VCALL local_print_at_CellularAutomaton_internal_3 out_string
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_WHILE_25: 
      # LOCAL local_print_at_CellularAutomaton_internal_7 --> -32($fp)
      # LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
      # LOCAL local_print_at_CellularAutomaton_num_1 --> -8($fp)
      # local_print_at_CellularAutomaton_internal_7 = local_print_at_CellularAutomaton_i_0 - local_print_at_CellularAutomaton_num_1
      lw $t1, -4($fp)
      lw $t2, -8($fp)
      sub $t1, $t1, $t2
      sw $t1, -32($fp)
      # IF_GREATER_ZERO local_print_at_CellularAutomaton_internal_7 GOTO label_FALSE_27
      # IF_GREATER_ZERO local_print_at_CellularAutomaton_internal_7 GOTO label_FALSE_27
      lw $t1, -32($fp)
      bgt $t1, 0, label_FALSE_27
      # IF_ZERO local_print_at_CellularAutomaton_internal_7 GOTO label_FALSE_27
      # IF_ZERO local_print_at_CellularAutomaton_internal_7 GOTO label_FALSE_27
      lw $t1, -32($fp)
      beq $t1, 0, label_FALSE_27
      # LOCAL local_print_at_CellularAutomaton_internal_7 --> -32($fp)
      # local_print_at_CellularAutomaton_internal_7 = 1
      li $t1, 1
      sw $t1, -32($fp)
      # GOTO label_END_28
j label_END_28
label_FALSE_27: 
   # LOCAL local_print_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_print_at_CellularAutomaton_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   label_END_28: 
# IF_ZERO local_print_at_CellularAutomaton_internal_7 GOTO label_WHILE_END_26
# IF_ZERO local_print_at_CellularAutomaton_internal_7 GOTO label_WHILE_END_26
lw $t1, -32($fp)
beq $t1, 0, label_WHILE_END_26
# LOCAL local_print_at_CellularAutomaton_internal_10 --> -44($fp)
# local_print_at_CellularAutomaton_internal_10 = SELF
sw $s1, -44($fp)
# LOCAL local_print_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_print_at_CellularAutomaton_internal_10 --> -44($fp)
# local_print_at_CellularAutomaton_internal_8 = local_print_at_CellularAutomaton_internal_10
lw $t1, -44($fp)
sw $t1, -36($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_print_at_CellularAutomaton_internal_13 = GETATTRIBUTE population_map CellularAutomaton
# LOCAL local_print_at_CellularAutomaton_internal_13 --> -56($fp)
lw $t1, 24($s1)
sw $t1, -56($fp)
# LOCAL local_print_at_CellularAutomaton_internal_11 --> -48($fp)
# LOCAL local_print_at_CellularAutomaton_internal_13 --> -56($fp)
# local_print_at_CellularAutomaton_internal_11 = local_print_at_CellularAutomaton_internal_13
lw $t1, -56($fp)
sw $t1, -48($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_print_at_CellularAutomaton_i_0
# LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
lw $t1, -4($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# local_print_at_CellularAutomaton_internal_14 = GETATTRIBUTE columns CellularAutomaton
# LOCAL local_print_at_CellularAutomaton_internal_14 --> -60($fp)
lw $t1, 16($s1)
sw $t1, -60($fp)
# ARG local_print_at_CellularAutomaton_internal_14
# LOCAL local_print_at_CellularAutomaton_internal_14 --> -60($fp)
lw $t1, -60($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_11 --> -48($fp)
# LOCAL local_print_at_CellularAutomaton_internal_12 --> -52($fp)
# local_print_at_CellularAutomaton_internal_12 = VCALL local_print_at_CellularAutomaton_internal_11 substr
# Save new self pointer in $s1
lw $s1, -48($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 16($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -52($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_print_at_CellularAutomaton_internal_12
# LOCAL local_print_at_CellularAutomaton_internal_12 --> -52($fp)
lw $t1, -52($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_print_at_CellularAutomaton_internal_9 --> -40($fp)
# local_print_at_CellularAutomaton_internal_9 = VCALL local_print_at_CellularAutomaton_internal_8 out_string
# Save new self pointer in $s1
lw $s1, -36($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 12($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -40($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_print_at_CellularAutomaton_internal_17 --> -72($fp)
# local_print_at_CellularAutomaton_internal_17 = SELF
sw $s1, -72($fp)
# LOCAL local_print_at_CellularAutomaton_internal_15 --> -64($fp)
# LOCAL local_print_at_CellularAutomaton_internal_17 --> -72($fp)
# local_print_at_CellularAutomaton_internal_15 = local_print_at_CellularAutomaton_internal_17
lw $t1, -72($fp)
sw $t1, -64($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_18 --> -76($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_3
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -76($fp)
# ARG local_print_at_CellularAutomaton_internal_18
# LOCAL local_print_at_CellularAutomaton_internal_18 --> -76($fp)
lw $t1, -76($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_15 --> -64($fp)
# LOCAL local_print_at_CellularAutomaton_internal_16 --> -68($fp)
# local_print_at_CellularAutomaton_internal_16 = VCALL local_print_at_CellularAutomaton_internal_15 out_string
# Save new self pointer in $s1
lw $s1, -64($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 12($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -68($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# local_print_at_CellularAutomaton_internal_20 = GETATTRIBUTE columns CellularAutomaton
# LOCAL local_print_at_CellularAutomaton_internal_20 --> -84($fp)
lw $t1, 16($s1)
sw $t1, -84($fp)
# LOCAL local_print_at_CellularAutomaton_internal_19 --> -80($fp)
# LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
# LOCAL local_print_at_CellularAutomaton_internal_20 --> -84($fp)
# local_print_at_CellularAutomaton_internal_19 = local_print_at_CellularAutomaton_i_0 + local_print_at_CellularAutomaton_internal_20
lw $t1, -4($fp)
lw $t2, -84($fp)
add $t1, $t1, $t2
sw $t1, -80($fp)
# LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
# LOCAL local_print_at_CellularAutomaton_internal_19 --> -80($fp)
# local_print_at_CellularAutomaton_i_0 = local_print_at_CellularAutomaton_internal_19
lw $t1, -80($fp)
sw $t1, -4($fp)
# GOTO label_WHILE_25
j label_WHILE_25
label_WHILE_END_26: 
   # LOCAL local_print_at_CellularAutomaton_internal_23 --> -96($fp)
   # local_print_at_CellularAutomaton_internal_23 = SELF
   sw $s1, -96($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_21 --> -88($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_23 --> -96($fp)
   # local_print_at_CellularAutomaton_internal_21 = local_print_at_CellularAutomaton_internal_23
   lw $t1, -96($fp)
   sw $t1, -88($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_24 --> -100($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_4
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -100($fp)
   # ARG local_print_at_CellularAutomaton_internal_24
   # LOCAL local_print_at_CellularAutomaton_internal_24 --> -100($fp)
   lw $t1, -100($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_21 --> -88($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_print_at_CellularAutomaton_internal_22 = VCALL local_print_at_CellularAutomaton_internal_21 out_string
   # Save new self pointer in $s1
   lw $s1, -88($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -92($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_CellularAutomaton_internal_25 --> -104($fp)
   # local_print_at_CellularAutomaton_internal_25 = SELF
   sw $s1, -104($fp)
   # RETURN local_print_at_CellularAutomaton_internal_25
   lw $v0, -104($fp)
   # Deallocate stack frame for function function_print_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 112
   jr $ra
   # Function END


# function_num_cells_at_CellularAutomaton implementation.
# @Params:
function_num_cells_at_CellularAutomaton: 
   # Allocate stack frame for function function_num_cells_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_num_cells_at_CellularAutomaton_internal_2 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_num_cells_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t1, 24($s1)
   sw $t1, -12($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_num_cells_at_CellularAutomaton_internal_0 = local_num_cells_at_CellularAutomaton_internal_2
   lw $t1, -12($fp)
   sw $t1, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_num_cells_at_CellularAutomaton_internal_1 = VCALL local_num_cells_at_CellularAutomaton_internal_0 length
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 20($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_num_cells_at_CellularAutomaton_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_num_cells_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cell_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_at_CellularAutomaton_position_0
function_cell_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_at_CellularAutomaton.
   subu $sp, $sp, 40
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 40
   # local_cell_at_CellularAutomaton_internal_3 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_cell_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t1, 20($s1)
   sw $t1, -16($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_cell_at_CellularAutomaton_internal_2 = local_cell_at_CellularAutomaton_internal_3 - 1
   lw $t1, -16($fp)
   sub $t1, $t1, 1
   sw $t1, -12($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   # PARAM param_cell_at_CellularAutomaton_position_0 --> 0($fp)
   # local_cell_at_CellularAutomaton_internal_1 = local_cell_at_CellularAutomaton_internal_2 - PARAM param_cell_at_CellularAutomaton_position_0
   lw $t1, -12($fp)
   lw $t2, 0($fp)
   sub $t1, $t1, $t2
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_cell_at_CellularAutomaton_internal_1 GOTO label_FALSE_31
   # IF_GREATER_ZERO local_cell_at_CellularAutomaton_internal_1 GOTO label_FALSE_31
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_31
   # IF_ZERO local_cell_at_CellularAutomaton_internal_1 GOTO label_FALSE_31
   # IF_ZERO local_cell_at_CellularAutomaton_internal_1 GOTO label_FALSE_31
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_31
   # LOCAL local_cell_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_cell_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_32
j label_END_32
label_FALSE_31: 
   # LOCAL local_cell_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_cell_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_32: 
# IF_ZERO local_cell_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_29
# IF_ZERO local_cell_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_29
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_29
# LOCAL local_cell_at_CellularAutomaton_internal_4 --> -20($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_5
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -20($fp)
# LOCAL local_cell_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_cell_at_CellularAutomaton_internal_4 --> -20($fp)
# local_cell_at_CellularAutomaton_internal_0 = local_cell_at_CellularAutomaton_internal_4
lw $t1, -20($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_30
j label_ENDIF_30
label_FALSEIF_29: 
   # local_cell_at_CellularAutomaton_internal_7 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_cell_at_CellularAutomaton_internal_7 --> -32($fp)
   lw $t1, 24($s1)
   sw $t1, -32($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_cell_at_CellularAutomaton_internal_5 = local_cell_at_CellularAutomaton_internal_7
   lw $t1, -32($fp)
   sw $t1, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_CellularAutomaton_position_0
   # PARAM param_cell_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # ARG 1
   li $t1, 1
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_cell_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_cell_at_CellularAutomaton_internal_6 = VCALL local_cell_at_CellularAutomaton_internal_5 substr
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 16($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_cell_at_CellularAutomaton_internal_0 = local_cell_at_CellularAutomaton_internal_6
   lw $t1, -28($fp)
   sw $t1, -4($fp)
   label_ENDIF_30: 
# RETURN local_cell_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_cell_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 40
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_north_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_north_at_CellularAutomaton_position_0
function_north_at_CellularAutomaton: 
   # Allocate stack frame for function function_north_at_CellularAutomaton.
   subu $sp, $sp, 48
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 48
   # local_north_at_CellularAutomaton_internal_3 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_north_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t1, 16($s1)
   sw $t1, -16($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_2 --> -12($fp)
   # PARAM param_north_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_north_at_CellularAutomaton_internal_2 = PARAM param_north_at_CellularAutomaton_position_0 - local_north_at_CellularAutomaton_internal_3
   lw $t1, 0($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -12($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_north_at_CellularAutomaton_internal_1 = local_north_at_CellularAutomaton_internal_2 - 0
   lw $t1, -12($fp)
   sub $t1, $t1, 0
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_north_at_CellularAutomaton_internal_1 GOTO label_FALSE_35
   # IF_GREATER_ZERO local_north_at_CellularAutomaton_internal_1 GOTO label_FALSE_35
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_35
   # IF_ZERO local_north_at_CellularAutomaton_internal_1 GOTO label_FALSE_35
   # IF_ZERO local_north_at_CellularAutomaton_internal_1 GOTO label_FALSE_35
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_35
   # LOCAL local_north_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_north_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_36
j label_END_36
label_FALSE_35: 
   # LOCAL local_north_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_north_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_36: 
# IF_ZERO local_north_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_33
# IF_ZERO local_north_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_33
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_33
# LOCAL local_north_at_CellularAutomaton_internal_4 --> -20($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_6
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -20($fp)
# LOCAL local_north_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_north_at_CellularAutomaton_internal_4 --> -20($fp)
# local_north_at_CellularAutomaton_internal_0 = local_north_at_CellularAutomaton_internal_4
lw $t1, -20($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_34
j label_ENDIF_34
label_FALSEIF_33: 
   # LOCAL local_north_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_north_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_north_at_CellularAutomaton_internal_5 = local_north_at_CellularAutomaton_internal_7
   lw $t1, -32($fp)
   sw $t1, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_north_at_CellularAutomaton_internal_9 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_north_at_CellularAutomaton_internal_9 --> -40($fp)
   lw $t1, 16($s1)
   sw $t1, -40($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_8 --> -36($fp)
   # PARAM param_north_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_north_at_CellularAutomaton_internal_8 = PARAM param_north_at_CellularAutomaton_position_0 - local_north_at_CellularAutomaton_internal_9
   lw $t1, 0($fp)
   lw $t2, -40($fp)
   sub $t1, $t1, $t2
   sw $t1, -36($fp)
   # ARG local_north_at_CellularAutomaton_internal_8
   # LOCAL local_north_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t1, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_north_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_north_at_CellularAutomaton_internal_6 = VCALL local_north_at_CellularAutomaton_internal_5 cell
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 48($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_north_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_north_at_CellularAutomaton_internal_0 = local_north_at_CellularAutomaton_internal_6
   lw $t1, -28($fp)
   sw $t1, -4($fp)
   label_ENDIF_34: 
# RETURN local_north_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_north_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 48
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_south_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_south_at_CellularAutomaton_position_0
function_south_at_CellularAutomaton: 
   # Allocate stack frame for function function_south_at_CellularAutomaton.
   subu $sp, $sp, 52
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 52
   # local_south_at_CellularAutomaton_internal_2 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_south_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t1, 20($s1)
   sw $t1, -12($fp)
   # local_south_at_CellularAutomaton_internal_4 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_south_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t1, 16($s1)
   sw $t1, -20($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_south_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_south_at_CellularAutomaton_internal_3 = PARAM param_south_at_CellularAutomaton_position_0 + local_south_at_CellularAutomaton_internal_4
   lw $t1, 0($fp)
   lw $t2, -20($fp)
   add $t1, $t1, $t2
   sw $t1, -16($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_south_at_CellularAutomaton_internal_1 = local_south_at_CellularAutomaton_internal_2 - local_south_at_CellularAutomaton_internal_3
   lw $t1, -12($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_south_at_CellularAutomaton_internal_1 GOTO label_FALSE_39
   # IF_GREATER_ZERO local_south_at_CellularAutomaton_internal_1 GOTO label_FALSE_39
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_39
   # IF_ZERO local_south_at_CellularAutomaton_internal_1 GOTO label_FALSE_39
   # IF_ZERO local_south_at_CellularAutomaton_internal_1 GOTO label_FALSE_39
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_39
   # LOCAL local_south_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_south_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_40
j label_END_40
label_FALSE_39: 
   # LOCAL local_south_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_south_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_40: 
# IF_ZERO local_south_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_37
# IF_ZERO local_south_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_37
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_37
# LOCAL local_south_at_CellularAutomaton_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_7
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -24($fp)
# LOCAL local_south_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_south_at_CellularAutomaton_internal_5 --> -24($fp)
# local_south_at_CellularAutomaton_internal_0 = local_south_at_CellularAutomaton_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_38
j label_ENDIF_38
label_FALSEIF_37: 
   # LOCAL local_south_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_south_at_CellularAutomaton_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_south_at_CellularAutomaton_internal_6 = local_south_at_CellularAutomaton_internal_8
   lw $t1, -36($fp)
   sw $t1, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_south_at_CellularAutomaton_internal_10 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_south_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t1, 16($s1)
   sw $t1, -44($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_9 --> -40($fp)
   # PARAM param_south_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_south_at_CellularAutomaton_internal_9 = PARAM param_south_at_CellularAutomaton_position_0 + local_south_at_CellularAutomaton_internal_10
   lw $t1, 0($fp)
   lw $t2, -44($fp)
   add $t1, $t1, $t2
   sw $t1, -40($fp)
   # ARG local_south_at_CellularAutomaton_internal_9
   # LOCAL local_south_at_CellularAutomaton_internal_9 --> -40($fp)
   lw $t1, -40($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_south_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_south_at_CellularAutomaton_internal_7 = VCALL local_south_at_CellularAutomaton_internal_6 cell
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 48($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_south_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_south_at_CellularAutomaton_internal_0 = local_south_at_CellularAutomaton_internal_7
   lw $t1, -32($fp)
   sw $t1, -4($fp)
   label_ENDIF_38: 
# RETURN local_south_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_south_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 52
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_east_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_east_at_CellularAutomaton_position_0
function_east_at_CellularAutomaton: 
   # Allocate stack frame for function function_east_at_CellularAutomaton.
   subu $sp, $sp, 60
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 60
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # PARAM param_east_at_CellularAutomaton_position_0 --> 0($fp)
   # local_east_at_CellularAutomaton_internal_4 = PARAM param_east_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -20($fp)
   # local_east_at_CellularAutomaton_internal_5 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_east_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $t1, 16($s1)
   sw $t1, -24($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_east_at_CellularAutomaton_internal_3 = local_east_at_CellularAutomaton_internal_4 / local_east_at_CellularAutomaton_internal_5
   lw $t1, -20($fp)
   lw $t2, -24($fp)
   div $t1, $t1, $t2
   sw $t1, -16($fp)
   # local_east_at_CellularAutomaton_internal_6 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_east_at_CellularAutomaton_internal_6 --> -28($fp)
   lw $t1, 16($s1)
   sw $t1, -28($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_east_at_CellularAutomaton_internal_2 = local_east_at_CellularAutomaton_internal_3 * local_east_at_CellularAutomaton_internal_6
   lw $t1, -16($fp)
   lw $t2, -28($fp)
   mul $t1, $t1, $t2
   sw $t1, -12($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_7 --> -32($fp)
   # PARAM param_east_at_CellularAutomaton_position_0 --> 0($fp)
   # local_east_at_CellularAutomaton_internal_7 = PARAM param_east_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -32($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_east_at_CellularAutomaton_internal_1 = local_east_at_CellularAutomaton_internal_2 - local_east_at_CellularAutomaton_internal_7
   lw $t1, -12($fp)
   lw $t2, -32($fp)
   sub $t1, $t1, $t2
   sw $t1, -8($fp)
   # IF_ZERO local_east_at_CellularAutomaton_internal_1 GOTO label_TRUE_43
   # IF_ZERO local_east_at_CellularAutomaton_internal_1 GOTO label_TRUE_43
   lw $t1, -8($fp)
   beq $t1, 0, label_TRUE_43
   # LOCAL local_east_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_east_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   # GOTO label_END_44
j label_END_44
label_TRUE_43: 
   # LOCAL local_east_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_east_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   label_END_44: 
# IF_ZERO local_east_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_41
# IF_ZERO local_east_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_41
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_41
# LOCAL local_east_at_CellularAutomaton_internal_8 --> -36($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_8
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -36($fp)
# LOCAL local_east_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_east_at_CellularAutomaton_internal_8 --> -36($fp)
# local_east_at_CellularAutomaton_internal_0 = local_east_at_CellularAutomaton_internal_8
lw $t1, -36($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_42
j label_ENDIF_42
label_FALSEIF_41: 
   # LOCAL local_east_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_east_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_east_at_CellularAutomaton_internal_9 = local_east_at_CellularAutomaton_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_east_at_CellularAutomaton_internal_12 --> -52($fp)
   # PARAM param_east_at_CellularAutomaton_position_0 --> 0($fp)
   # local_east_at_CellularAutomaton_internal_12 = PARAM param_east_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -52($fp)
   # ARG local_east_at_CellularAutomaton_internal_12
   # LOCAL local_east_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t1, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_east_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_east_at_CellularAutomaton_internal_10 = VCALL local_east_at_CellularAutomaton_internal_9 cell
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 48($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_east_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_east_at_CellularAutomaton_internal_0 = local_east_at_CellularAutomaton_internal_10
   lw $t1, -44($fp)
   sw $t1, -4($fp)
   label_ENDIF_42: 
# RETURN local_east_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_east_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 60
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_west_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_west_at_CellularAutomaton_position_0
function_west_at_CellularAutomaton: 
   # Allocate stack frame for function function_west_at_CellularAutomaton.
   subu $sp, $sp, 64
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 64
   # LOCAL local_west_at_CellularAutomaton_internal_1 --> -8($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # local_west_at_CellularAutomaton_internal_1 = PARAM param_west_at_CellularAutomaton_position_0 - 0
   lw $t1, 0($fp)
   sub $t1, $t1, 0
   sw $t1, -8($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_1 GOTO label_TRUE_47
   # IF_ZERO local_west_at_CellularAutomaton_internal_1 GOTO label_TRUE_47
   lw $t1, -8($fp)
   beq $t1, 0, label_TRUE_47
   # LOCAL local_west_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_west_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   # GOTO label_END_48
j label_END_48
label_TRUE_47: 
   # LOCAL local_west_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_west_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   label_END_48: 
# IF_ZERO local_west_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_45
# IF_ZERO local_west_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_45
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_45
# LOCAL local_west_at_CellularAutomaton_internal_2 --> -12($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_9
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -12($fp)
# LOCAL local_west_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_west_at_CellularAutomaton_internal_2 --> -12($fp)
# local_west_at_CellularAutomaton_internal_0 = local_west_at_CellularAutomaton_internal_2
lw $t1, -12($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_46
j label_ENDIF_46
label_FALSEIF_45: 
   # local_west_at_CellularAutomaton_internal_7 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_west_at_CellularAutomaton_internal_7 --> -32($fp)
   lw $t1, 16($s1)
   sw $t1, -32($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_6 --> -28($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_west_at_CellularAutomaton_internal_6 = PARAM param_west_at_CellularAutomaton_position_0 / local_west_at_CellularAutomaton_internal_7
   lw $t1, 0($fp)
   lw $t2, -32($fp)
   div $t1, $t1, $t2
   sw $t1, -28($fp)
   # local_west_at_CellularAutomaton_internal_8 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_west_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t1, 16($s1)
   sw $t1, -36($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_west_at_CellularAutomaton_internal_5 = local_west_at_CellularAutomaton_internal_6 * local_west_at_CellularAutomaton_internal_8
   lw $t1, -28($fp)
   lw $t2, -36($fp)
   mul $t1, $t1, $t2
   sw $t1, -24($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_5 --> -24($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # local_west_at_CellularAutomaton_internal_4 = local_west_at_CellularAutomaton_internal_5 - PARAM param_west_at_CellularAutomaton_position_0
   lw $t1, -24($fp)
   lw $t2, 0($fp)
   sub $t1, $t1, $t2
   sw $t1, -20($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_4 GOTO label_TRUE_51
   # IF_ZERO local_west_at_CellularAutomaton_internal_4 GOTO label_TRUE_51
   lw $t1, -20($fp)
   beq $t1, 0, label_TRUE_51
   # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_west_at_CellularAutomaton_internal_4 = 0
   li $t1, 0
   sw $t1, -20($fp)
   # GOTO label_END_52
j label_END_52
label_TRUE_51: 
   # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_west_at_CellularAutomaton_internal_4 = 1
   li $t1, 1
   sw $t1, -20($fp)
   label_END_52: 
# IF_ZERO local_west_at_CellularAutomaton_internal_4 GOTO label_FALSEIF_49
# IF_ZERO local_west_at_CellularAutomaton_internal_4 GOTO label_FALSEIF_49
lw $t1, -20($fp)
beq $t1, 0, label_FALSEIF_49
# LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_10
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -40($fp)
# LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
# local_west_at_CellularAutomaton_internal_3 = local_west_at_CellularAutomaton_internal_9
lw $t1, -40($fp)
sw $t1, -16($fp)
# GOTO label_ENDIF_50
j label_ENDIF_50
label_FALSEIF_49: 
   # LOCAL local_west_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_west_at_CellularAutomaton_internal_12 = SELF
   sw $s1, -52($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_west_at_CellularAutomaton_internal_10 = local_west_at_CellularAutomaton_internal_12
   lw $t1, -52($fp)
   sw $t1, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_west_at_CellularAutomaton_internal_13 --> -56($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # local_west_at_CellularAutomaton_internal_13 = PARAM param_west_at_CellularAutomaton_position_0 - 1
   lw $t1, 0($fp)
   sub $t1, $t1, 1
   sw $t1, -56($fp)
   # ARG local_west_at_CellularAutomaton_internal_13
   # LOCAL local_west_at_CellularAutomaton_internal_13 --> -56($fp)
   lw $t1, -56($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_west_at_CellularAutomaton_internal_11 = VCALL local_west_at_CellularAutomaton_internal_10 cell
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 48($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_west_at_CellularAutomaton_internal_3 = local_west_at_CellularAutomaton_internal_11
   lw $t1, -48($fp)
   sw $t1, -16($fp)
   label_ENDIF_50: 
# LOCAL local_west_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
# local_west_at_CellularAutomaton_internal_0 = local_west_at_CellularAutomaton_internal_3
lw $t1, -16($fp)
sw $t1, -4($fp)
label_ENDIF_46: 
# RETURN local_west_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_west_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 64
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_northwest_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_northwest_at_CellularAutomaton_position_0
function_northwest_at_CellularAutomaton: 
   # Allocate stack frame for function function_northwest_at_CellularAutomaton.
   subu $sp, $sp, 72
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 72
   # local_northwest_at_CellularAutomaton_internal_3 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northwest_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t1, 16($s1)
   sw $t1, -16($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_northwest_at_CellularAutomaton_internal_2 = PARAM param_northwest_at_CellularAutomaton_position_0 - local_northwest_at_CellularAutomaton_internal_3
   lw $t1, 0($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -12($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_northwest_at_CellularAutomaton_internal_1 = local_northwest_at_CellularAutomaton_internal_2 - 0
   lw $t1, -12($fp)
   sub $t1, $t1, 0
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_northwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_55
   # IF_GREATER_ZERO local_northwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_55
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_55
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_55
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_55
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_55
   # LOCAL local_northwest_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_northwest_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_56
j label_END_56
label_FALSE_55: 
   # LOCAL local_northwest_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_northwest_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_56: 
# IF_ZERO local_northwest_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_53
# IF_ZERO local_northwest_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_53
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_53
# LOCAL local_northwest_at_CellularAutomaton_internal_4 --> -20($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_11
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -20($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_4 --> -20($fp)
# local_northwest_at_CellularAutomaton_internal_0 = local_northwest_at_CellularAutomaton_internal_4
lw $t1, -20($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_54
j label_ENDIF_54
label_FALSEIF_53: 
   # local_northwest_at_CellularAutomaton_internal_9 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northwest_at_CellularAutomaton_internal_9 --> -40($fp)
   lw $t1, 16($s1)
   sw $t1, -40($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_8 --> -36($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_northwest_at_CellularAutomaton_internal_8 = PARAM param_northwest_at_CellularAutomaton_position_0 / local_northwest_at_CellularAutomaton_internal_9
   lw $t1, 0($fp)
   lw $t2, -40($fp)
   div $t1, $t1, $t2
   sw $t1, -36($fp)
   # local_northwest_at_CellularAutomaton_internal_10 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t1, 16($s1)
   sw $t1, -44($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_northwest_at_CellularAutomaton_internal_7 = local_northwest_at_CellularAutomaton_internal_8 * local_northwest_at_CellularAutomaton_internal_10
   lw $t1, -36($fp)
   lw $t2, -44($fp)
   mul $t1, $t1, $t2
   sw $t1, -32($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_7 --> -32($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # local_northwest_at_CellularAutomaton_internal_6 = local_northwest_at_CellularAutomaton_internal_7 - PARAM param_northwest_at_CellularAutomaton_position_0
   lw $t1, -32($fp)
   lw $t2, 0($fp)
   sub $t1, $t1, $t2
   sw $t1, -28($fp)
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_6 GOTO label_TRUE_59
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_6 GOTO label_TRUE_59
   lw $t1, -28($fp)
   beq $t1, 0, label_TRUE_59
   # LOCAL local_northwest_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_northwest_at_CellularAutomaton_internal_6 = 0
   li $t1, 0
   sw $t1, -28($fp)
   # GOTO label_END_60
j label_END_60
label_TRUE_59: 
   # LOCAL local_northwest_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_northwest_at_CellularAutomaton_internal_6 = 1
   li $t1, 1
   sw $t1, -28($fp)
   label_END_60: 
# IF_ZERO local_northwest_at_CellularAutomaton_internal_6 GOTO label_FALSEIF_57
# IF_ZERO local_northwest_at_CellularAutomaton_internal_6 GOTO label_FALSEIF_57
lw $t1, -28($fp)
beq $t1, 0, label_FALSEIF_57
# LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_12
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -48($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_5 --> -24($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
# local_northwest_at_CellularAutomaton_internal_5 = local_northwest_at_CellularAutomaton_internal_11
lw $t1, -48($fp)
sw $t1, -24($fp)
# GOTO label_ENDIF_58
j label_ENDIF_58
label_FALSEIF_57: 
   # LOCAL local_northwest_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_northwest_at_CellularAutomaton_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_northwest_at_CellularAutomaton_internal_12 = local_northwest_at_CellularAutomaton_internal_14
   lw $t1, -60($fp)
   sw $t1, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_15 --> -64($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # local_northwest_at_CellularAutomaton_internal_15 = PARAM param_northwest_at_CellularAutomaton_position_0 - 1
   lw $t1, 0($fp)
   sub $t1, $t1, 1
   sw $t1, -64($fp)
   # ARG local_northwest_at_CellularAutomaton_internal_15
   # LOCAL local_northwest_at_CellularAutomaton_internal_15 --> -64($fp)
   lw $t1, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_northwest_at_CellularAutomaton_internal_13 = VCALL local_northwest_at_CellularAutomaton_internal_12 north
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 52($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_northwest_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_northwest_at_CellularAutomaton_internal_5 = local_northwest_at_CellularAutomaton_internal_13
   lw $t1, -56($fp)
   sw $t1, -24($fp)
   label_ENDIF_58: 
# LOCAL local_northwest_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_5 --> -24($fp)
# local_northwest_at_CellularAutomaton_internal_0 = local_northwest_at_CellularAutomaton_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
label_ENDIF_54: 
# RETURN local_northwest_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_northwest_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 72
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_northeast_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_northeast_at_CellularAutomaton_position_0
function_northeast_at_CellularAutomaton: 
   # Allocate stack frame for function function_northeast_at_CellularAutomaton.
   subu $sp, $sp, 80
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 80
   # local_northeast_at_CellularAutomaton_internal_3 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northeast_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t1, 16($s1)
   sw $t1, -16($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_northeast_at_CellularAutomaton_internal_2 = PARAM param_northeast_at_CellularAutomaton_position_0 - local_northeast_at_CellularAutomaton_internal_3
   lw $t1, 0($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -12($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_northeast_at_CellularAutomaton_internal_1 = local_northeast_at_CellularAutomaton_internal_2 - 0
   lw $t1, -12($fp)
   sub $t1, $t1, 0
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_northeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_63
   # IF_GREATER_ZERO local_northeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_63
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_63
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_63
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_63
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_63
   # LOCAL local_northeast_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_northeast_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_64
j label_END_64
label_FALSE_63: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_northeast_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_64: 
# IF_ZERO local_northeast_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_61
# IF_ZERO local_northeast_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_61
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_61
# LOCAL local_northeast_at_CellularAutomaton_internal_4 --> -20($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_13
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -20($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_4 --> -20($fp)
# local_northeast_at_CellularAutomaton_internal_0 = local_northeast_at_CellularAutomaton_internal_4
lw $t1, -20($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_62
j label_ENDIF_62
label_FALSEIF_61: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_9 --> -40($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # local_northeast_at_CellularAutomaton_internal_9 = PARAM param_northeast_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -40($fp)
   # local_northeast_at_CellularAutomaton_internal_10 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t1, 16($s1)
   sw $t1, -44($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_northeast_at_CellularAutomaton_internal_8 = local_northeast_at_CellularAutomaton_internal_9 / local_northeast_at_CellularAutomaton_internal_10
   lw $t1, -40($fp)
   lw $t2, -44($fp)
   div $t1, $t1, $t2
   sw $t1, -36($fp)
   # local_northeast_at_CellularAutomaton_internal_11 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   lw $t1, 16($s1)
   sw $t1, -48($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_northeast_at_CellularAutomaton_internal_7 = local_northeast_at_CellularAutomaton_internal_8 * local_northeast_at_CellularAutomaton_internal_11
   lw $t1, -36($fp)
   lw $t2, -48($fp)
   mul $t1, $t1, $t2
   sw $t1, -32($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # local_northeast_at_CellularAutomaton_internal_12 = PARAM param_northeast_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -52($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_northeast_at_CellularAutomaton_internal_6 = local_northeast_at_CellularAutomaton_internal_7 - local_northeast_at_CellularAutomaton_internal_12
   lw $t1, -32($fp)
   lw $t2, -52($fp)
   sub $t1, $t1, $t2
   sw $t1, -28($fp)
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_6 GOTO label_TRUE_67
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_6 GOTO label_TRUE_67
   lw $t1, -28($fp)
   beq $t1, 0, label_TRUE_67
   # LOCAL local_northeast_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_northeast_at_CellularAutomaton_internal_6 = 0
   li $t1, 0
   sw $t1, -28($fp)
   # GOTO label_END_68
j label_END_68
label_TRUE_67: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_northeast_at_CellularAutomaton_internal_6 = 1
   li $t1, 1
   sw $t1, -28($fp)
   label_END_68: 
# IF_ZERO local_northeast_at_CellularAutomaton_internal_6 GOTO label_FALSEIF_65
# IF_ZERO local_northeast_at_CellularAutomaton_internal_6 GOTO label_FALSEIF_65
lw $t1, -28($fp)
beq $t1, 0, label_FALSEIF_65
# LOCAL local_northeast_at_CellularAutomaton_internal_13 --> -56($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_14
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -56($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_5 --> -24($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_13 --> -56($fp)
# local_northeast_at_CellularAutomaton_internal_5 = local_northeast_at_CellularAutomaton_internal_13
lw $t1, -56($fp)
sw $t1, -24($fp)
# GOTO label_ENDIF_66
j label_ENDIF_66
label_FALSEIF_65: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_northeast_at_CellularAutomaton_internal_16 = SELF
   sw $s1, -68($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_14 --> -60($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_northeast_at_CellularAutomaton_internal_14 = local_northeast_at_CellularAutomaton_internal_16
   lw $t1, -68($fp)
   sw $t1, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # local_northeast_at_CellularAutomaton_internal_17 = PARAM param_northeast_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -72($fp)
   # ARG local_northeast_at_CellularAutomaton_internal_17
   # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
   lw $t1, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_14 --> -60($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_northeast_at_CellularAutomaton_internal_15 = VCALL local_northeast_at_CellularAutomaton_internal_14 north
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 52($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_northeast_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_northeast_at_CellularAutomaton_internal_5 = local_northeast_at_CellularAutomaton_internal_15
   lw $t1, -64($fp)
   sw $t1, -24($fp)
   label_ENDIF_66: 
# LOCAL local_northeast_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_5 --> -24($fp)
# local_northeast_at_CellularAutomaton_internal_0 = local_northeast_at_CellularAutomaton_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
label_ENDIF_62: 
# RETURN local_northeast_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_northeast_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 80
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_southeast_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_southeast_at_CellularAutomaton_position_0
function_southeast_at_CellularAutomaton: 
   # Allocate stack frame for function function_southeast_at_CellularAutomaton.
   subu $sp, $sp, 84
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 84
   # local_southeast_at_CellularAutomaton_internal_2 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t1, 20($s1)
   sw $t1, -12($fp)
   # local_southeast_at_CellularAutomaton_internal_4 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t1, 16($s1)
   sw $t1, -20($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_southeast_at_CellularAutomaton_internal_3 = PARAM param_southeast_at_CellularAutomaton_position_0 + local_southeast_at_CellularAutomaton_internal_4
   lw $t1, 0($fp)
   lw $t2, -20($fp)
   add $t1, $t1, $t2
   sw $t1, -16($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_southeast_at_CellularAutomaton_internal_1 = local_southeast_at_CellularAutomaton_internal_2 - local_southeast_at_CellularAutomaton_internal_3
   lw $t1, -12($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_southeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_71
   # IF_GREATER_ZERO local_southeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_71
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_71
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_71
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_1 GOTO label_FALSE_71
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_71
   # LOCAL local_southeast_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_southeast_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_72
j label_END_72
label_FALSE_71: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_southeast_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_72: 
# IF_ZERO local_southeast_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_69
# IF_ZERO local_southeast_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_69
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_69
# LOCAL local_southeast_at_CellularAutomaton_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_15
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -24($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_5 --> -24($fp)
# local_southeast_at_CellularAutomaton_internal_0 = local_southeast_at_CellularAutomaton_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_70
j label_ENDIF_70
label_FALSEIF_69: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # local_southeast_at_CellularAutomaton_internal_10 = PARAM param_southeast_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -44($fp)
   # local_southeast_at_CellularAutomaton_internal_11 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   lw $t1, 16($s1)
   sw $t1, -48($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_southeast_at_CellularAutomaton_internal_9 = local_southeast_at_CellularAutomaton_internal_10 / local_southeast_at_CellularAutomaton_internal_11
   lw $t1, -44($fp)
   lw $t2, -48($fp)
   div $t1, $t1, $t2
   sw $t1, -40($fp)
   # local_southeast_at_CellularAutomaton_internal_12 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t1, 16($s1)
   sw $t1, -52($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_southeast_at_CellularAutomaton_internal_8 = local_southeast_at_CellularAutomaton_internal_9 * local_southeast_at_CellularAutomaton_internal_12
   lw $t1, -40($fp)
   lw $t2, -52($fp)
   mul $t1, $t1, $t2
   sw $t1, -36($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_13 --> -56($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # local_southeast_at_CellularAutomaton_internal_13 = PARAM param_southeast_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -56($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_southeast_at_CellularAutomaton_internal_7 = local_southeast_at_CellularAutomaton_internal_8 - local_southeast_at_CellularAutomaton_internal_13
   lw $t1, -36($fp)
   lw $t2, -56($fp)
   sub $t1, $t1, $t2
   sw $t1, -32($fp)
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_7 GOTO label_TRUE_75
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_7 GOTO label_TRUE_75
   lw $t1, -32($fp)
   beq $t1, 0, label_TRUE_75
   # LOCAL local_southeast_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_southeast_at_CellularAutomaton_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   # GOTO label_END_76
j label_END_76
label_TRUE_75: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_southeast_at_CellularAutomaton_internal_7 = 1
   li $t1, 1
   sw $t1, -32($fp)
   label_END_76: 
# IF_ZERO local_southeast_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_73
# IF_ZERO local_southeast_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_73
lw $t1, -32($fp)
beq $t1, 0, label_FALSEIF_73
# LOCAL local_southeast_at_CellularAutomaton_internal_14 --> -60($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_16
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -60($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_14 --> -60($fp)
# local_southeast_at_CellularAutomaton_internal_6 = local_southeast_at_CellularAutomaton_internal_14
lw $t1, -60($fp)
sw $t1, -28($fp)
# GOTO label_ENDIF_74
j label_ENDIF_74
label_FALSEIF_73: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_southeast_at_CellularAutomaton_internal_17 = SELF
   sw $s1, -72($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_15 --> -64($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_southeast_at_CellularAutomaton_internal_15 = local_southeast_at_CellularAutomaton_internal_17
   lw $t1, -72($fp)
   sw $t1, -64($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_18 --> -76($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # local_southeast_at_CellularAutomaton_internal_18 = PARAM param_southeast_at_CellularAutomaton_position_0 + 1
   lw $t1, 0($fp)
   add $t1, $t1, 1
   sw $t1, -76($fp)
   # ARG local_southeast_at_CellularAutomaton_internal_18
   # LOCAL local_southeast_at_CellularAutomaton_internal_18 --> -76($fp)
   lw $t1, -76($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_15 --> -64($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_southeast_at_CellularAutomaton_internal_16 = VCALL local_southeast_at_CellularAutomaton_internal_15 south
   # Save new self pointer in $s1
   lw $s1, -64($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 56($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -68($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_southeast_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_southeast_at_CellularAutomaton_internal_6 = local_southeast_at_CellularAutomaton_internal_16
   lw $t1, -68($fp)
   sw $t1, -28($fp)
   label_ENDIF_74: 
# LOCAL local_southeast_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_6 --> -28($fp)
# local_southeast_at_CellularAutomaton_internal_0 = local_southeast_at_CellularAutomaton_internal_6
lw $t1, -28($fp)
sw $t1, -4($fp)
label_ENDIF_70: 
# RETURN local_southeast_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_southeast_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 84
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_southwest_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_southwest_at_CellularAutomaton_position_0
function_southwest_at_CellularAutomaton: 
   # Allocate stack frame for function function_southwest_at_CellularAutomaton.
   subu $sp, $sp, 76
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 76
   # local_southwest_at_CellularAutomaton_internal_2 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t1, 20($s1)
   sw $t1, -12($fp)
   # local_southwest_at_CellularAutomaton_internal_4 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t1, 16($s1)
   sw $t1, -20($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_southwest_at_CellularAutomaton_internal_3 = PARAM param_southwest_at_CellularAutomaton_position_0 + local_southwest_at_CellularAutomaton_internal_4
   lw $t1, 0($fp)
   lw $t2, -20($fp)
   add $t1, $t1, $t2
   sw $t1, -16($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_southwest_at_CellularAutomaton_internal_1 = local_southwest_at_CellularAutomaton_internal_2 - local_southwest_at_CellularAutomaton_internal_3
   lw $t1, -12($fp)
   lw $t2, -16($fp)
   sub $t1, $t1, $t2
   sw $t1, -8($fp)
   # IF_GREATER_ZERO local_southwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_79
   # IF_GREATER_ZERO local_southwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_79
   lw $t1, -8($fp)
   bgt $t1, 0, label_FALSE_79
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_79
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_1 GOTO label_FALSE_79
   lw $t1, -8($fp)
   beq $t1, 0, label_FALSE_79
   # LOCAL local_southwest_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_southwest_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   # GOTO label_END_80
j label_END_80
label_FALSE_79: 
   # LOCAL local_southwest_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_southwest_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   label_END_80: 
# IF_ZERO local_southwest_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_77
# IF_ZERO local_southwest_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_77
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_77
# LOCAL local_southwest_at_CellularAutomaton_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_17
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -24($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_5 --> -24($fp)
# local_southwest_at_CellularAutomaton_internal_0 = local_southwest_at_CellularAutomaton_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_78
j label_ENDIF_78
label_FALSEIF_77: 
   # local_southwest_at_CellularAutomaton_internal_10 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t1, 16($s1)
   sw $t1, -44($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_9 --> -40($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_southwest_at_CellularAutomaton_internal_9 = PARAM param_southwest_at_CellularAutomaton_position_0 / local_southwest_at_CellularAutomaton_internal_10
   lw $t1, 0($fp)
   lw $t2, -44($fp)
   div $t1, $t1, $t2
   sw $t1, -40($fp)
   # local_southwest_at_CellularAutomaton_internal_11 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   lw $t1, 16($s1)
   sw $t1, -48($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_southwest_at_CellularAutomaton_internal_8 = local_southwest_at_CellularAutomaton_internal_9 * local_southwest_at_CellularAutomaton_internal_11
   lw $t1, -40($fp)
   lw $t2, -48($fp)
   mul $t1, $t1, $t2
   sw $t1, -36($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_8 --> -36($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # local_southwest_at_CellularAutomaton_internal_7 = local_southwest_at_CellularAutomaton_internal_8 - PARAM param_southwest_at_CellularAutomaton_position_0
   lw $t1, -36($fp)
   lw $t2, 0($fp)
   sub $t1, $t1, $t2
   sw $t1, -32($fp)
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_7 GOTO label_TRUE_83
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_7 GOTO label_TRUE_83
   lw $t1, -32($fp)
   beq $t1, 0, label_TRUE_83
   # LOCAL local_southwest_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_southwest_at_CellularAutomaton_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   # GOTO label_END_84
j label_END_84
label_TRUE_83: 
   # LOCAL local_southwest_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_southwest_at_CellularAutomaton_internal_7 = 1
   li $t1, 1
   sw $t1, -32($fp)
   label_END_84: 
# IF_ZERO local_southwest_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_81
# IF_ZERO local_southwest_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_81
lw $t1, -32($fp)
beq $t1, 0, label_FALSEIF_81
# LOCAL local_southwest_at_CellularAutomaton_internal_12 --> -52($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_18
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -52($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_12 --> -52($fp)
# local_southwest_at_CellularAutomaton_internal_6 = local_southwest_at_CellularAutomaton_internal_12
lw $t1, -52($fp)
sw $t1, -28($fp)
# GOTO label_ENDIF_82
j label_ENDIF_82
label_FALSEIF_81: 
   # LOCAL local_southwest_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_southwest_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_southwest_at_CellularAutomaton_internal_13 = local_southwest_at_CellularAutomaton_internal_15
   lw $t1, -64($fp)
   sw $t1, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_16 --> -68($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # local_southwest_at_CellularAutomaton_internal_16 = PARAM param_southwest_at_CellularAutomaton_position_0 - 1
   lw $t1, 0($fp)
   sub $t1, $t1, 1
   sw $t1, -68($fp)
   # ARG local_southwest_at_CellularAutomaton_internal_16
   # LOCAL local_southwest_at_CellularAutomaton_internal_16 --> -68($fp)
   lw $t1, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_southwest_at_CellularAutomaton_internal_14 = VCALL local_southwest_at_CellularAutomaton_internal_13 south
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 56($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_southwest_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_southwest_at_CellularAutomaton_internal_6 = local_southwest_at_CellularAutomaton_internal_14
   lw $t1, -60($fp)
   sw $t1, -28($fp)
   label_ENDIF_82: 
# LOCAL local_southwest_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_6 --> -28($fp)
# local_southwest_at_CellularAutomaton_internal_0 = local_southwest_at_CellularAutomaton_internal_6
lw $t1, -28($fp)
sw $t1, -4($fp)
label_ENDIF_78: 
# RETURN local_southwest_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_southwest_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 76
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_neighbors_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_neighbors_at_CellularAutomaton_position_0
function_neighbors_at_CellularAutomaton: 
   # Allocate stack frame for function function_neighbors_at_CellularAutomaton.
   subu $sp, $sp, 228
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 228
   # LOCAL local_neighbors_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_neighbors_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_neighbors_at_CellularAutomaton_internal_9 = local_neighbors_at_CellularAutomaton_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_neighbors_at_CellularAutomaton_position_0
   # PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_neighbors_at_CellularAutomaton_internal_10 = VCALL local_neighbors_at_CellularAutomaton_internal_9 north
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 52($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_19
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -52($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_neighbors_at_CellularAutomaton_internal_8 = local_neighbors_at_CellularAutomaton_internal_10 - local_neighbors_at_CellularAutomaton_internal_12
   lw $t1, -44($fp)
   lw $t2, -52($fp)
   sub $t1, $t1, $t2
   sw $t1, -36($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_8 GOTO label_TRUE_87
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_8 GOTO label_TRUE_87
   lw $t1, -36($fp)
   beq $t1, 0, label_TRUE_87
   # LOCAL local_neighbors_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_neighbors_at_CellularAutomaton_internal_8 = 0
   li $t1, 0
   sw $t1, -36($fp)
   # GOTO label_END_88
j label_END_88
label_TRUE_87: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_neighbors_at_CellularAutomaton_internal_8 = 1
   li $t1, 1
   sw $t1, -36($fp)
   label_END_88: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_8 GOTO label_FALSEIF_85
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_8 GOTO label_FALSEIF_85
lw $t1, -36($fp)
beq $t1, 0, label_FALSEIF_85
# LOCAL local_neighbors_at_CellularAutomaton_internal_7 --> -32($fp)
# local_neighbors_at_CellularAutomaton_internal_7 = 1
li $t1, 1
sw $t1, -32($fp)
# GOTO label_ENDIF_86
j label_ENDIF_86
label_FALSEIF_85: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_neighbors_at_CellularAutomaton_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   label_ENDIF_86: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_17 --> -72($fp)
# local_neighbors_at_CellularAutomaton_internal_17 = SELF
sw $s1, -72($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_15 --> -64($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_17 --> -72($fp)
# local_neighbors_at_CellularAutomaton_internal_15 = local_neighbors_at_CellularAutomaton_internal_17
lw $t1, -72($fp)
sw $t1, -64($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_15 --> -64($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_16 --> -68($fp)
# local_neighbors_at_CellularAutomaton_internal_16 = VCALL local_neighbors_at_CellularAutomaton_internal_15 south
# Save new self pointer in $s1
lw $s1, -64($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 56($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -68($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_18 --> -76($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_20
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -76($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_16 --> -68($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_18 --> -76($fp)
# local_neighbors_at_CellularAutomaton_internal_14 = local_neighbors_at_CellularAutomaton_internal_16 - local_neighbors_at_CellularAutomaton_internal_18
lw $t1, -68($fp)
lw $t2, -76($fp)
sub $t1, $t1, $t2
sw $t1, -60($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_14 GOTO label_TRUE_91
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_14 GOTO label_TRUE_91
lw $t1, -60($fp)
beq $t1, 0, label_TRUE_91
# LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
# local_neighbors_at_CellularAutomaton_internal_14 = 0
li $t1, 0
sw $t1, -60($fp)
# GOTO label_END_92
j label_END_92
label_TRUE_91: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_neighbors_at_CellularAutomaton_internal_14 = 1
   li $t1, 1
   sw $t1, -60($fp)
   label_END_92: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_14 GOTO label_FALSEIF_89
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_14 GOTO label_FALSEIF_89
lw $t1, -60($fp)
beq $t1, 0, label_FALSEIF_89
# LOCAL local_neighbors_at_CellularAutomaton_internal_13 --> -56($fp)
# local_neighbors_at_CellularAutomaton_internal_13 = 1
li $t1, 1
sw $t1, -56($fp)
# GOTO label_ENDIF_90
j label_ENDIF_90
label_FALSEIF_89: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_neighbors_at_CellularAutomaton_internal_13 = 0
   li $t1, 0
   sw $t1, -56($fp)
   label_ENDIF_90: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_13 --> -56($fp)
# local_neighbors_at_CellularAutomaton_internal_6 = local_neighbors_at_CellularAutomaton_internal_7 + local_neighbors_at_CellularAutomaton_internal_13
lw $t1, -32($fp)
lw $t2, -56($fp)
add $t1, $t1, $t2
sw $t1, -28($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_23 --> -96($fp)
# local_neighbors_at_CellularAutomaton_internal_23 = SELF
sw $s1, -96($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_23 --> -96($fp)
# local_neighbors_at_CellularAutomaton_internal_21 = local_neighbors_at_CellularAutomaton_internal_23
lw $t1, -96($fp)
sw $t1, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# local_neighbors_at_CellularAutomaton_internal_22 = VCALL local_neighbors_at_CellularAutomaton_internal_21 east
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 60($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_21
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -100($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
# local_neighbors_at_CellularAutomaton_internal_20 = local_neighbors_at_CellularAutomaton_internal_22 - local_neighbors_at_CellularAutomaton_internal_24
lw $t1, -92($fp)
lw $t2, -100($fp)
sub $t1, $t1, $t2
sw $t1, -84($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_95
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_95
lw $t1, -84($fp)
beq $t1, 0, label_TRUE_95
# LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
# local_neighbors_at_CellularAutomaton_internal_20 = 0
li $t1, 0
sw $t1, -84($fp)
# GOTO label_END_96
j label_END_96
label_TRUE_95: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_neighbors_at_CellularAutomaton_internal_20 = 1
   li $t1, 1
   sw $t1, -84($fp)
   label_END_96: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_FALSEIF_93
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_FALSEIF_93
lw $t1, -84($fp)
beq $t1, 0, label_FALSEIF_93
# LOCAL local_neighbors_at_CellularAutomaton_internal_19 --> -80($fp)
# local_neighbors_at_CellularAutomaton_internal_19 = 1
li $t1, 1
sw $t1, -80($fp)
# GOTO label_ENDIF_94
j label_ENDIF_94
label_FALSEIF_93: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_neighbors_at_CellularAutomaton_internal_19 = 0
   li $t1, 0
   sw $t1, -80($fp)
   label_ENDIF_94: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_5 --> -24($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_19 --> -80($fp)
# local_neighbors_at_CellularAutomaton_internal_5 = local_neighbors_at_CellularAutomaton_internal_6 + local_neighbors_at_CellularAutomaton_internal_19
lw $t1, -28($fp)
lw $t2, -80($fp)
add $t1, $t1, $t2
sw $t1, -24($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_29 --> -120($fp)
# local_neighbors_at_CellularAutomaton_internal_29 = SELF
sw $s1, -120($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_27 --> -112($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_29 --> -120($fp)
# local_neighbors_at_CellularAutomaton_internal_27 = local_neighbors_at_CellularAutomaton_internal_29
lw $t1, -120($fp)
sw $t1, -112($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_27 --> -112($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_28 --> -116($fp)
# local_neighbors_at_CellularAutomaton_internal_28 = VCALL local_neighbors_at_CellularAutomaton_internal_27 west
# Save new self pointer in $s1
lw $s1, -112($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 64($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -116($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_22
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -124($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_26 --> -108($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_28 --> -116($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
# local_neighbors_at_CellularAutomaton_internal_26 = local_neighbors_at_CellularAutomaton_internal_28 - local_neighbors_at_CellularAutomaton_internal_30
lw $t1, -116($fp)
lw $t2, -124($fp)
sub $t1, $t1, $t2
sw $t1, -108($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_26 GOTO label_TRUE_99
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_26 GOTO label_TRUE_99
lw $t1, -108($fp)
beq $t1, 0, label_TRUE_99
# LOCAL local_neighbors_at_CellularAutomaton_internal_26 --> -108($fp)
# local_neighbors_at_CellularAutomaton_internal_26 = 0
li $t1, 0
sw $t1, -108($fp)
# GOTO label_END_100
j label_END_100
label_TRUE_99: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_26 --> -108($fp)
   # local_neighbors_at_CellularAutomaton_internal_26 = 1
   li $t1, 1
   sw $t1, -108($fp)
   label_END_100: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_26 GOTO label_FALSEIF_97
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_26 GOTO label_FALSEIF_97
lw $t1, -108($fp)
beq $t1, 0, label_FALSEIF_97
# LOCAL local_neighbors_at_CellularAutomaton_internal_25 --> -104($fp)
# local_neighbors_at_CellularAutomaton_internal_25 = 1
li $t1, 1
sw $t1, -104($fp)
# GOTO label_ENDIF_98
j label_ENDIF_98
label_FALSEIF_97: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_25 --> -104($fp)
   # local_neighbors_at_CellularAutomaton_internal_25 = 0
   li $t1, 0
   sw $t1, -104($fp)
   label_ENDIF_98: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_4 --> -20($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_5 --> -24($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_25 --> -104($fp)
# local_neighbors_at_CellularAutomaton_internal_4 = local_neighbors_at_CellularAutomaton_internal_5 + local_neighbors_at_CellularAutomaton_internal_25
lw $t1, -24($fp)
lw $t2, -104($fp)
add $t1, $t1, $t2
sw $t1, -20($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_35 --> -144($fp)
# local_neighbors_at_CellularAutomaton_internal_35 = SELF
sw $s1, -144($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_33 --> -136($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_35 --> -144($fp)
# local_neighbors_at_CellularAutomaton_internal_33 = local_neighbors_at_CellularAutomaton_internal_35
lw $t1, -144($fp)
sw $t1, -136($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_33 --> -136($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
# local_neighbors_at_CellularAutomaton_internal_34 = VCALL local_neighbors_at_CellularAutomaton_internal_33 northeast
# Save new self pointer in $s1
lw $s1, -136($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 72($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -140($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_36 --> -148($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_23
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -148($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_36 --> -148($fp)
# local_neighbors_at_CellularAutomaton_internal_32 = local_neighbors_at_CellularAutomaton_internal_34 - local_neighbors_at_CellularAutomaton_internal_36
lw $t1, -140($fp)
lw $t2, -148($fp)
sub $t1, $t1, $t2
sw $t1, -132($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_32 GOTO label_TRUE_103
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_32 GOTO label_TRUE_103
lw $t1, -132($fp)
beq $t1, 0, label_TRUE_103
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# local_neighbors_at_CellularAutomaton_internal_32 = 0
li $t1, 0
sw $t1, -132($fp)
# GOTO label_END_104
j label_END_104
label_TRUE_103: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
   # local_neighbors_at_CellularAutomaton_internal_32 = 1
   li $t1, 1
   sw $t1, -132($fp)
   label_END_104: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_32 GOTO label_FALSEIF_101
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_32 GOTO label_FALSEIF_101
lw $t1, -132($fp)
beq $t1, 0, label_FALSEIF_101
# LOCAL local_neighbors_at_CellularAutomaton_internal_31 --> -128($fp)
# local_neighbors_at_CellularAutomaton_internal_31 = 1
li $t1, 1
sw $t1, -128($fp)
# GOTO label_ENDIF_102
j label_ENDIF_102
label_FALSEIF_101: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_31 --> -128($fp)
   # local_neighbors_at_CellularAutomaton_internal_31 = 0
   li $t1, 0
   sw $t1, -128($fp)
   label_ENDIF_102: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_4 --> -20($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_31 --> -128($fp)
# local_neighbors_at_CellularAutomaton_internal_3 = local_neighbors_at_CellularAutomaton_internal_4 + local_neighbors_at_CellularAutomaton_internal_31
lw $t1, -20($fp)
lw $t2, -128($fp)
add $t1, $t1, $t2
sw $t1, -16($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_41 --> -168($fp)
# local_neighbors_at_CellularAutomaton_internal_41 = SELF
sw $s1, -168($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_39 --> -160($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_41 --> -168($fp)
# local_neighbors_at_CellularAutomaton_internal_39 = local_neighbors_at_CellularAutomaton_internal_41
lw $t1, -168($fp)
sw $t1, -160($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_39 --> -160($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
# local_neighbors_at_CellularAutomaton_internal_40 = VCALL local_neighbors_at_CellularAutomaton_internal_39 northwest
# Save new self pointer in $s1
lw $s1, -160($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 68($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -164($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_24
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -172($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_38 --> -156($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# local_neighbors_at_CellularAutomaton_internal_38 = local_neighbors_at_CellularAutomaton_internal_40 - local_neighbors_at_CellularAutomaton_internal_42
lw $t1, -164($fp)
lw $t2, -172($fp)
sub $t1, $t1, $t2
sw $t1, -156($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_38 GOTO label_TRUE_107
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_38 GOTO label_TRUE_107
lw $t1, -156($fp)
beq $t1, 0, label_TRUE_107
# LOCAL local_neighbors_at_CellularAutomaton_internal_38 --> -156($fp)
# local_neighbors_at_CellularAutomaton_internal_38 = 0
li $t1, 0
sw $t1, -156($fp)
# GOTO label_END_108
j label_END_108
label_TRUE_107: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_38 --> -156($fp)
   # local_neighbors_at_CellularAutomaton_internal_38 = 1
   li $t1, 1
   sw $t1, -156($fp)
   label_END_108: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_38 GOTO label_FALSEIF_105
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_38 GOTO label_FALSEIF_105
lw $t1, -156($fp)
beq $t1, 0, label_FALSEIF_105
# LOCAL local_neighbors_at_CellularAutomaton_internal_37 --> -152($fp)
# local_neighbors_at_CellularAutomaton_internal_37 = 1
li $t1, 1
sw $t1, -152($fp)
# GOTO label_ENDIF_106
j label_ENDIF_106
label_FALSEIF_105: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_37 --> -152($fp)
   # local_neighbors_at_CellularAutomaton_internal_37 = 0
   li $t1, 0
   sw $t1, -152($fp)
   label_ENDIF_106: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_2 --> -12($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_37 --> -152($fp)
# local_neighbors_at_CellularAutomaton_internal_2 = local_neighbors_at_CellularAutomaton_internal_3 + local_neighbors_at_CellularAutomaton_internal_37
lw $t1, -16($fp)
lw $t2, -152($fp)
add $t1, $t1, $t2
sw $t1, -12($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_47 --> -192($fp)
# local_neighbors_at_CellularAutomaton_internal_47 = SELF
sw $s1, -192($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_45 --> -184($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_47 --> -192($fp)
# local_neighbors_at_CellularAutomaton_internal_45 = local_neighbors_at_CellularAutomaton_internal_47
lw $t1, -192($fp)
sw $t1, -184($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_45 --> -184($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_46 --> -188($fp)
# local_neighbors_at_CellularAutomaton_internal_46 = VCALL local_neighbors_at_CellularAutomaton_internal_45 southeast
# Save new self pointer in $s1
lw $s1, -184($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 76($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -188($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_48 --> -196($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_25
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -196($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_46 --> -188($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_48 --> -196($fp)
# local_neighbors_at_CellularAutomaton_internal_44 = local_neighbors_at_CellularAutomaton_internal_46 - local_neighbors_at_CellularAutomaton_internal_48
lw $t1, -188($fp)
lw $t2, -196($fp)
sub $t1, $t1, $t2
sw $t1, -180($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_44 GOTO label_TRUE_111
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_44 GOTO label_TRUE_111
lw $t1, -180($fp)
beq $t1, 0, label_TRUE_111
# LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
# local_neighbors_at_CellularAutomaton_internal_44 = 0
li $t1, 0
sw $t1, -180($fp)
# GOTO label_END_112
j label_END_112
label_TRUE_111: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
   # local_neighbors_at_CellularAutomaton_internal_44 = 1
   li $t1, 1
   sw $t1, -180($fp)
   label_END_112: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_44 GOTO label_FALSEIF_109
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_44 GOTO label_FALSEIF_109
lw $t1, -180($fp)
beq $t1, 0, label_FALSEIF_109
# LOCAL local_neighbors_at_CellularAutomaton_internal_43 --> -176($fp)
# local_neighbors_at_CellularAutomaton_internal_43 = 1
li $t1, 1
sw $t1, -176($fp)
# GOTO label_ENDIF_110
j label_ENDIF_110
label_FALSEIF_109: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_43 --> -176($fp)
   # local_neighbors_at_CellularAutomaton_internal_43 = 0
   li $t1, 0
   sw $t1, -176($fp)
   label_ENDIF_110: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_2 --> -12($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_43 --> -176($fp)
# local_neighbors_at_CellularAutomaton_internal_1 = local_neighbors_at_CellularAutomaton_internal_2 + local_neighbors_at_CellularAutomaton_internal_43
lw $t1, -12($fp)
lw $t2, -176($fp)
add $t1, $t1, $t2
sw $t1, -8($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_53 --> -216($fp)
# local_neighbors_at_CellularAutomaton_internal_53 = SELF
sw $s1, -216($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_51 --> -208($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_53 --> -216($fp)
# local_neighbors_at_CellularAutomaton_internal_51 = local_neighbors_at_CellularAutomaton_internal_53
lw $t1, -216($fp)
sw $t1, -208($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_51 --> -208($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# local_neighbors_at_CellularAutomaton_internal_52 = VCALL local_neighbors_at_CellularAutomaton_internal_51 southwest
# Save new self pointer in $s1
lw $s1, -208($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 80($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -212($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_26
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -220($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
# local_neighbors_at_CellularAutomaton_internal_50 = local_neighbors_at_CellularAutomaton_internal_52 - local_neighbors_at_CellularAutomaton_internal_54
lw $t1, -212($fp)
lw $t2, -220($fp)
sub $t1, $t1, $t2
sw $t1, -204($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_115
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_115
lw $t1, -204($fp)
beq $t1, 0, label_TRUE_115
# LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
# local_neighbors_at_CellularAutomaton_internal_50 = 0
li $t1, 0
sw $t1, -204($fp)
# GOTO label_END_116
j label_END_116
label_TRUE_115: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
   # local_neighbors_at_CellularAutomaton_internal_50 = 1
   li $t1, 1
   sw $t1, -204($fp)
   label_END_116: 
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_FALSEIF_113
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_FALSEIF_113
lw $t1, -204($fp)
beq $t1, 0, label_FALSEIF_113
# LOCAL local_neighbors_at_CellularAutomaton_internal_49 --> -200($fp)
# local_neighbors_at_CellularAutomaton_internal_49 = 1
li $t1, 1
sw $t1, -200($fp)
# GOTO label_ENDIF_114
j label_ENDIF_114
label_FALSEIF_113: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_49 --> -200($fp)
   # local_neighbors_at_CellularAutomaton_internal_49 = 0
   li $t1, 0
   sw $t1, -200($fp)
   label_ENDIF_114: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_49 --> -200($fp)
# local_neighbors_at_CellularAutomaton_internal_0 = local_neighbors_at_CellularAutomaton_internal_1 + local_neighbors_at_CellularAutomaton_internal_49
lw $t1, -8($fp)
lw $t2, -200($fp)
add $t1, $t1, $t2
sw $t1, -4($fp)
# RETURN local_neighbors_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_neighbors_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 228
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_cell_at_next_evolution_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_at_next_evolution_at_CellularAutomaton_position_0
function_cell_at_next_evolution_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_at_next_evolution_at_CellularAutomaton.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_2 = local_cell_at_next_evolution_at_CellularAutomaton_internal_4
   lw $t1, -20($fp)
   sw $t1, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
   # PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_3 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 neighbors
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 84($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_1 = local_cell_at_next_evolution_at_CellularAutomaton_internal_3 - 3
   lw $t1, -16($fp)
   sub $t1, $t1, 3
   sw $t1, -8($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_1 GOTO label_TRUE_119
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_1 GOTO label_TRUE_119
   lw $t1, -8($fp)
   beq $t1, 0, label_TRUE_119
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_1 = 0
   li $t1, 0
   sw $t1, -8($fp)
   # GOTO label_END_120
j label_END_120
label_TRUE_119: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_1 = 1
   li $t1, 1
   sw $t1, -8($fp)
   label_END_120: 
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_117
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_1 GOTO label_FALSEIF_117
lw $t1, -8($fp)
beq $t1, 0, label_FALSEIF_117
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_27
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -24($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_0 = local_cell_at_next_evolution_at_CellularAutomaton_internal_5
lw $t1, -24($fp)
sw $t1, -4($fp)
# GOTO label_ENDIF_118
j label_ENDIF_118
label_FALSEIF_117: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_10 = SELF
   sw $s1, -44($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_8 = local_cell_at_next_evolution_at_CellularAutomaton_internal_10
   lw $t1, -44($fp)
   sw $t1, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
   # PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t1, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_9 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 neighbors
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 84($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_7 = local_cell_at_next_evolution_at_CellularAutomaton_internal_9 - 2
   lw $t1, -40($fp)
   sub $t1, $t1, 2
   sw $t1, -32($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_7 GOTO label_TRUE_123
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_7 GOTO label_TRUE_123
   lw $t1, -32($fp)
   beq $t1, 0, label_TRUE_123
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_7 = 0
   li $t1, 0
   sw $t1, -32($fp)
   # GOTO label_END_124
j label_END_124
label_TRUE_123: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_7 = 1
   li $t1, 1
   sw $t1, -32($fp)
   label_END_124: 
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_121
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_121
lw $t1, -32($fp)
beq $t1, 0, label_FALSEIF_121
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_15 --> -64($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_15 = SELF
sw $s1, -64($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 --> -56($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_15 --> -64($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_13 = local_cell_at_next_evolution_at_CellularAutomaton_internal_15
lw $t1, -64($fp)
sw $t1, -56($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
# PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
lw $t1, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 --> -56($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_14 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 cell
# Save new self pointer in $s1
lw $s1, -56($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 48($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -60($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_28
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -68($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_12 = local_cell_at_next_evolution_at_CellularAutomaton_internal_14 - local_cell_at_next_evolution_at_CellularAutomaton_internal_16
lw $t1, -60($fp)
lw $t2, -68($fp)
sub $t1, $t1, $t2
sw $t1, -52($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_127
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_127
lw $t1, -52($fp)
beq $t1, 0, label_TRUE_127
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_12 = 0
li $t1, 0
sw $t1, -52($fp)
# GOTO label_END_128
j label_END_128
label_TRUE_127: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_12 = 1
   li $t1, 1
   sw $t1, -52($fp)
   label_END_128: 
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_FALSEIF_125
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_FALSEIF_125
lw $t1, -52($fp)
beq $t1, 0, label_FALSEIF_125
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_29
sw $t1, 12($v0)
li $t1, 1
sw $t1, 16($v0)
sw $v0, -72($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_17 --> -72($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_11 = local_cell_at_next_evolution_at_CellularAutomaton_internal_17
lw $t1, -72($fp)
sw $t1, -48($fp)
# GOTO label_ENDIF_126
j label_ENDIF_126
label_FALSEIF_125: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_30
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -76($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_11 = local_cell_at_next_evolution_at_CellularAutomaton_internal_18
   lw $t1, -76($fp)
   sw $t1, -48($fp)
   label_ENDIF_126: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_6 = local_cell_at_next_evolution_at_CellularAutomaton_internal_11
lw $t1, -48($fp)
sw $t1, -28($fp)
# GOTO label_ENDIF_122
j label_ENDIF_122
label_FALSEIF_121: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_31
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -80($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_6 = local_cell_at_next_evolution_at_CellularAutomaton_internal_19
   lw $t1, -80($fp)
   sw $t1, -28($fp)
   label_ENDIF_122: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_0 = local_cell_at_next_evolution_at_CellularAutomaton_internal_6
lw $t1, -28($fp)
sw $t1, -4($fp)
label_ENDIF_118: 
# RETURN local_cell_at_next_evolution_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_cell_at_next_evolution_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 88
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_evolve_at_CellularAutomaton implementation.
# @Params:
function_evolve_at_CellularAutomaton: 
   # Allocate stack frame for function function_evolve_at_CellularAutomaton.
   subu $sp, $sp, 64
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 64
   # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
   # local_evolve_at_CellularAutomaton_position_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_evolve_at_CellularAutomaton_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_evolve_at_CellularAutomaton_internal_2 = local_evolve_at_CellularAutomaton_internal_4
   lw $t1, -20($fp)
   sw $t1, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_evolve_at_CellularAutomaton_internal_3 = VCALL local_evolve_at_CellularAutomaton_internal_2 num_cells
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 44($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_evolve_at_CellularAutomaton_num_1 --> -8($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_evolve_at_CellularAutomaton_num_1 = local_evolve_at_CellularAutomaton_internal_3
   lw $t1, -16($fp)
   sw $t1, -8($fp)
   # LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_0
   sw $t1, 12($v0)
   li $t1, 0
   sw $t1, 16($v0)
   sw $v0, -24($fp)
   label_WHILE_129: 
      # LOCAL local_evolve_at_CellularAutomaton_internal_6 --> -28($fp)
      # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
      # LOCAL local_evolve_at_CellularAutomaton_num_1 --> -8($fp)
      # local_evolve_at_CellularAutomaton_internal_6 = local_evolve_at_CellularAutomaton_position_0 - local_evolve_at_CellularAutomaton_num_1
      lw $t1, -4($fp)
      lw $t2, -8($fp)
      sub $t1, $t1, $t2
      sw $t1, -28($fp)
      # IF_GREATER_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_131
      # IF_GREATER_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_131
      lw $t1, -28($fp)
      bgt $t1, 0, label_FALSE_131
      # IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_131
      # IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_FALSE_131
      lw $t1, -28($fp)
      beq $t1, 0, label_FALSE_131
      # LOCAL local_evolve_at_CellularAutomaton_internal_6 --> -28($fp)
      # local_evolve_at_CellularAutomaton_internal_6 = 1
      li $t1, 1
      sw $t1, -28($fp)
      # GOTO label_END_132
j label_END_132
label_FALSE_131: 
   # LOCAL local_evolve_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_evolve_at_CellularAutomaton_internal_6 = 0
   li $t1, 0
   sw $t1, -28($fp)
   label_END_132: 
# IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_WHILE_END_130
# IF_ZERO local_evolve_at_CellularAutomaton_internal_6 GOTO label_WHILE_END_130
lw $t1, -28($fp)
beq $t1, 0, label_WHILE_END_130
# LOCAL local_evolve_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
# local_evolve_at_CellularAutomaton_internal_7 = local_evolve_at_CellularAutomaton_temp_5
lw $t1, -24($fp)
sw $t1, -32($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_11 --> -48($fp)
# local_evolve_at_CellularAutomaton_internal_11 = SELF
sw $s1, -48($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_11 --> -48($fp)
# local_evolve_at_CellularAutomaton_internal_9 = local_evolve_at_CellularAutomaton_internal_11
lw $t1, -48($fp)
sw $t1, -40($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_evolve_at_CellularAutomaton_position_0
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
lw $t1, -4($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_10 --> -44($fp)
# local_evolve_at_CellularAutomaton_internal_10 = VCALL local_evolve_at_CellularAutomaton_internal_9 cell_at_next_evolution
# Save new self pointer in $s1
lw $s1, -40($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 88($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -44($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_evolve_at_CellularAutomaton_internal_10
# LOCAL local_evolve_at_CellularAutomaton_internal_10 --> -44($fp)
lw $t1, -44($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
# local_evolve_at_CellularAutomaton_internal_8 = VCALL local_evolve_at_CellularAutomaton_internal_7 concat
# Save new self pointer in $s1
lw $s1, -32($fp)
# Get pointer to type
lw $t1, 4($s1)
# Get pointer to type's VTABLE
lw $t2, 0($t1)
# Get pointer to function address
lw $t3, 12($t2)
# Call function. Result is on $v0
jalr $t3
sw $v0, -36($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
# local_evolve_at_CellularAutomaton_temp_5 = local_evolve_at_CellularAutomaton_internal_8
lw $t1, -36($fp)
sw $t1, -24($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_12 --> -52($fp)
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
# local_evolve_at_CellularAutomaton_internal_12 = local_evolve_at_CellularAutomaton_position_0 + 1
lw $t1, -4($fp)
add $t1, $t1, 1
sw $t1, -52($fp)
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_12 --> -52($fp)
# local_evolve_at_CellularAutomaton_position_0 = local_evolve_at_CellularAutomaton_internal_12
lw $t1, -52($fp)
sw $t1, -4($fp)
# GOTO label_WHILE_129
j label_WHILE_129
label_WHILE_END_130: 
   # 
   # LOCAL local_evolve_at_CellularAutomaton_temp_5 --> -24($fp)
   lw $t1, -24($fp)
   sw $t1, 24($s1)
   # LOCAL local_evolve_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_evolve_at_CellularAutomaton_internal_13 = SELF
   sw $s1, -56($fp)
   # RETURN local_evolve_at_CellularAutomaton_internal_13
   lw $v0, -56($fp)
   # Deallocate stack frame for function function_evolve_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 64
   jr $ra
   # Function END


# function_option_at_CellularAutomaton implementation.
# @Params:
function_option_at_CellularAutomaton: 
   # Allocate stack frame for function function_option_at_CellularAutomaton.
   subu $sp, $sp, 664
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 664
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_num_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_option_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_option_at_CellularAutomaton_internal_1 = local_option_at_CellularAutomaton_internal_3
   lw $t1, -16($fp)
   sw $t1, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_32
   sw $t1, 12($v0)
   li $t1, 24
   sw $t1, 16($v0)
   sw $v0, -20($fp)
   # ARG local_option_at_CellularAutomaton_internal_4
   # LOCAL local_option_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t1, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_option_at_CellularAutomaton_internal_2 = VCALL local_option_at_CellularAutomaton_internal_1 out_string
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_option_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_option_at_CellularAutomaton_internal_5 = local_option_at_CellularAutomaton_internal_7
   lw $t1, -32($fp)
   sw $t1, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_33
   sw $t1, 12($v0)
   li $t1, 13
   sw $t1, 16($v0)
   sw $v0, -36($fp)
   # ARG local_option_at_CellularAutomaton_internal_8
   # LOCAL local_option_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t1, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_option_at_CellularAutomaton_internal_6 = VCALL local_option_at_CellularAutomaton_internal_5 out_string
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_option_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_option_at_CellularAutomaton_internal_9 = local_option_at_CellularAutomaton_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_34
   sw $t1, 12($v0)
   li $t1, 48
   sw $t1, 16($v0)
   sw $v0, -52($fp)
   # ARG local_option_at_CellularAutomaton_internal_12
   # LOCAL local_option_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t1, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_option_at_CellularAutomaton_internal_10 = VCALL local_option_at_CellularAutomaton_internal_9 out_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_option_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_option_at_CellularAutomaton_internal_13 = local_option_at_CellularAutomaton_internal_15
   lw $t1, -64($fp)
   sw $t1, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_35
   sw $t1, 12($v0)
   li $t1, 48
   sw $t1, 16($v0)
   sw $v0, -68($fp)
   # ARG local_option_at_CellularAutomaton_internal_16
   # LOCAL local_option_at_CellularAutomaton_internal_16 --> -68($fp)
   lw $t1, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_option_at_CellularAutomaton_internal_14 = VCALL local_option_at_CellularAutomaton_internal_13 out_string
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_option_at_CellularAutomaton_internal_19 = SELF
   sw $s1, -80($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_option_at_CellularAutomaton_internal_17 = local_option_at_CellularAutomaton_internal_19
   lw $t1, -80($fp)
   sw $t1, -72($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_36
   sw $t1, 12($v0)
   li $t1, 10
   sw $t1, 16($v0)
   sw $v0, -84($fp)
   # ARG local_option_at_CellularAutomaton_internal_20
   # LOCAL local_option_at_CellularAutomaton_internal_20 --> -84($fp)
   lw $t1, -84($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_option_at_CellularAutomaton_internal_18 = VCALL local_option_at_CellularAutomaton_internal_17 out_string
   # Save new self pointer in $s1
   lw $s1, -72($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -76($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_23 --> -96($fp)
   # local_option_at_CellularAutomaton_internal_23 = SELF
   sw $s1, -96($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_21 --> -88($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_23 --> -96($fp)
   # local_option_at_CellularAutomaton_internal_21 = local_option_at_CellularAutomaton_internal_23
   lw $t1, -96($fp)
   sw $t1, -88($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_24 --> -100($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_37
   sw $t1, 12($v0)
   li $t1, 26
   sw $t1, 16($v0)
   sw $v0, -100($fp)
   # ARG local_option_at_CellularAutomaton_internal_24
   # LOCAL local_option_at_CellularAutomaton_internal_24 --> -100($fp)
   lw $t1, -100($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_21 --> -88($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_option_at_CellularAutomaton_internal_22 = VCALL local_option_at_CellularAutomaton_internal_21 out_string
   # Save new self pointer in $s1
   lw $s1, -88($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -92($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_option_at_CellularAutomaton_internal_27 = SELF
   sw $s1, -112($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_25 --> -104($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_option_at_CellularAutomaton_internal_25 = local_option_at_CellularAutomaton_internal_27
   lw $t1, -112($fp)
   sw $t1, -104($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_38
   sw $t1, 12($v0)
   li $t1, 22
   sw $t1, 16($v0)
   sw $v0, -116($fp)
   # ARG local_option_at_CellularAutomaton_internal_28
   # LOCAL local_option_at_CellularAutomaton_internal_28 --> -116($fp)
   lw $t1, -116($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_25 --> -104($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_26 --> -108($fp)
   # local_option_at_CellularAutomaton_internal_26 = VCALL local_option_at_CellularAutomaton_internal_25 out_string
   # Save new self pointer in $s1
   lw $s1, -104($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -108($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_31 --> -128($fp)
   # local_option_at_CellularAutomaton_internal_31 = SELF
   sw $s1, -128($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_29 --> -120($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_31 --> -128($fp)
   # local_option_at_CellularAutomaton_internal_29 = local_option_at_CellularAutomaton_internal_31
   lw $t1, -128($fp)
   sw $t1, -120($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_39
   sw $t1, 12($v0)
   li $t1, 28
   sw $t1, 16($v0)
   sw $v0, -132($fp)
   # ARG local_option_at_CellularAutomaton_internal_32
   # LOCAL local_option_at_CellularAutomaton_internal_32 --> -132($fp)
   lw $t1, -132($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_29 --> -120($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_30 --> -124($fp)
   # local_option_at_CellularAutomaton_internal_30 = VCALL local_option_at_CellularAutomaton_internal_29 out_string
   # Save new self pointer in $s1
   lw $s1, -120($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -124($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_35 --> -144($fp)
   # local_option_at_CellularAutomaton_internal_35 = SELF
   sw $s1, -144($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_33 --> -136($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_35 --> -144($fp)
   # local_option_at_CellularAutomaton_internal_33 = local_option_at_CellularAutomaton_internal_35
   lw $t1, -144($fp)
   sw $t1, -136($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_40
   sw $t1, 12($v0)
   li $t1, 25
   sw $t1, 16($v0)
   sw $v0, -148($fp)
   # ARG local_option_at_CellularAutomaton_internal_36
   # LOCAL local_option_at_CellularAutomaton_internal_36 --> -148($fp)
   lw $t1, -148($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_33 --> -136($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_34 --> -140($fp)
   # local_option_at_CellularAutomaton_internal_34 = VCALL local_option_at_CellularAutomaton_internal_33 out_string
   # Save new self pointer in $s1
   lw $s1, -136($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -140($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_39 --> -160($fp)
   # local_option_at_CellularAutomaton_internal_39 = SELF
   sw $s1, -160($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_37 --> -152($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_39 --> -160($fp)
   # local_option_at_CellularAutomaton_internal_37 = local_option_at_CellularAutomaton_internal_39
   lw $t1, -160($fp)
   sw $t1, -152($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_41
   sw $t1, 12($v0)
   li $t1, 11
   sw $t1, 16($v0)
   sw $v0, -164($fp)
   # ARG local_option_at_CellularAutomaton_internal_40
   # LOCAL local_option_at_CellularAutomaton_internal_40 --> -164($fp)
   lw $t1, -164($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_37 --> -152($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_38 --> -156($fp)
   # local_option_at_CellularAutomaton_internal_38 = VCALL local_option_at_CellularAutomaton_internal_37 out_string
   # Save new self pointer in $s1
   lw $s1, -152($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -156($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_43 --> -176($fp)
   # local_option_at_CellularAutomaton_internal_43 = SELF
   sw $s1, -176($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_41 --> -168($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_43 --> -176($fp)
   # local_option_at_CellularAutomaton_internal_41 = local_option_at_CellularAutomaton_internal_43
   lw $t1, -176($fp)
   sw $t1, -168($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_42
   sw $t1, 12($v0)
   li $t1, 21
   sw $t1, 16($v0)
   sw $v0, -180($fp)
   # ARG local_option_at_CellularAutomaton_internal_44
   # LOCAL local_option_at_CellularAutomaton_internal_44 --> -180($fp)
   lw $t1, -180($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_41 --> -168($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_42 --> -172($fp)
   # local_option_at_CellularAutomaton_internal_42 = VCALL local_option_at_CellularAutomaton_internal_41 out_string
   # Save new self pointer in $s1
   lw $s1, -168($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -172($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_47 --> -192($fp)
   # local_option_at_CellularAutomaton_internal_47 = SELF
   sw $s1, -192($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_45 --> -184($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_47 --> -192($fp)
   # local_option_at_CellularAutomaton_internal_45 = local_option_at_CellularAutomaton_internal_47
   lw $t1, -192($fp)
   sw $t1, -184($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_48 --> -196($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_43
   sw $t1, 12($v0)
   li $t1, 32
   sw $t1, 16($v0)
   sw $v0, -196($fp)
   # ARG local_option_at_CellularAutomaton_internal_48
   # LOCAL local_option_at_CellularAutomaton_internal_48 --> -196($fp)
   lw $t1, -196($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_45 --> -184($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_46 --> -188($fp)
   # local_option_at_CellularAutomaton_internal_46 = VCALL local_option_at_CellularAutomaton_internal_45 out_string
   # Save new self pointer in $s1
   lw $s1, -184($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -188($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_51 --> -208($fp)
   # local_option_at_CellularAutomaton_internal_51 = SELF
   sw $s1, -208($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_49 --> -200($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_51 --> -208($fp)
   # local_option_at_CellularAutomaton_internal_49 = local_option_at_CellularAutomaton_internal_51
   lw $t1, -208($fp)
   sw $t1, -200($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_44
   sw $t1, 12($v0)
   li $t1, 18
   sw $t1, 16($v0)
   sw $v0, -212($fp)
   # ARG local_option_at_CellularAutomaton_internal_52
   # LOCAL local_option_at_CellularAutomaton_internal_52 --> -212($fp)
   lw $t1, -212($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_49 --> -200($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_50 --> -204($fp)
   # local_option_at_CellularAutomaton_internal_50 = VCALL local_option_at_CellularAutomaton_internal_49 out_string
   # Save new self pointer in $s1
   lw $s1, -200($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -204($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_55 --> -224($fp)
   # local_option_at_CellularAutomaton_internal_55 = SELF
   sw $s1, -224($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_53 --> -216($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_55 --> -224($fp)
   # local_option_at_CellularAutomaton_internal_53 = local_option_at_CellularAutomaton_internal_55
   lw $t1, -224($fp)
   sw $t1, -216($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_45
   sw $t1, 12($v0)
   li $t1, 12
   sw $t1, 16($v0)
   sw $v0, -228($fp)
   # ARG local_option_at_CellularAutomaton_internal_56
   # LOCAL local_option_at_CellularAutomaton_internal_56 --> -228($fp)
   lw $t1, -228($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_53 --> -216($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_54 --> -220($fp)
   # local_option_at_CellularAutomaton_internal_54 = VCALL local_option_at_CellularAutomaton_internal_53 out_string
   # Save new self pointer in $s1
   lw $s1, -216($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -220($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_59 --> -240($fp)
   # local_option_at_CellularAutomaton_internal_59 = SELF
   sw $s1, -240($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_57 --> -232($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_59 --> -240($fp)
   # local_option_at_CellularAutomaton_internal_57 = local_option_at_CellularAutomaton_internal_59
   lw $t1, -240($fp)
   sw $t1, -232($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_60 --> -244($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_46
   sw $t1, 12($v0)
   li $t1, 17
   sw $t1, 16($v0)
   sw $v0, -244($fp)
   # ARG local_option_at_CellularAutomaton_internal_60
   # LOCAL local_option_at_CellularAutomaton_internal_60 --> -244($fp)
   lw $t1, -244($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_57 --> -232($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_58 --> -236($fp)
   # local_option_at_CellularAutomaton_internal_58 = VCALL local_option_at_CellularAutomaton_internal_57 out_string
   # Save new self pointer in $s1
   lw $s1, -232($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -236($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_63 --> -256($fp)
   # local_option_at_CellularAutomaton_internal_63 = SELF
   sw $s1, -256($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_61 --> -248($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_63 --> -256($fp)
   # local_option_at_CellularAutomaton_internal_61 = local_option_at_CellularAutomaton_internal_63
   lw $t1, -256($fp)
   sw $t1, -248($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_64 --> -260($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_47
   sw $t1, 12($v0)
   li $t1, 12
   sw $t1, 16($v0)
   sw $v0, -260($fp)
   # ARG local_option_at_CellularAutomaton_internal_64
   # LOCAL local_option_at_CellularAutomaton_internal_64 --> -260($fp)
   lw $t1, -260($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_61 --> -248($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_62 --> -252($fp)
   # local_option_at_CellularAutomaton_internal_62 = VCALL local_option_at_CellularAutomaton_internal_61 out_string
   # Save new self pointer in $s1
   lw $s1, -248($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -252($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_67 --> -272($fp)
   # local_option_at_CellularAutomaton_internal_67 = SELF
   sw $s1, -272($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_65 --> -264($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_67 --> -272($fp)
   # local_option_at_CellularAutomaton_internal_65 = local_option_at_CellularAutomaton_internal_67
   lw $t1, -272($fp)
   sw $t1, -264($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_68 --> -276($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_48
   sw $t1, 12($v0)
   li $t1, 13
   sw $t1, 16($v0)
   sw $v0, -276($fp)
   # ARG local_option_at_CellularAutomaton_internal_68
   # LOCAL local_option_at_CellularAutomaton_internal_68 --> -276($fp)
   lw $t1, -276($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_65 --> -264($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_66 --> -268($fp)
   # local_option_at_CellularAutomaton_internal_66 = VCALL local_option_at_CellularAutomaton_internal_65 out_string
   # Save new self pointer in $s1
   lw $s1, -264($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -268($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_71 --> -288($fp)
   # local_option_at_CellularAutomaton_internal_71 = SELF
   sw $s1, -288($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_69 --> -280($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_71 --> -288($fp)
   # local_option_at_CellularAutomaton_internal_69 = local_option_at_CellularAutomaton_internal_71
   lw $t1, -288($fp)
   sw $t1, -280($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_72 --> -292($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_49
   sw $t1, 12($v0)
   li $t1, 13
   sw $t1, 16($v0)
   sw $v0, -292($fp)
   # ARG local_option_at_CellularAutomaton_internal_72
   # LOCAL local_option_at_CellularAutomaton_internal_72 --> -292($fp)
   lw $t1, -292($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_69 --> -280($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_70 --> -284($fp)
   # local_option_at_CellularAutomaton_internal_70 = VCALL local_option_at_CellularAutomaton_internal_69 out_string
   # Save new self pointer in $s1
   lw $s1, -280($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -284($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_75 --> -304($fp)
   # local_option_at_CellularAutomaton_internal_75 = SELF
   sw $s1, -304($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_73 --> -296($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_75 --> -304($fp)
   # local_option_at_CellularAutomaton_internal_73 = local_option_at_CellularAutomaton_internal_75
   lw $t1, -304($fp)
   sw $t1, -296($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_76 --> -308($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_50
   sw $t1, 12($v0)
   li $t1, 12
   sw $t1, 16($v0)
   sw $v0, -308($fp)
   # ARG local_option_at_CellularAutomaton_internal_76
   # LOCAL local_option_at_CellularAutomaton_internal_76 --> -308($fp)
   lw $t1, -308($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_73 --> -296($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_74 --> -300($fp)
   # local_option_at_CellularAutomaton_internal_74 = VCALL local_option_at_CellularAutomaton_internal_73 out_string
   # Save new self pointer in $s1
   lw $s1, -296($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -300($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_79 --> -320($fp)
   # local_option_at_CellularAutomaton_internal_79 = SELF
   sw $s1, -320($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_77 --> -312($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_79 --> -320($fp)
   # local_option_at_CellularAutomaton_internal_77 = local_option_at_CellularAutomaton_internal_79
   lw $t1, -320($fp)
   sw $t1, -312($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_80 --> -324($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_51
   sw $t1, 12($v0)
   li $t1, 13
   sw $t1, 16($v0)
   sw $v0, -324($fp)
   # ARG local_option_at_CellularAutomaton_internal_80
   # LOCAL local_option_at_CellularAutomaton_internal_80 --> -324($fp)
   lw $t1, -324($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_77 --> -312($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_78 --> -316($fp)
   # local_option_at_CellularAutomaton_internal_78 = VCALL local_option_at_CellularAutomaton_internal_77 out_string
   # Save new self pointer in $s1
   lw $s1, -312($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -316($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_83 --> -336($fp)
   # local_option_at_CellularAutomaton_internal_83 = SELF
   sw $s1, -336($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_81 --> -328($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_83 --> -336($fp)
   # local_option_at_CellularAutomaton_internal_81 = local_option_at_CellularAutomaton_internal_83
   lw $t1, -336($fp)
   sw $t1, -328($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_84 --> -340($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_52
   sw $t1, 12($v0)
   li $t1, 13
   sw $t1, 16($v0)
   sw $v0, -340($fp)
   # ARG local_option_at_CellularAutomaton_internal_84
   # LOCAL local_option_at_CellularAutomaton_internal_84 --> -340($fp)
   lw $t1, -340($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_81 --> -328($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_82 --> -332($fp)
   # local_option_at_CellularAutomaton_internal_82 = VCALL local_option_at_CellularAutomaton_internal_81 out_string
   # Save new self pointer in $s1
   lw $s1, -328($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -332($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_87 --> -352($fp)
   # local_option_at_CellularAutomaton_internal_87 = SELF
   sw $s1, -352($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_85 --> -344($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_87 --> -352($fp)
   # local_option_at_CellularAutomaton_internal_85 = local_option_at_CellularAutomaton_internal_87
   lw $t1, -352($fp)
   sw $t1, -344($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_88 --> -356($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_53
   sw $t1, 12($v0)
   li $t1, 13
   sw $t1, 16($v0)
   sw $v0, -356($fp)
   # ARG local_option_at_CellularAutomaton_internal_88
   # LOCAL local_option_at_CellularAutomaton_internal_88 --> -356($fp)
   lw $t1, -356($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_85 --> -344($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_86 --> -348($fp)
   # local_option_at_CellularAutomaton_internal_86 = VCALL local_option_at_CellularAutomaton_internal_85 out_string
   # Save new self pointer in $s1
   lw $s1, -344($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -348($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_91 --> -368($fp)
   # local_option_at_CellularAutomaton_internal_91 = SELF
   sw $s1, -368($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_89 --> -360($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_91 --> -368($fp)
   # local_option_at_CellularAutomaton_internal_89 = local_option_at_CellularAutomaton_internal_91
   lw $t1, -368($fp)
   sw $t1, -360($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_92 --> -372($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_54
   sw $t1, 12($v0)
   li $t1, 15
   sw $t1, 16($v0)
   sw $v0, -372($fp)
   # ARG local_option_at_CellularAutomaton_internal_92
   # LOCAL local_option_at_CellularAutomaton_internal_92 --> -372($fp)
   lw $t1, -372($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_89 --> -360($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_90 --> -364($fp)
   # local_option_at_CellularAutomaton_internal_90 = VCALL local_option_at_CellularAutomaton_internal_89 out_string
   # Save new self pointer in $s1
   lw $s1, -360($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -364($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_95 --> -384($fp)
   # local_option_at_CellularAutomaton_internal_95 = SELF
   sw $s1, -384($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_93 --> -376($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_95 --> -384($fp)
   # local_option_at_CellularAutomaton_internal_93 = local_option_at_CellularAutomaton_internal_95
   lw $t1, -384($fp)
   sw $t1, -376($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_93 --> -376($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_94 --> -380($fp)
   # local_option_at_CellularAutomaton_internal_94 = VCALL local_option_at_CellularAutomaton_internal_93 in_int
   # Save new self pointer in $s1
   lw $s1, -376($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 24($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -380($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_94 --> -380($fp)
   # local_option_at_CellularAutomaton_num_0 = local_option_at_CellularAutomaton_internal_94
   lw $t1, -380($fp)
   sw $t1, -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_98 --> -396($fp)
   # local_option_at_CellularAutomaton_internal_98 = SELF
   sw $s1, -396($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_96 --> -388($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_98 --> -396($fp)
   # local_option_at_CellularAutomaton_internal_96 = local_option_at_CellularAutomaton_internal_98
   lw $t1, -396($fp)
   sw $t1, -388($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_99 --> -400($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_55
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -400($fp)
   # ARG local_option_at_CellularAutomaton_internal_99
   # LOCAL local_option_at_CellularAutomaton_internal_99 --> -400($fp)
   lw $t1, -400($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_96 --> -388($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_97 --> -392($fp)
   # local_option_at_CellularAutomaton_internal_97 = VCALL local_option_at_CellularAutomaton_internal_96 out_string
   # Save new self pointer in $s1
   lw $s1, -388($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -392($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_101 --> -408($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_101 = local_option_at_CellularAutomaton_num_0 - 1
   lw $t1, -4($fp)
   sub $t1, $t1, 1
   sw $t1, -408($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_101 GOTO label_TRUE_135
   # IF_ZERO local_option_at_CellularAutomaton_internal_101 GOTO label_TRUE_135
   lw $t1, -408($fp)
   beq $t1, 0, label_TRUE_135
   # LOCAL local_option_at_CellularAutomaton_internal_101 --> -408($fp)
   # local_option_at_CellularAutomaton_internal_101 = 0
   li $t1, 0
   sw $t1, -408($fp)
   # GOTO label_END_136
j label_END_136
label_TRUE_135: 
   # LOCAL local_option_at_CellularAutomaton_internal_101 --> -408($fp)
   # local_option_at_CellularAutomaton_internal_101 = 1
   li $t1, 1
   sw $t1, -408($fp)
   label_END_136: 
# IF_ZERO local_option_at_CellularAutomaton_internal_101 GOTO label_FALSEIF_133
# IF_ZERO local_option_at_CellularAutomaton_internal_101 GOTO label_FALSEIF_133
lw $t1, -408($fp)
beq $t1, 0, label_FALSEIF_133
# LOCAL local_option_at_CellularAutomaton_internal_102 --> -412($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_56
sw $t1, 12($v0)
li $t1, 20
sw $t1, 16($v0)
sw $v0, -412($fp)
# LOCAL local_option_at_CellularAutomaton_internal_100 --> -404($fp)
# LOCAL local_option_at_CellularAutomaton_internal_102 --> -412($fp)
# local_option_at_CellularAutomaton_internal_100 = local_option_at_CellularAutomaton_internal_102
lw $t1, -412($fp)
sw $t1, -404($fp)
# GOTO label_ENDIF_134
j label_ENDIF_134
label_FALSEIF_133: 
   # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_104 = local_option_at_CellularAutomaton_num_0 - 2
   lw $t1, -4($fp)
   sub $t1, $t1, 2
   sw $t1, -420($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_104 GOTO label_TRUE_139
   # IF_ZERO local_option_at_CellularAutomaton_internal_104 GOTO label_TRUE_139
   lw $t1, -420($fp)
   beq $t1, 0, label_TRUE_139
   # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
   # local_option_at_CellularAutomaton_internal_104 = 0
   li $t1, 0
   sw $t1, -420($fp)
   # GOTO label_END_140
j label_END_140
label_TRUE_139: 
   # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
   # local_option_at_CellularAutomaton_internal_104 = 1
   li $t1, 1
   sw $t1, -420($fp)
   label_END_140: 
# IF_ZERO local_option_at_CellularAutomaton_internal_104 GOTO label_FALSEIF_137
# IF_ZERO local_option_at_CellularAutomaton_internal_104 GOTO label_FALSEIF_137
lw $t1, -420($fp)
beq $t1, 0, label_FALSEIF_137
# LOCAL local_option_at_CellularAutomaton_internal_105 --> -424($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_57
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -424($fp)
# LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
# LOCAL local_option_at_CellularAutomaton_internal_105 --> -424($fp)
# local_option_at_CellularAutomaton_internal_103 = local_option_at_CellularAutomaton_internal_105
lw $t1, -424($fp)
sw $t1, -416($fp)
# GOTO label_ENDIF_138
j label_ENDIF_138
label_FALSEIF_137: 
   # LOCAL local_option_at_CellularAutomaton_internal_107 --> -432($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_107 = local_option_at_CellularAutomaton_num_0 - 3
   lw $t1, -4($fp)
   sub $t1, $t1, 3
   sw $t1, -432($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_107 GOTO label_TRUE_143
   # IF_ZERO local_option_at_CellularAutomaton_internal_107 GOTO label_TRUE_143
   lw $t1, -432($fp)
   beq $t1, 0, label_TRUE_143
   # LOCAL local_option_at_CellularAutomaton_internal_107 --> -432($fp)
   # local_option_at_CellularAutomaton_internal_107 = 0
   li $t1, 0
   sw $t1, -432($fp)
   # GOTO label_END_144
j label_END_144
label_TRUE_143: 
   # LOCAL local_option_at_CellularAutomaton_internal_107 --> -432($fp)
   # local_option_at_CellularAutomaton_internal_107 = 1
   li $t1, 1
   sw $t1, -432($fp)
   label_END_144: 
# IF_ZERO local_option_at_CellularAutomaton_internal_107 GOTO label_FALSEIF_141
# IF_ZERO local_option_at_CellularAutomaton_internal_107 GOTO label_FALSEIF_141
lw $t1, -432($fp)
beq $t1, 0, label_FALSEIF_141
# LOCAL local_option_at_CellularAutomaton_internal_108 --> -436($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_58
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -436($fp)
# LOCAL local_option_at_CellularAutomaton_internal_106 --> -428($fp)
# LOCAL local_option_at_CellularAutomaton_internal_108 --> -436($fp)
# local_option_at_CellularAutomaton_internal_106 = local_option_at_CellularAutomaton_internal_108
lw $t1, -436($fp)
sw $t1, -428($fp)
# GOTO label_ENDIF_142
j label_ENDIF_142
label_FALSEIF_141: 
   # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_110 = local_option_at_CellularAutomaton_num_0 - 4
   lw $t1, -4($fp)
   sub $t1, $t1, 4
   sw $t1, -444($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_110 GOTO label_TRUE_147
   # IF_ZERO local_option_at_CellularAutomaton_internal_110 GOTO label_TRUE_147
   lw $t1, -444($fp)
   beq $t1, 0, label_TRUE_147
   # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
   # local_option_at_CellularAutomaton_internal_110 = 0
   li $t1, 0
   sw $t1, -444($fp)
   # GOTO label_END_148
j label_END_148
label_TRUE_147: 
   # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
   # local_option_at_CellularAutomaton_internal_110 = 1
   li $t1, 1
   sw $t1, -444($fp)
   label_END_148: 
# IF_ZERO local_option_at_CellularAutomaton_internal_110 GOTO label_FALSEIF_145
# IF_ZERO local_option_at_CellularAutomaton_internal_110 GOTO label_FALSEIF_145
lw $t1, -444($fp)
beq $t1, 0, label_FALSEIF_145
# LOCAL local_option_at_CellularAutomaton_internal_111 --> -448($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_59
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -448($fp)
# LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
# LOCAL local_option_at_CellularAutomaton_internal_111 --> -448($fp)
# local_option_at_CellularAutomaton_internal_109 = local_option_at_CellularAutomaton_internal_111
lw $t1, -448($fp)
sw $t1, -440($fp)
# GOTO label_ENDIF_146
j label_ENDIF_146
label_FALSEIF_145: 
   # LOCAL local_option_at_CellularAutomaton_internal_113 --> -456($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_113 = local_option_at_CellularAutomaton_num_0 - 5
   lw $t1, -4($fp)
   sub $t1, $t1, 5
   sw $t1, -456($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_113 GOTO label_TRUE_151
   # IF_ZERO local_option_at_CellularAutomaton_internal_113 GOTO label_TRUE_151
   lw $t1, -456($fp)
   beq $t1, 0, label_TRUE_151
   # LOCAL local_option_at_CellularAutomaton_internal_113 --> -456($fp)
   # local_option_at_CellularAutomaton_internal_113 = 0
   li $t1, 0
   sw $t1, -456($fp)
   # GOTO label_END_152
j label_END_152
label_TRUE_151: 
   # LOCAL local_option_at_CellularAutomaton_internal_113 --> -456($fp)
   # local_option_at_CellularAutomaton_internal_113 = 1
   li $t1, 1
   sw $t1, -456($fp)
   label_END_152: 
# IF_ZERO local_option_at_CellularAutomaton_internal_113 GOTO label_FALSEIF_149
# IF_ZERO local_option_at_CellularAutomaton_internal_113 GOTO label_FALSEIF_149
lw $t1, -456($fp)
beq $t1, 0, label_FALSEIF_149
# LOCAL local_option_at_CellularAutomaton_internal_114 --> -460($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_60
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -460($fp)
# LOCAL local_option_at_CellularAutomaton_internal_112 --> -452($fp)
# LOCAL local_option_at_CellularAutomaton_internal_114 --> -460($fp)
# local_option_at_CellularAutomaton_internal_112 = local_option_at_CellularAutomaton_internal_114
lw $t1, -460($fp)
sw $t1, -452($fp)
# GOTO label_ENDIF_150
j label_ENDIF_150
label_FALSEIF_149: 
   # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_116 = local_option_at_CellularAutomaton_num_0 - 6
   lw $t1, -4($fp)
   sub $t1, $t1, 6
   sw $t1, -468($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_116 GOTO label_TRUE_155
   # IF_ZERO local_option_at_CellularAutomaton_internal_116 GOTO label_TRUE_155
   lw $t1, -468($fp)
   beq $t1, 0, label_TRUE_155
   # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
   # local_option_at_CellularAutomaton_internal_116 = 0
   li $t1, 0
   sw $t1, -468($fp)
   # GOTO label_END_156
j label_END_156
label_TRUE_155: 
   # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
   # local_option_at_CellularAutomaton_internal_116 = 1
   li $t1, 1
   sw $t1, -468($fp)
   label_END_156: 
# IF_ZERO local_option_at_CellularAutomaton_internal_116 GOTO label_FALSEIF_153
# IF_ZERO local_option_at_CellularAutomaton_internal_116 GOTO label_FALSEIF_153
lw $t1, -468($fp)
beq $t1, 0, label_FALSEIF_153
# LOCAL local_option_at_CellularAutomaton_internal_117 --> -472($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_61
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -472($fp)
# LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
# LOCAL local_option_at_CellularAutomaton_internal_117 --> -472($fp)
# local_option_at_CellularAutomaton_internal_115 = local_option_at_CellularAutomaton_internal_117
lw $t1, -472($fp)
sw $t1, -464($fp)
# GOTO label_ENDIF_154
j label_ENDIF_154
label_FALSEIF_153: 
   # LOCAL local_option_at_CellularAutomaton_internal_119 --> -480($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_119 = local_option_at_CellularAutomaton_num_0 - 7
   lw $t1, -4($fp)
   sub $t1, $t1, 7
   sw $t1, -480($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_119 GOTO label_TRUE_159
   # IF_ZERO local_option_at_CellularAutomaton_internal_119 GOTO label_TRUE_159
   lw $t1, -480($fp)
   beq $t1, 0, label_TRUE_159
   # LOCAL local_option_at_CellularAutomaton_internal_119 --> -480($fp)
   # local_option_at_CellularAutomaton_internal_119 = 0
   li $t1, 0
   sw $t1, -480($fp)
   # GOTO label_END_160
j label_END_160
label_TRUE_159: 
   # LOCAL local_option_at_CellularAutomaton_internal_119 --> -480($fp)
   # local_option_at_CellularAutomaton_internal_119 = 1
   li $t1, 1
   sw $t1, -480($fp)
   label_END_160: 
# IF_ZERO local_option_at_CellularAutomaton_internal_119 GOTO label_FALSEIF_157
# IF_ZERO local_option_at_CellularAutomaton_internal_119 GOTO label_FALSEIF_157
lw $t1, -480($fp)
beq $t1, 0, label_FALSEIF_157
# LOCAL local_option_at_CellularAutomaton_internal_120 --> -484($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_62
sw $t1, 12($v0)
li $t1, 20
sw $t1, 16($v0)
sw $v0, -484($fp)
# LOCAL local_option_at_CellularAutomaton_internal_118 --> -476($fp)
# LOCAL local_option_at_CellularAutomaton_internal_120 --> -484($fp)
# local_option_at_CellularAutomaton_internal_118 = local_option_at_CellularAutomaton_internal_120
lw $t1, -484($fp)
sw $t1, -476($fp)
# GOTO label_ENDIF_158
j label_ENDIF_158
label_FALSEIF_157: 
   # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_122 = local_option_at_CellularAutomaton_num_0 - 8
   lw $t1, -4($fp)
   sub $t1, $t1, 8
   sw $t1, -492($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_122 GOTO label_TRUE_163
   # IF_ZERO local_option_at_CellularAutomaton_internal_122 GOTO label_TRUE_163
   lw $t1, -492($fp)
   beq $t1, 0, label_TRUE_163
   # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
   # local_option_at_CellularAutomaton_internal_122 = 0
   li $t1, 0
   sw $t1, -492($fp)
   # GOTO label_END_164
j label_END_164
label_TRUE_163: 
   # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
   # local_option_at_CellularAutomaton_internal_122 = 1
   li $t1, 1
   sw $t1, -492($fp)
   label_END_164: 
# IF_ZERO local_option_at_CellularAutomaton_internal_122 GOTO label_FALSEIF_161
# IF_ZERO local_option_at_CellularAutomaton_internal_122 GOTO label_FALSEIF_161
lw $t1, -492($fp)
beq $t1, 0, label_FALSEIF_161
# LOCAL local_option_at_CellularAutomaton_internal_123 --> -496($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_63
sw $t1, 12($v0)
li $t1, 20
sw $t1, 16($v0)
sw $v0, -496($fp)
# LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
# LOCAL local_option_at_CellularAutomaton_internal_123 --> -496($fp)
# local_option_at_CellularAutomaton_internal_121 = local_option_at_CellularAutomaton_internal_123
lw $t1, -496($fp)
sw $t1, -488($fp)
# GOTO label_ENDIF_162
j label_ENDIF_162
label_FALSEIF_161: 
   # LOCAL local_option_at_CellularAutomaton_internal_125 --> -504($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_125 = local_option_at_CellularAutomaton_num_0 - 9
   lw $t1, -4($fp)
   sub $t1, $t1, 9
   sw $t1, -504($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_125 GOTO label_TRUE_167
   # IF_ZERO local_option_at_CellularAutomaton_internal_125 GOTO label_TRUE_167
   lw $t1, -504($fp)
   beq $t1, 0, label_TRUE_167
   # LOCAL local_option_at_CellularAutomaton_internal_125 --> -504($fp)
   # local_option_at_CellularAutomaton_internal_125 = 0
   li $t1, 0
   sw $t1, -504($fp)
   # GOTO label_END_168
j label_END_168
label_TRUE_167: 
   # LOCAL local_option_at_CellularAutomaton_internal_125 --> -504($fp)
   # local_option_at_CellularAutomaton_internal_125 = 1
   li $t1, 1
   sw $t1, -504($fp)
   label_END_168: 
# IF_ZERO local_option_at_CellularAutomaton_internal_125 GOTO label_FALSEIF_165
# IF_ZERO local_option_at_CellularAutomaton_internal_125 GOTO label_FALSEIF_165
lw $t1, -504($fp)
beq $t1, 0, label_FALSEIF_165
# LOCAL local_option_at_CellularAutomaton_internal_126 --> -508($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_64
sw $t1, 12($v0)
li $t1, 15
sw $t1, 16($v0)
sw $v0, -508($fp)
# LOCAL local_option_at_CellularAutomaton_internal_124 --> -500($fp)
# LOCAL local_option_at_CellularAutomaton_internal_126 --> -508($fp)
# local_option_at_CellularAutomaton_internal_124 = local_option_at_CellularAutomaton_internal_126
lw $t1, -508($fp)
sw $t1, -500($fp)
# GOTO label_ENDIF_166
j label_ENDIF_166
label_FALSEIF_165: 
   # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_128 = local_option_at_CellularAutomaton_num_0 - 10
   lw $t1, -4($fp)
   sub $t1, $t1, 10
   sw $t1, -516($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_128 GOTO label_TRUE_171
   # IF_ZERO local_option_at_CellularAutomaton_internal_128 GOTO label_TRUE_171
   lw $t1, -516($fp)
   beq $t1, 0, label_TRUE_171
   # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
   # local_option_at_CellularAutomaton_internal_128 = 0
   li $t1, 0
   sw $t1, -516($fp)
   # GOTO label_END_172
j label_END_172
label_TRUE_171: 
   # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
   # local_option_at_CellularAutomaton_internal_128 = 1
   li $t1, 1
   sw $t1, -516($fp)
   label_END_172: 
# IF_ZERO local_option_at_CellularAutomaton_internal_128 GOTO label_FALSEIF_169
# IF_ZERO local_option_at_CellularAutomaton_internal_128 GOTO label_FALSEIF_169
lw $t1, -516($fp)
beq $t1, 0, label_FALSEIF_169
# LOCAL local_option_at_CellularAutomaton_internal_129 --> -520($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_65
sw $t1, 12($v0)
li $t1, 15
sw $t1, 16($v0)
sw $v0, -520($fp)
# LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
# LOCAL local_option_at_CellularAutomaton_internal_129 --> -520($fp)
# local_option_at_CellularAutomaton_internal_127 = local_option_at_CellularAutomaton_internal_129
lw $t1, -520($fp)
sw $t1, -512($fp)
# GOTO label_ENDIF_170
j label_ENDIF_170
label_FALSEIF_169: 
   # LOCAL local_option_at_CellularAutomaton_internal_131 --> -528($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_131 = local_option_at_CellularAutomaton_num_0 - 11
   lw $t1, -4($fp)
   sub $t1, $t1, 11
   sw $t1, -528($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_131 GOTO label_TRUE_175
   # IF_ZERO local_option_at_CellularAutomaton_internal_131 GOTO label_TRUE_175
   lw $t1, -528($fp)
   beq $t1, 0, label_TRUE_175
   # LOCAL local_option_at_CellularAutomaton_internal_131 --> -528($fp)
   # local_option_at_CellularAutomaton_internal_131 = 0
   li $t1, 0
   sw $t1, -528($fp)
   # GOTO label_END_176
j label_END_176
label_TRUE_175: 
   # LOCAL local_option_at_CellularAutomaton_internal_131 --> -528($fp)
   # local_option_at_CellularAutomaton_internal_131 = 1
   li $t1, 1
   sw $t1, -528($fp)
   label_END_176: 
# IF_ZERO local_option_at_CellularAutomaton_internal_131 GOTO label_FALSEIF_173
# IF_ZERO local_option_at_CellularAutomaton_internal_131 GOTO label_FALSEIF_173
lw $t1, -528($fp)
beq $t1, 0, label_FALSEIF_173
# LOCAL local_option_at_CellularAutomaton_internal_132 --> -532($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_66
sw $t1, 12($v0)
li $t1, 15
sw $t1, 16($v0)
sw $v0, -532($fp)
# LOCAL local_option_at_CellularAutomaton_internal_130 --> -524($fp)
# LOCAL local_option_at_CellularAutomaton_internal_132 --> -532($fp)
# local_option_at_CellularAutomaton_internal_130 = local_option_at_CellularAutomaton_internal_132
lw $t1, -532($fp)
sw $t1, -524($fp)
# GOTO label_ENDIF_174
j label_ENDIF_174
label_FALSEIF_173: 
   # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_134 = local_option_at_CellularAutomaton_num_0 - 12
   lw $t1, -4($fp)
   sub $t1, $t1, 12
   sw $t1, -540($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_134 GOTO label_TRUE_179
   # IF_ZERO local_option_at_CellularAutomaton_internal_134 GOTO label_TRUE_179
   lw $t1, -540($fp)
   beq $t1, 0, label_TRUE_179
   # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
   # local_option_at_CellularAutomaton_internal_134 = 0
   li $t1, 0
   sw $t1, -540($fp)
   # GOTO label_END_180
j label_END_180
label_TRUE_179: 
   # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
   # local_option_at_CellularAutomaton_internal_134 = 1
   li $t1, 1
   sw $t1, -540($fp)
   label_END_180: 
# IF_ZERO local_option_at_CellularAutomaton_internal_134 GOTO label_FALSEIF_177
# IF_ZERO local_option_at_CellularAutomaton_internal_134 GOTO label_FALSEIF_177
lw $t1, -540($fp)
beq $t1, 0, label_FALSEIF_177
# LOCAL local_option_at_CellularAutomaton_internal_135 --> -544($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_67
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -544($fp)
# LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
# LOCAL local_option_at_CellularAutomaton_internal_135 --> -544($fp)
# local_option_at_CellularAutomaton_internal_133 = local_option_at_CellularAutomaton_internal_135
lw $t1, -544($fp)
sw $t1, -536($fp)
# GOTO label_ENDIF_178
j label_ENDIF_178
label_FALSEIF_177: 
   # LOCAL local_option_at_CellularAutomaton_internal_137 --> -552($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_137 = local_option_at_CellularAutomaton_num_0 - 13
   lw $t1, -4($fp)
   sub $t1, $t1, 13
   sw $t1, -552($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_137 GOTO label_TRUE_183
   # IF_ZERO local_option_at_CellularAutomaton_internal_137 GOTO label_TRUE_183
   lw $t1, -552($fp)
   beq $t1, 0, label_TRUE_183
   # LOCAL local_option_at_CellularAutomaton_internal_137 --> -552($fp)
   # local_option_at_CellularAutomaton_internal_137 = 0
   li $t1, 0
   sw $t1, -552($fp)
   # GOTO label_END_184
j label_END_184
label_TRUE_183: 
   # LOCAL local_option_at_CellularAutomaton_internal_137 --> -552($fp)
   # local_option_at_CellularAutomaton_internal_137 = 1
   li $t1, 1
   sw $t1, -552($fp)
   label_END_184: 
# IF_ZERO local_option_at_CellularAutomaton_internal_137 GOTO label_FALSEIF_181
# IF_ZERO local_option_at_CellularAutomaton_internal_137 GOTO label_FALSEIF_181
lw $t1, -552($fp)
beq $t1, 0, label_FALSEIF_181
# LOCAL local_option_at_CellularAutomaton_internal_138 --> -556($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_68
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -556($fp)
# LOCAL local_option_at_CellularAutomaton_internal_136 --> -548($fp)
# LOCAL local_option_at_CellularAutomaton_internal_138 --> -556($fp)
# local_option_at_CellularAutomaton_internal_136 = local_option_at_CellularAutomaton_internal_138
lw $t1, -556($fp)
sw $t1, -548($fp)
# GOTO label_ENDIF_182
j label_ENDIF_182
label_FALSEIF_181: 
   # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_140 = local_option_at_CellularAutomaton_num_0 - 14
   lw $t1, -4($fp)
   sub $t1, $t1, 14
   sw $t1, -564($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_140 GOTO label_TRUE_187
   # IF_ZERO local_option_at_CellularAutomaton_internal_140 GOTO label_TRUE_187
   lw $t1, -564($fp)
   beq $t1, 0, label_TRUE_187
   # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
   # local_option_at_CellularAutomaton_internal_140 = 0
   li $t1, 0
   sw $t1, -564($fp)
   # GOTO label_END_188
j label_END_188
label_TRUE_187: 
   # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
   # local_option_at_CellularAutomaton_internal_140 = 1
   li $t1, 1
   sw $t1, -564($fp)
   label_END_188: 
# IF_ZERO local_option_at_CellularAutomaton_internal_140 GOTO label_FALSEIF_185
# IF_ZERO local_option_at_CellularAutomaton_internal_140 GOTO label_FALSEIF_185
lw $t1, -564($fp)
beq $t1, 0, label_FALSEIF_185
# LOCAL local_option_at_CellularAutomaton_internal_141 --> -568($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_69
sw $t1, 12($v0)
li $t1, 25
sw $t1, 16($v0)
sw $v0, -568($fp)
# LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
# LOCAL local_option_at_CellularAutomaton_internal_141 --> -568($fp)
# local_option_at_CellularAutomaton_internal_139 = local_option_at_CellularAutomaton_internal_141
lw $t1, -568($fp)
sw $t1, -560($fp)
# GOTO label_ENDIF_186
j label_ENDIF_186
label_FALSEIF_185: 
   # LOCAL local_option_at_CellularAutomaton_internal_143 --> -576($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_143 = local_option_at_CellularAutomaton_num_0 - 15
   lw $t1, -4($fp)
   sub $t1, $t1, 15
   sw $t1, -576($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_143 GOTO label_TRUE_191
   # IF_ZERO local_option_at_CellularAutomaton_internal_143 GOTO label_TRUE_191
   lw $t1, -576($fp)
   beq $t1, 0, label_TRUE_191
   # LOCAL local_option_at_CellularAutomaton_internal_143 --> -576($fp)
   # local_option_at_CellularAutomaton_internal_143 = 0
   li $t1, 0
   sw $t1, -576($fp)
   # GOTO label_END_192
j label_END_192
label_TRUE_191: 
   # LOCAL local_option_at_CellularAutomaton_internal_143 --> -576($fp)
   # local_option_at_CellularAutomaton_internal_143 = 1
   li $t1, 1
   sw $t1, -576($fp)
   label_END_192: 
# IF_ZERO local_option_at_CellularAutomaton_internal_143 GOTO label_FALSEIF_189
# IF_ZERO local_option_at_CellularAutomaton_internal_143 GOTO label_FALSEIF_189
lw $t1, -576($fp)
beq $t1, 0, label_FALSEIF_189
# LOCAL local_option_at_CellularAutomaton_internal_144 --> -580($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_70
sw $t1, 12($v0)
li $t1, 21
sw $t1, 16($v0)
sw $v0, -580($fp)
# LOCAL local_option_at_CellularAutomaton_internal_142 --> -572($fp)
# LOCAL local_option_at_CellularAutomaton_internal_144 --> -580($fp)
# local_option_at_CellularAutomaton_internal_142 = local_option_at_CellularAutomaton_internal_144
lw $t1, -580($fp)
sw $t1, -572($fp)
# GOTO label_ENDIF_190
j label_ENDIF_190
label_FALSEIF_189: 
   # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_146 = local_option_at_CellularAutomaton_num_0 - 16
   lw $t1, -4($fp)
   sub $t1, $t1, 16
   sw $t1, -588($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_146 GOTO label_TRUE_195
   # IF_ZERO local_option_at_CellularAutomaton_internal_146 GOTO label_TRUE_195
   lw $t1, -588($fp)
   beq $t1, 0, label_TRUE_195
   # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
   # local_option_at_CellularAutomaton_internal_146 = 0
   li $t1, 0
   sw $t1, -588($fp)
   # GOTO label_END_196
j label_END_196
label_TRUE_195: 
   # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
   # local_option_at_CellularAutomaton_internal_146 = 1
   li $t1, 1
   sw $t1, -588($fp)
   label_END_196: 
# IF_ZERO local_option_at_CellularAutomaton_internal_146 GOTO label_FALSEIF_193
# IF_ZERO local_option_at_CellularAutomaton_internal_146 GOTO label_FALSEIF_193
lw $t1, -588($fp)
beq $t1, 0, label_FALSEIF_193
# LOCAL local_option_at_CellularAutomaton_internal_147 --> -592($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_71
sw $t1, 12($v0)
li $t1, 21
sw $t1, 16($v0)
sw $v0, -592($fp)
# LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
# LOCAL local_option_at_CellularAutomaton_internal_147 --> -592($fp)
# local_option_at_CellularAutomaton_internal_145 = local_option_at_CellularAutomaton_internal_147
lw $t1, -592($fp)
sw $t1, -584($fp)
# GOTO label_ENDIF_194
j label_ENDIF_194
label_FALSEIF_193: 
   # LOCAL local_option_at_CellularAutomaton_internal_149 --> -600($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_149 = local_option_at_CellularAutomaton_num_0 - 17
   lw $t1, -4($fp)
   sub $t1, $t1, 17
   sw $t1, -600($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_149 GOTO label_TRUE_199
   # IF_ZERO local_option_at_CellularAutomaton_internal_149 GOTO label_TRUE_199
   lw $t1, -600($fp)
   beq $t1, 0, label_TRUE_199
   # LOCAL local_option_at_CellularAutomaton_internal_149 --> -600($fp)
   # local_option_at_CellularAutomaton_internal_149 = 0
   li $t1, 0
   sw $t1, -600($fp)
   # GOTO label_END_200
j label_END_200
label_TRUE_199: 
   # LOCAL local_option_at_CellularAutomaton_internal_149 --> -600($fp)
   # local_option_at_CellularAutomaton_internal_149 = 1
   li $t1, 1
   sw $t1, -600($fp)
   label_END_200: 
# IF_ZERO local_option_at_CellularAutomaton_internal_149 GOTO label_FALSEIF_197
# IF_ZERO local_option_at_CellularAutomaton_internal_149 GOTO label_FALSEIF_197
lw $t1, -600($fp)
beq $t1, 0, label_FALSEIF_197
# LOCAL local_option_at_CellularAutomaton_internal_150 --> -604($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_72
sw $t1, 12($v0)
li $t1, 28
sw $t1, 16($v0)
sw $v0, -604($fp)
# LOCAL local_option_at_CellularAutomaton_internal_148 --> -596($fp)
# LOCAL local_option_at_CellularAutomaton_internal_150 --> -604($fp)
# local_option_at_CellularAutomaton_internal_148 = local_option_at_CellularAutomaton_internal_150
lw $t1, -604($fp)
sw $t1, -596($fp)
# GOTO label_ENDIF_198
j label_ENDIF_198
label_FALSEIF_197: 
   # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_152 = local_option_at_CellularAutomaton_num_0 - 18
   lw $t1, -4($fp)
   sub $t1, $t1, 18
   sw $t1, -612($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_152 GOTO label_TRUE_203
   # IF_ZERO local_option_at_CellularAutomaton_internal_152 GOTO label_TRUE_203
   lw $t1, -612($fp)
   beq $t1, 0, label_TRUE_203
   # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
   # local_option_at_CellularAutomaton_internal_152 = 0
   li $t1, 0
   sw $t1, -612($fp)
   # GOTO label_END_204
j label_END_204
label_TRUE_203: 
   # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
   # local_option_at_CellularAutomaton_internal_152 = 1
   li $t1, 1
   sw $t1, -612($fp)
   label_END_204: 
# IF_ZERO local_option_at_CellularAutomaton_internal_152 GOTO label_FALSEIF_201
# IF_ZERO local_option_at_CellularAutomaton_internal_152 GOTO label_FALSEIF_201
lw $t1, -612($fp)
beq $t1, 0, label_FALSEIF_201
# LOCAL local_option_at_CellularAutomaton_internal_153 --> -616($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_73
sw $t1, 12($v0)
li $t1, 28
sw $t1, 16($v0)
sw $v0, -616($fp)
# LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
# LOCAL local_option_at_CellularAutomaton_internal_153 --> -616($fp)
# local_option_at_CellularAutomaton_internal_151 = local_option_at_CellularAutomaton_internal_153
lw $t1, -616($fp)
sw $t1, -608($fp)
# GOTO label_ENDIF_202
j label_ENDIF_202
label_FALSEIF_201: 
   # LOCAL local_option_at_CellularAutomaton_internal_155 --> -624($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_155 = local_option_at_CellularAutomaton_num_0 - 19
   lw $t1, -4($fp)
   sub $t1, $t1, 19
   sw $t1, -624($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_155 GOTO label_TRUE_207
   # IF_ZERO local_option_at_CellularAutomaton_internal_155 GOTO label_TRUE_207
   lw $t1, -624($fp)
   beq $t1, 0, label_TRUE_207
   # LOCAL local_option_at_CellularAutomaton_internal_155 --> -624($fp)
   # local_option_at_CellularAutomaton_internal_155 = 0
   li $t1, 0
   sw $t1, -624($fp)
   # GOTO label_END_208
j label_END_208
label_TRUE_207: 
   # LOCAL local_option_at_CellularAutomaton_internal_155 --> -624($fp)
   # local_option_at_CellularAutomaton_internal_155 = 1
   li $t1, 1
   sw $t1, -624($fp)
   label_END_208: 
# IF_ZERO local_option_at_CellularAutomaton_internal_155 GOTO label_FALSEIF_205
# IF_ZERO local_option_at_CellularAutomaton_internal_155 GOTO label_FALSEIF_205
lw $t1, -624($fp)
beq $t1, 0, label_FALSEIF_205
# LOCAL local_option_at_CellularAutomaton_internal_156 --> -628($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_74
sw $t1, 12($v0)
li $t1, 16
sw $t1, 16($v0)
sw $v0, -628($fp)
# LOCAL local_option_at_CellularAutomaton_internal_154 --> -620($fp)
# LOCAL local_option_at_CellularAutomaton_internal_156 --> -628($fp)
# local_option_at_CellularAutomaton_internal_154 = local_option_at_CellularAutomaton_internal_156
lw $t1, -628($fp)
sw $t1, -620($fp)
# GOTO label_ENDIF_206
j label_ENDIF_206
label_FALSEIF_205: 
   # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_158 = local_option_at_CellularAutomaton_num_0 - 20
   lw $t1, -4($fp)
   sub $t1, $t1, 20
   sw $t1, -636($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_158 GOTO label_TRUE_211
   # IF_ZERO local_option_at_CellularAutomaton_internal_158 GOTO label_TRUE_211
   lw $t1, -636($fp)
   beq $t1, 0, label_TRUE_211
   # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
   # local_option_at_CellularAutomaton_internal_158 = 0
   li $t1, 0
   sw $t1, -636($fp)
   # GOTO label_END_212
j label_END_212
label_TRUE_211: 
   # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
   # local_option_at_CellularAutomaton_internal_158 = 1
   li $t1, 1
   sw $t1, -636($fp)
   label_END_212: 
# IF_ZERO local_option_at_CellularAutomaton_internal_158 GOTO label_FALSEIF_209
# IF_ZERO local_option_at_CellularAutomaton_internal_158 GOTO label_FALSEIF_209
lw $t1, -636($fp)
beq $t1, 0, label_FALSEIF_209
# LOCAL local_option_at_CellularAutomaton_internal_159 --> -640($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_75
sw $t1, 12($v0)
li $t1, 28
sw $t1, 16($v0)
sw $v0, -640($fp)
# LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
# LOCAL local_option_at_CellularAutomaton_internal_159 --> -640($fp)
# local_option_at_CellularAutomaton_internal_157 = local_option_at_CellularAutomaton_internal_159
lw $t1, -640($fp)
sw $t1, -632($fp)
# GOTO label_ENDIF_210
j label_ENDIF_210
label_FALSEIF_209: 
   # LOCAL local_option_at_CellularAutomaton_internal_161 --> -648($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # local_option_at_CellularAutomaton_internal_161 = local_option_at_CellularAutomaton_num_0 - 21
   lw $t1, -4($fp)
   sub $t1, $t1, 21
   sw $t1, -648($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_161 GOTO label_TRUE_215
   # IF_ZERO local_option_at_CellularAutomaton_internal_161 GOTO label_TRUE_215
   lw $t1, -648($fp)
   beq $t1, 0, label_TRUE_215
   # LOCAL local_option_at_CellularAutomaton_internal_161 --> -648($fp)
   # local_option_at_CellularAutomaton_internal_161 = 0
   li $t1, 0
   sw $t1, -648($fp)
   # GOTO label_END_216
j label_END_216
label_TRUE_215: 
   # LOCAL local_option_at_CellularAutomaton_internal_161 --> -648($fp)
   # local_option_at_CellularAutomaton_internal_161 = 1
   li $t1, 1
   sw $t1, -648($fp)
   label_END_216: 
# IF_ZERO local_option_at_CellularAutomaton_internal_161 GOTO label_FALSEIF_213
# IF_ZERO local_option_at_CellularAutomaton_internal_161 GOTO label_FALSEIF_213
lw $t1, -648($fp)
beq $t1, 0, label_FALSEIF_213
# LOCAL local_option_at_CellularAutomaton_internal_162 --> -652($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, data_76
sw $t1, 12($v0)
li $t1, 28
sw $t1, 16($v0)
sw $v0, -652($fp)
# LOCAL local_option_at_CellularAutomaton_internal_160 --> -644($fp)
# LOCAL local_option_at_CellularAutomaton_internal_162 --> -652($fp)
# local_option_at_CellularAutomaton_internal_160 = local_option_at_CellularAutomaton_internal_162
lw $t1, -652($fp)
sw $t1, -644($fp)
# GOTO label_ENDIF_214
j label_ENDIF_214
label_FALSEIF_213: 
   # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_77
   sw $t1, 12($v0)
   li $t1, 25
   sw $t1, 16($v0)
   sw $v0, -656($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_160 --> -644($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
   # local_option_at_CellularAutomaton_internal_160 = local_option_at_CellularAutomaton_internal_163
   lw $t1, -656($fp)
   sw $t1, -644($fp)
   label_ENDIF_214: 
# LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
# LOCAL local_option_at_CellularAutomaton_internal_160 --> -644($fp)
# local_option_at_CellularAutomaton_internal_157 = local_option_at_CellularAutomaton_internal_160
lw $t1, -644($fp)
sw $t1, -632($fp)
label_ENDIF_210: 
# LOCAL local_option_at_CellularAutomaton_internal_154 --> -620($fp)
# LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
# local_option_at_CellularAutomaton_internal_154 = local_option_at_CellularAutomaton_internal_157
lw $t1, -632($fp)
sw $t1, -620($fp)
label_ENDIF_206: 
# LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
# LOCAL local_option_at_CellularAutomaton_internal_154 --> -620($fp)
# local_option_at_CellularAutomaton_internal_151 = local_option_at_CellularAutomaton_internal_154
lw $t1, -620($fp)
sw $t1, -608($fp)
label_ENDIF_202: 
# LOCAL local_option_at_CellularAutomaton_internal_148 --> -596($fp)
# LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
# local_option_at_CellularAutomaton_internal_148 = local_option_at_CellularAutomaton_internal_151
lw $t1, -608($fp)
sw $t1, -596($fp)
label_ENDIF_198: 
# LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
# LOCAL local_option_at_CellularAutomaton_internal_148 --> -596($fp)
# local_option_at_CellularAutomaton_internal_145 = local_option_at_CellularAutomaton_internal_148
lw $t1, -596($fp)
sw $t1, -584($fp)
label_ENDIF_194: 
# LOCAL local_option_at_CellularAutomaton_internal_142 --> -572($fp)
# LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
# local_option_at_CellularAutomaton_internal_142 = local_option_at_CellularAutomaton_internal_145
lw $t1, -584($fp)
sw $t1, -572($fp)
label_ENDIF_190: 
# LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
# LOCAL local_option_at_CellularAutomaton_internal_142 --> -572($fp)
# local_option_at_CellularAutomaton_internal_139 = local_option_at_CellularAutomaton_internal_142
lw $t1, -572($fp)
sw $t1, -560($fp)
label_ENDIF_186: 
# LOCAL local_option_at_CellularAutomaton_internal_136 --> -548($fp)
# LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
# local_option_at_CellularAutomaton_internal_136 = local_option_at_CellularAutomaton_internal_139
lw $t1, -560($fp)
sw $t1, -548($fp)
label_ENDIF_182: 
# LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
# LOCAL local_option_at_CellularAutomaton_internal_136 --> -548($fp)
# local_option_at_CellularAutomaton_internal_133 = local_option_at_CellularAutomaton_internal_136
lw $t1, -548($fp)
sw $t1, -536($fp)
label_ENDIF_178: 
# LOCAL local_option_at_CellularAutomaton_internal_130 --> -524($fp)
# LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
# local_option_at_CellularAutomaton_internal_130 = local_option_at_CellularAutomaton_internal_133
lw $t1, -536($fp)
sw $t1, -524($fp)
label_ENDIF_174: 
# LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
# LOCAL local_option_at_CellularAutomaton_internal_130 --> -524($fp)
# local_option_at_CellularAutomaton_internal_127 = local_option_at_CellularAutomaton_internal_130
lw $t1, -524($fp)
sw $t1, -512($fp)
label_ENDIF_170: 
# LOCAL local_option_at_CellularAutomaton_internal_124 --> -500($fp)
# LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
# local_option_at_CellularAutomaton_internal_124 = local_option_at_CellularAutomaton_internal_127
lw $t1, -512($fp)
sw $t1, -500($fp)
label_ENDIF_166: 
# LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
# LOCAL local_option_at_CellularAutomaton_internal_124 --> -500($fp)
# local_option_at_CellularAutomaton_internal_121 = local_option_at_CellularAutomaton_internal_124
lw $t1, -500($fp)
sw $t1, -488($fp)
label_ENDIF_162: 
# LOCAL local_option_at_CellularAutomaton_internal_118 --> -476($fp)
# LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
# local_option_at_CellularAutomaton_internal_118 = local_option_at_CellularAutomaton_internal_121
lw $t1, -488($fp)
sw $t1, -476($fp)
label_ENDIF_158: 
# LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
# LOCAL local_option_at_CellularAutomaton_internal_118 --> -476($fp)
# local_option_at_CellularAutomaton_internal_115 = local_option_at_CellularAutomaton_internal_118
lw $t1, -476($fp)
sw $t1, -464($fp)
label_ENDIF_154: 
# LOCAL local_option_at_CellularAutomaton_internal_112 --> -452($fp)
# LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
# local_option_at_CellularAutomaton_internal_112 = local_option_at_CellularAutomaton_internal_115
lw $t1, -464($fp)
sw $t1, -452($fp)
label_ENDIF_150: 
# LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
# LOCAL local_option_at_CellularAutomaton_internal_112 --> -452($fp)
# local_option_at_CellularAutomaton_internal_109 = local_option_at_CellularAutomaton_internal_112
lw $t1, -452($fp)
sw $t1, -440($fp)
label_ENDIF_146: 
# LOCAL local_option_at_CellularAutomaton_internal_106 --> -428($fp)
# LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
# local_option_at_CellularAutomaton_internal_106 = local_option_at_CellularAutomaton_internal_109
lw $t1, -440($fp)
sw $t1, -428($fp)
label_ENDIF_142: 
# LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
# LOCAL local_option_at_CellularAutomaton_internal_106 --> -428($fp)
# local_option_at_CellularAutomaton_internal_103 = local_option_at_CellularAutomaton_internal_106
lw $t1, -428($fp)
sw $t1, -416($fp)
label_ENDIF_138: 
# LOCAL local_option_at_CellularAutomaton_internal_100 --> -404($fp)
# LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
# local_option_at_CellularAutomaton_internal_100 = local_option_at_CellularAutomaton_internal_103
lw $t1, -416($fp)
sw $t1, -404($fp)
label_ENDIF_134: 
# RETURN local_option_at_CellularAutomaton_internal_100
lw $v0, -404($fp)
# Deallocate stack frame for function function_option_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 664
jr $ra
# Function END


# function_prompt_at_CellularAutomaton implementation.
# @Params:
function_prompt_at_CellularAutomaton: 
   # Allocate stack frame for function function_prompt_at_CellularAutomaton.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_0
   sw $t1, 12($v0)
   li $t1, 0
   sw $t1, 16($v0)
   sw $v0, -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt_at_CellularAutomaton_internal_1 = local_prompt_at_CellularAutomaton_internal_3
   lw $t1, -16($fp)
   sw $t1, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_78
   sw $t1, 12($v0)
   li $t1, 54
   sw $t1, 16($v0)
   sw $v0, -20($fp)
   # ARG local_prompt_at_CellularAutomaton_internal_4
   # LOCAL local_prompt_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t1, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_prompt_at_CellularAutomaton_internal_2 = VCALL local_prompt_at_CellularAutomaton_internal_1 out_string
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt_at_CellularAutomaton_internal_5 = local_prompt_at_CellularAutomaton_internal_7
   lw $t1, -32($fp)
   sw $t1, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_79
   sw $t1, 12($v0)
   li $t1, 49
   sw $t1, 16($v0)
   sw $v0, -36($fp)
   # ARG local_prompt_at_CellularAutomaton_internal_8
   # LOCAL local_prompt_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t1, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_prompt_at_CellularAutomaton_internal_6 = VCALL local_prompt_at_CellularAutomaton_internal_5 out_string
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt_at_CellularAutomaton_internal_9 = local_prompt_at_CellularAutomaton_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_prompt_at_CellularAutomaton_internal_10 = VCALL local_prompt_at_CellularAutomaton_internal_9 in_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 20($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_prompt_at_CellularAutomaton_ans_0 = local_prompt_at_CellularAutomaton_internal_10
   lw $t1, -44($fp)
   sw $t1, -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt_at_CellularAutomaton_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt_at_CellularAutomaton_internal_12 = local_prompt_at_CellularAutomaton_internal_14
   lw $t1, -60($fp)
   sw $t1, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_80
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -64($fp)
   # ARG local_prompt_at_CellularAutomaton_internal_15
   # LOCAL local_prompt_at_CellularAutomaton_internal_15 --> -64($fp)
   lw $t1, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_prompt_at_CellularAutomaton_internal_13 = VCALL local_prompt_at_CellularAutomaton_internal_12 out_string
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_81
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -76($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_prompt_at_CellularAutomaton_internal_17 = local_prompt_at_CellularAutomaton_ans_0 - local_prompt_at_CellularAutomaton_internal_18
   lw $t1, -4($fp)
   lw $t2, -76($fp)
   sub $t1, $t1, $t2
   sw $t1, -72($fp)
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_17 GOTO label_TRUE_219
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_17 GOTO label_TRUE_219
   lw $t1, -72($fp)
   beq $t1, 0, label_TRUE_219
   # LOCAL local_prompt_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_prompt_at_CellularAutomaton_internal_17 = 0
   li $t1, 0
   sw $t1, -72($fp)
   # GOTO label_END_220
j label_END_220
label_TRUE_219: 
   # LOCAL local_prompt_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_prompt_at_CellularAutomaton_internal_17 = 1
   li $t1, 1
   sw $t1, -72($fp)
   label_END_220: 
# IF_ZERO local_prompt_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_217
# IF_ZERO local_prompt_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_217
lw $t1, -72($fp)
beq $t1, 0, label_FALSEIF_217
# LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
# local_prompt_at_CellularAutomaton_internal_19 = 0
li $t1, 0
sw $t1, -80($fp)
# LOCAL local_prompt_at_CellularAutomaton_internal_16 --> -68($fp)
# LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
# local_prompt_at_CellularAutomaton_internal_16 = local_prompt_at_CellularAutomaton_internal_19
lw $t1, -80($fp)
sw $t1, -68($fp)
# GOTO label_ENDIF_218
j label_ENDIF_218
label_FALSEIF_217: 
   # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_prompt_at_CellularAutomaton_internal_20 = 1
   li $t1, 1
   sw $t1, -84($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_16 --> -68($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_prompt_at_CellularAutomaton_internal_16 = local_prompt_at_CellularAutomaton_internal_20
   lw $t1, -84($fp)
   sw $t1, -68($fp)
   label_ENDIF_218: 
# RETURN local_prompt_at_CellularAutomaton_internal_16
lw $v0, -68($fp)
# Deallocate stack frame for function function_prompt_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 92
jr $ra
# Function END


# function_prompt2_at_CellularAutomaton implementation.
# @Params:
function_prompt2_at_CellularAutomaton: 
   # Allocate stack frame for function function_prompt2_at_CellularAutomaton.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_0
   sw $t1, 12($v0)
   li $t1, 0
   sw $t1, 16($v0)
   sw $v0, -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt2_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt2_at_CellularAutomaton_internal_1 = local_prompt2_at_CellularAutomaton_internal_3
   lw $t1, -16($fp)
   sw $t1, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_82
   sw $t1, 12($v0)
   li $t1, 2
   sw $t1, 16($v0)
   sw $v0, -20($fp)
   # ARG local_prompt2_at_CellularAutomaton_internal_4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t1, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_prompt2_at_CellularAutomaton_internal_2 = VCALL local_prompt2_at_CellularAutomaton_internal_1 out_string
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt2_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt2_at_CellularAutomaton_internal_5 = local_prompt2_at_CellularAutomaton_internal_7
   lw $t1, -32($fp)
   sw $t1, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_83
   sw $t1, 12($v0)
   li $t1, 48
   sw $t1, 16($v0)
   sw $v0, -36($fp)
   # ARG local_prompt2_at_CellularAutomaton_internal_8
   # LOCAL local_prompt2_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t1, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_prompt2_at_CellularAutomaton_internal_6 = VCALL local_prompt2_at_CellularAutomaton_internal_5 out_string
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt2_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt2_at_CellularAutomaton_internal_9 = local_prompt2_at_CellularAutomaton_internal_11
   lw $t1, -48($fp)
   sw $t1, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_84
   sw $t1, 12($v0)
   li $t1, 49
   sw $t1, 16($v0)
   sw $v0, -52($fp)
   # ARG local_prompt2_at_CellularAutomaton_internal_12
   # LOCAL local_prompt2_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t1, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_prompt2_at_CellularAutomaton_internal_10 = VCALL local_prompt2_at_CellularAutomaton_internal_9 out_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_prompt2_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_prompt2_at_CellularAutomaton_internal_13 = local_prompt2_at_CellularAutomaton_internal_15
   lw $t1, -64($fp)
   sw $t1, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt2_at_CellularAutomaton_internal_14 = VCALL local_prompt2_at_CellularAutomaton_internal_13 in_string
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 20($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt2_at_CellularAutomaton_ans_0 = local_prompt2_at_CellularAutomaton_internal_14
   lw $t1, -60($fp)
   sw $t1, -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_85
   sw $t1, 12($v0)
   li $t1, 1
   sw $t1, 16($v0)
   sw $v0, -76($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_prompt2_at_CellularAutomaton_internal_17 = local_prompt2_at_CellularAutomaton_ans_0 - local_prompt2_at_CellularAutomaton_internal_18
   lw $t1, -4($fp)
   lw $t2, -76($fp)
   sub $t1, $t1, $t2
   sw $t1, -72($fp)
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_17 GOTO label_TRUE_223
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_17 GOTO label_TRUE_223
   lw $t1, -72($fp)
   beq $t1, 0, label_TRUE_223
   # LOCAL local_prompt2_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_prompt2_at_CellularAutomaton_internal_17 = 0
   li $t1, 0
   sw $t1, -72($fp)
   # GOTO label_END_224
j label_END_224
label_TRUE_223: 
   # LOCAL local_prompt2_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_prompt2_at_CellularAutomaton_internal_17 = 1
   li $t1, 1
   sw $t1, -72($fp)
   label_END_224: 
# IF_ZERO local_prompt2_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_221
# IF_ZERO local_prompt2_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_221
lw $t1, -72($fp)
beq $t1, 0, label_FALSEIF_221
# LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
# local_prompt2_at_CellularAutomaton_internal_19 = 1
li $t1, 1
sw $t1, -80($fp)
# LOCAL local_prompt2_at_CellularAutomaton_internal_16 --> -68($fp)
# LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
# local_prompt2_at_CellularAutomaton_internal_16 = local_prompt2_at_CellularAutomaton_internal_19
lw $t1, -80($fp)
sw $t1, -68($fp)
# GOTO label_ENDIF_222
j label_ENDIF_222
label_FALSEIF_221: 
   # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_prompt2_at_CellularAutomaton_internal_20 = 0
   li $t1, 0
   sw $t1, -84($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_16 --> -68($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_prompt2_at_CellularAutomaton_internal_16 = local_prompt2_at_CellularAutomaton_internal_20
   lw $t1, -84($fp)
   sw $t1, -68($fp)
   label_ENDIF_222: 
# RETURN local_prompt2_at_CellularAutomaton_internal_16
lw $v0, -68($fp)
# Deallocate stack frame for function function_prompt2_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 92
jr $ra
# Function END


# __Main__attrib__cells__init implementation.
# @Params:
__Main__attrib__cells__init: 
   # Allocate stack frame for function __Main__attrib__cells__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__cells__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 148
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 148
   # LOCAL local_main_at_Main_continue_0 --> -4($fp)
   # local_main_at_Main_continue_0 = 0
   li $t1, 0
   sw $t1, -4($fp)
   # LOCAL local_main_at_Main_choice_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_0
   sw $t1, 12($v0)
   li $t1, 0
   sw $t1, 16($v0)
   sw $v0, -8($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_2 = local_main_at_Main_internal_4
   lw $t1, -20($fp)
   sw $t1, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_86
   sw $t1, 12($v0)
   li $t1, 29
   sw $t1, 16($v0)
   sw $v0, -24($fp)
   # ARG local_main_at_Main_internal_5
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   lw $t1, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = VCALL local_main_at_Main_internal_2 out_string
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_internal_8
   lw $t1, -36($fp)
   sw $t1, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, data_87
   sw $t1, 12($v0)
   li $t1, 47
   sw $t1, 16($v0)
   sw $v0, -40($fp)
   # ARG local_main_at_Main_internal_9
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   lw $t1, -40($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 out_string
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t1, 4($s1)
   # Get pointer to type's VTABLE
   lw $t2, 0($t1)
   # Get pointer to function address
   lw $t3, 12($t2)
   # Call function. Result is on $v0
   jalr $t3
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_WHILE_225: 
      # LOCAL local_main_at_Main_internal_12 --> -52($fp)
      # local_main_at_Main_internal_12 = SELF
      sw $s1, -52($fp)
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      # LOCAL local_main_at_Main_internal_12 --> -52($fp)
      # local_main_at_Main_internal_10 = local_main_at_Main_internal_12
      lw $t1, -52($fp)
      sw $t1, -44($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # local_main_at_Main_internal_11 = VCALL local_main_at_Main_internal_10 prompt2
      # Save new self pointer in $s1
      lw $s1, -44($fp)
      # Get pointer to type
      lw $t1, 4($s1)
      # Get pointer to type's VTABLE
      lw $t2, 0($t1)
      # Get pointer to function address
      lw $t3, 104($t2)
      # Call function. Result is on $v0
      jalr $t3
      sw $v0, -48($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # IF_ZERO local_main_at_Main_internal_11 GOTO label_WHILE_END_226
      # IF_ZERO local_main_at_Main_internal_11 GOTO label_WHILE_END_226
      lw $t1, -48($fp)
      beq $t1, 0, label_WHILE_END_226
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # local_main_at_Main_internal_13 = 1
      li $t1, 1
      sw $t1, -56($fp)
      # LOCAL local_main_at_Main_continue_0 --> -4($fp)
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # local_main_at_Main_continue_0 = local_main_at_Main_internal_13
      lw $t1, -56($fp)
      sw $t1, -4($fp)
      # LOCAL local_main_at_Main_internal_16 --> -68($fp)
      # local_main_at_Main_internal_16 = SELF
      sw $s1, -68($fp)
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # LOCAL local_main_at_Main_internal_16 --> -68($fp)
      # local_main_at_Main_internal_14 = local_main_at_Main_internal_16
      lw $t1, -68($fp)
      sw $t1, -60($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      # local_main_at_Main_internal_15 = VCALL local_main_at_Main_internal_14 option
      # Save new self pointer in $s1
      lw $s1, -60($fp)
      # Get pointer to type
      lw $t1, 4($s1)
      # Get pointer to type's VTABLE
      lw $t2, 0($t1)
      # Get pointer to function address
      lw $t3, 96($t2)
      # Call function. Result is on $v0
      jalr $t3
      sw $v0, -64($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_choice_1 --> -8($fp)
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      # local_main_at_Main_choice_1 = local_main_at_Main_internal_15
      lw $t1, -64($fp)
      sw $t1, -8($fp)
      # LOCAL local_main_at_Main_internal_19 --> -80($fp)
      # local_main_at_Main_internal_19 = ALLOCATE CellularAutomaton
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type name
      la $t3, String
      sw $t3, 0($v0)
      la $t3, String_start
      sw $t3, 4($v0)
      # Load type offset
      li $t3, 8
      sw $t3, 8($v0)
      la $t3, CellularAutomaton
      sw $t3, 12($v0)
      li $t3, 17
      sw $t3, 16($v0)
      move $t3, $v0
      # Allocating 28 bytes of memory
      li $a0, 28
      li $v0, 9
      syscall
      sw $t3, 0($v0)
      la $t3, CellularAutomaton_start
      sw $t3, 4($v0)
      # Load type offset
      li $t3, 20
      sw $t3, 8($v0)
      move $t2, $v0
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      move $s1, $v0
      # Push register t2 into stack
      subu $sp, $sp, 4
      sw $t2, 0($sp)
      jal __Board__attrib__rows__init
      # Pop 4 bytes from stack into register t2
      lw $t2, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 12($t2)
      # Push register t2 into stack
      subu $sp, $sp, 4
      sw $t2, 0($sp)
      jal __Board__attrib__columns__init
      # Pop 4 bytes from stack into register t2
      lw $t2, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 16($t2)
      # Push register t2 into stack
      subu $sp, $sp, 4
      sw $t2, 0($sp)
      jal __Board__attrib__board_size__init
      # Pop 4 bytes from stack into register t2
      lw $t2, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 20($t2)
      # Push register t2 into stack
      subu $sp, $sp, 4
      sw $t2, 0($sp)
      jal __CellularAutomaton__attrib__population_map__init
      # Pop 4 bytes from stack into register t2
      lw $t2, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 24($t2)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      sw $t2, -80($fp)
      # LOCAL local_main_at_Main_internal_17 --> -72($fp)
      # LOCAL local_main_at_Main_internal_19 --> -80($fp)
      # local_main_at_Main_internal_17 = local_main_at_Main_internal_19
      lw $t2, -80($fp)
      sw $t2, -72($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # ARG local_main_at_Main_choice_1
      # LOCAL local_main_at_Main_choice_1 --> -8($fp)
      lw $t2, -8($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t2, 0($sp)
      # LOCAL local_main_at_Main_internal_17 --> -72($fp)
      # LOCAL local_main_at_Main_internal_18 --> -76($fp)
      # local_main_at_Main_internal_18 = VCALL local_main_at_Main_internal_17 init
      # Save new self pointer in $s1
      lw $s1, -72($fp)
      # Get pointer to type
      lw $t2, 4($s1)
      # Get pointer to type's VTABLE
      lw $t3, 0($t2)
      # Get pointer to function address
      lw $t4, 36($t3)
      # Call function. Result is on $v0
      jalr $t4
      sw $v0, -76($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # 
      # LOCAL local_main_at_Main_internal_18 --> -76($fp)
      lw $t2, -76($fp)
      sw $t2, 28($s1)
      # local_main_at_Main_internal_22 = GETATTRIBUTE cells Main
      # LOCAL local_main_at_Main_internal_22 --> -92($fp)
      lw $t2, 28($s1)
      sw $t2, -92($fp)
      # LOCAL local_main_at_Main_internal_20 --> -84($fp)
      # LOCAL local_main_at_Main_internal_22 --> -92($fp)
      # local_main_at_Main_internal_20 = local_main_at_Main_internal_22
      lw $t2, -92($fp)
      sw $t2, -84($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_20 --> -84($fp)
      # LOCAL local_main_at_Main_internal_21 --> -88($fp)
      # local_main_at_Main_internal_21 = VCALL local_main_at_Main_internal_20 print
      # Save new self pointer in $s1
      lw $s1, -84($fp)
      # Get pointer to type
      lw $t2, 4($s1)
      # Get pointer to type's VTABLE
      lw $t3, 0($t2)
      # Get pointer to function address
      lw $t4, 40($t3)
      # Call function. Result is on $v0
      jalr $t4
      sw $v0, -88($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      label_WHILE_227: 
         # IF_ZERO local_main_at_Main_continue_0 GOTO label_WHILE_END_228
         # IF_ZERO local_main_at_Main_continue_0 GOTO label_WHILE_END_228
         lw $t2, -4($fp)
         beq $t2, 0, label_WHILE_END_228
         # LOCAL local_main_at_Main_internal_26 --> -108($fp)
         # local_main_at_Main_internal_26 = SELF
         sw $s1, -108($fp)
         # LOCAL local_main_at_Main_internal_24 --> -100($fp)
         # LOCAL local_main_at_Main_internal_26 --> -108($fp)
         # local_main_at_Main_internal_24 = local_main_at_Main_internal_26
         lw $t2, -108($fp)
         sw $t2, -100($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_24 --> -100($fp)
         # LOCAL local_main_at_Main_internal_25 --> -104($fp)
         # local_main_at_Main_internal_25 = VCALL local_main_at_Main_internal_24 prompt
         # Save new self pointer in $s1
         lw $s1, -100($fp)
         # Get pointer to type
         lw $t2, 4($s1)
         # Get pointer to type's VTABLE
         lw $t3, 0($t2)
         # Get pointer to function address
         lw $t4, 100($t3)
         # Call function. Result is on $v0
         jalr $t4
         sw $v0, -104($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # IF_ZERO local_main_at_Main_internal_25 GOTO label_FALSEIF_229
         # IF_ZERO local_main_at_Main_internal_25 GOTO label_FALSEIF_229
         lw $t2, -104($fp)
         beq $t2, 0, label_FALSEIF_229
         # local_main_at_Main_internal_29 = GETATTRIBUTE cells Main
         # LOCAL local_main_at_Main_internal_29 --> -120($fp)
         lw $t2, 28($s1)
         sw $t2, -120($fp)
         # LOCAL local_main_at_Main_internal_27 --> -112($fp)
         # LOCAL local_main_at_Main_internal_29 --> -120($fp)
         # local_main_at_Main_internal_27 = local_main_at_Main_internal_29
         lw $t2, -120($fp)
         sw $t2, -112($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_27 --> -112($fp)
         # LOCAL local_main_at_Main_internal_28 --> -116($fp)
         # local_main_at_Main_internal_28 = VCALL local_main_at_Main_internal_27 evolve
         # Save new self pointer in $s1
         lw $s1, -112($fp)
         # Get pointer to type
         lw $t2, 4($s1)
         # Get pointer to type's VTABLE
         lw $t3, 0($t2)
         # Get pointer to function address
         lw $t4, 92($t3)
         # Call function. Result is on $v0
         jalr $t4
         sw $v0, -116($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # local_main_at_Main_internal_32 = GETATTRIBUTE cells Main
         # LOCAL local_main_at_Main_internal_32 --> -132($fp)
         lw $t2, 28($s1)
         sw $t2, -132($fp)
         # LOCAL local_main_at_Main_internal_30 --> -124($fp)
         # LOCAL local_main_at_Main_internal_32 --> -132($fp)
         # local_main_at_Main_internal_30 = local_main_at_Main_internal_32
         lw $t2, -132($fp)
         sw $t2, -124($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_30 --> -124($fp)
         # LOCAL local_main_at_Main_internal_31 --> -128($fp)
         # local_main_at_Main_internal_31 = VCALL local_main_at_Main_internal_30 print
         # Save new self pointer in $s1
         lw $s1, -124($fp)
         # Get pointer to type
         lw $t2, 4($s1)
         # Get pointer to type's VTABLE
         lw $t3, 0($t2)
         # Get pointer to function address
         lw $t4, 40($t3)
         # Call function. Result is on $v0
         jalr $t4
         sw $v0, -128($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # LOCAL local_main_at_Main_internal_23 --> -96($fp)
         # LOCAL local_main_at_Main_internal_31 --> -128($fp)
         # local_main_at_Main_internal_23 = local_main_at_Main_internal_31
         lw $t2, -128($fp)
         sw $t2, -96($fp)
         # GOTO label_ENDIF_230
j label_ENDIF_230
label_FALSEIF_229: 
   # LOCAL local_main_at_Main_internal_33 --> -136($fp)
   # local_main_at_Main_internal_33 = 0
   li $t2, 0
   sw $t2, -136($fp)
   # LOCAL local_main_at_Main_continue_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_33 --> -136($fp)
   # local_main_at_Main_continue_0 = local_main_at_Main_internal_33
   lw $t2, -136($fp)
   sw $t2, -4($fp)
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   # local_main_at_Main_internal_23 = 
   label_ENDIF_230: 
# GOTO label_WHILE_227
j label_WHILE_227
label_WHILE_END_228: 
   # GOTO label_WHILE_225
   j label_WHILE_225
   label_WHILE_END_226: 
      # LOCAL local_main_at_Main_internal_34 --> -140($fp)
      # local_main_at_Main_internal_34 = SELF
      sw $s1, -140($fp)
      # RETURN local_main_at_Main_internal_34
      lw $v0, -140($fp)
      # Deallocate stack frame for function function_main_at_Main.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 148
      jr $ra
      # Function END


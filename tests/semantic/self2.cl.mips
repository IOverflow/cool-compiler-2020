
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Fri Nov 27 19:12:18 2020
# School of Math and Computer Science, University of Havana
# 

.data
Main: 
   # 


.data
#  **** VTABLE for type Main ****
Main_vtable:   .word    function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_abort_at_IO, function_type_name_at_IO, function_copy_at_IO, function_main_at_Main, function_test_at_Main
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   Main_end: 
# 


.data
data_0:   .asciiz    
# 


.data
__Object_Object_tdt_entry__:   .word    0
__Object_Int_tdt_entry__:   .word    1
__Object_String_tdt_entry__:   .word    1
__Object_Bool_tdt_entry__:   .word    1
__Object_IO_tdt_entry__:   .word    1
__Object_Main_tdt_entry__:   .word    2
__Int_Object_tdt_entry__:   .word    -1
__Int_Int_tdt_entry__:   .word    0
__Int_String_tdt_entry__:   .word    -1
__Int_Bool_tdt_entry__:   .word    -1
__Int_IO_tdt_entry__:   .word    -1
__Int_Main_tdt_entry__:   .word    -1
__String_Object_tdt_entry__:   .word    -1
__String_Int_tdt_entry__:   .word    -1
__String_String_tdt_entry__:   .word    0
__String_Bool_tdt_entry__:   .word    -1
__String_IO_tdt_entry__:   .word    -1
__String_Main_tdt_entry__:   .word    -1
__Bool_Object_tdt_entry__:   .word    -1
__Bool_Int_tdt_entry__:   .word    -1
__Bool_String_tdt_entry__:   .word    -1
__Bool_Bool_tdt_entry__:   .word    0
__Bool_IO_tdt_entry__:   .word    -1
__Bool_Main_tdt_entry__:   .word    -1
__IO_Object_tdt_entry__:   .word    -1
__IO_Int_tdt_entry__:   .word    -1
__IO_String_tdt_entry__:   .word    -1
__IO_Bool_tdt_entry__:   .word    -1
__IO_IO_tdt_entry__:   .word    0
__IO_Main_tdt_entry__:   .word    1
__Main_Object_tdt_entry__:   .word    -1
__Main_Int_tdt_entry__:   .word    -1
__Main_String_tdt_entry__:   .word    -1
__Main_Bool_tdt_entry__:   .word    -1
__Main_IO_tdt_entry__:   .word    -1
__Main_Main_tdt_entry__:   .word    0
# 


.data
data_2:   .asciiz    "Hello World!"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # main END

.text
# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN local_in_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


.text
# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $a0, 0($fp)
   li $v0, 1
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


.text
# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $a0, 0($fp)
   li $v0, 4
   syscall
   # RETURN
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


.text
# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


.text
# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # Function END


.text
# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


.text
# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t0, Main
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   move $t1, $v0
   sw $t1, -4($fp)
   # ARG local__internal_0
   # LOCAL local__internal_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # local__internal_1 = CALL function_main_at_Main
   # LOCAL local__internal_1 --> -8($fp)
   jal function_main_at_Main
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


.text
# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = SELF
   sw $s1, -12($fp)
   # local_main_at_Main_internal_0 = TYPEOF local_main_at_Main_internal_2
   lw $t0, -12($fp)
   # Load pointer to type
   lw $t1, 4($t0)
   sw $t1, -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # 
   lw $t0, data_2
   sw $t0, -16($fp)
   # ARG local_main_at_Main_internal_3
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 out_string
   # Save current self pointer in $a1
   move $a1, $s1
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, -4($fp)
   # Get pointer to type's VTABLE
   lw $t1, 0($t0)
   # Get pointer to function address
   lw $t2, 0($t1)
   # Call function. Result is on $v0
   jalr $t2
   sw $v0, -8($fp)
   # Restore self pointer after function call
   move $s1, $a1
   # RETURN local_main_at_Main_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


.text
# function_test_at_Main implementation.
# @Params:
function_test_at_Main: 
   # Allocate stack frame for function function_test_at_Main.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_test_at_Main_self_0 --> -4($fp)
   # local_test_at_Main_self_0 = ALLOCATE Main
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t0, Main
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   move $t1, $v0
   sw $t1, -4($fp)
   # LOCAL local_test_at_Main_internal_1 --> -8($fp)
   # local_test_at_Main_internal_1 = ALLOCATE Main
   # Allocating 8 bytes of memory
   li $a0, 8
   li $v0, 9
   syscall
   la $t0, Main
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   move $t1, $v0
   sw $t1, -8($fp)
   # LOCAL local_test_at_Main_self_0 --> -4($fp)
   # LOCAL local_test_at_Main_internal_1 --> -8($fp)
   # local_test_at_Main_self_0 = local_test_at_Main_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # RETURN local_test_at_Main_self_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_test_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END

